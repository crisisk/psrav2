diff --git a/.env.example b/.env.example
index 1892af9..91bf194 100644
--- a/.env.example
+++ b/.env.example
@@ -1,5 +1,23 @@
 # Database connection string for PostgreSQL
 DATABASE_URL="postgresql://postgres:postgres@localhost:5432/psra"
+# Set to true when your PostgreSQL instance requires SSL
+PGSSL="false"
 
-# Optional override for TARIC API proxy
+# Optional TARIC API override
 # TARIC_API_BASE="https://ec.europa.eu/taxation_customs/dds2/taric/api"
+
+# Redis-backed services (cache, queues, rate limiting)
+# REDIS_URL="redis://localhost:6379"
+# ENABLE_REDIS_CACHE="true"
+# ENABLE_TASK_QUEUE="true"
+
+# Auditing & security event logging
+# ENABLE_AUDIT_LOGS="true"
+
+# Notification settings (SMTP)
+# ENABLE_SMTP_NOTIFICATIONS="true"
+# SMTP_HOST="smtp.example.com"
+# SMTP_PORT="587"
+# SMTP_USER="apikey"
+# SMTP_PASS="super-secret"
+# SMTP_FROM="noreply@psra.example"
diff --git a/ARCHITECTURE.md b/ARCHITECTURE.md
index 3963c38..dde4ae9 100644
--- a/ARCHITECTURE.md
+++ b/ARCHITECTURE.md
@@ -24,7 +24,8 @@ ### Data Layer
 
 ### Supporting Services
 - Mock data module under `lib/mock-data.ts` for offline/demo scenarios.
-- Background infrastructure placeholders (`lib/task-queue.ts`, `lib/notification-service.ts`) reserved for future automation.
+- `lib/config.ts` normalises environment-based feature flags so Redis queues, audit logging, and SMTP alerts can be toggled per deployment.
+- Optional background infrastructure (`lib/task-queue.ts`, `lib/notification-service.ts`, `lib/audit-service.ts`) automatically fall back to in-memory execution when Redis, PostgreSQL, or SMTP providers are unavailable.
 
 ## Deployment Pipeline
 
@@ -42,7 +43,8 @@ ## Data Flows
 
 ## Observability
 
-- TODO: integrate structured logging and tracing once `lib/audit-service.ts` is wired to a log sink.
+- `/api/health` surfaces dependency health (database, Redis, queues, notifications) to the dashboard System Status widget.
+- `lib/audit-service.ts` records audit/security events to PostgreSQL when enabled, or to an in-memory circular buffer in offline environments.
 - Dashboard cards poll the APIs to provide live indicators.
 
 ## Security Considerations
diff --git a/README.md b/README.md
index f7d34c6..551ec61 100644
--- a/README.md
+++ b/README.md
@@ -68,9 +68,29 @@ ## üöÄ Getting Started
    Populate at minimum:
    ```env
    DATABASE_URL=postgresql://user:pass@localhost:5432/psra
-   TARIC_API_BASE=https://ec.europa.eu/taric
    PGSSL=false
    ```
+   Optional integrations are controlled through feature flags:
+   ```env
+   # Redis-backed services (cache, queues, rate limiting)
+   REDIS_URL=redis://localhost:6379
+   ENABLE_REDIS_CACHE=true
+   ENABLE_TASK_QUEUE=true
+
+   # TARIC override if you proxy the EU API
+   TARIC_API_BASE=https://ec.europa.eu/taxation_customs/dds2/taric/api
+
+   # Security/audit logging
+   ENABLE_AUDIT_LOGS=true
+
+   # SMTP notifications
+   ENABLE_SMTP_NOTIFICATIONS=true
+   SMTP_HOST=smtp.example.com
+   SMTP_PORT=587
+   SMTP_USER=apikey
+   SMTP_PASS=super-secret
+   SMTP_FROM=noreply@psra.example
+   ```
 
 3. **Generate Prisma client & apply schema**
    ```bash
@@ -99,7 +119,7 @@ ## üöÄ Getting Started
    ```bash
    npm run build
    ```
-   Falls back to mock data when PostgreSQL is unavailable, ensuring CI and offline demos succeed.
+   Falls back to mock data when PostgreSQL/Redis/SMTP are unavailable, ensuring CI and offline demos succeed.
 
 ## üß™ Testing & Quality Gates
 
@@ -129,12 +149,14 @@ ## üß± Data Assets & Offline Mode
 - Seed assets under `data/` feed Prisma seeds and mock repositories.
 - `lib/mock-data.ts` keeps certificates, analytics, and persona context synchronised when the database is offline.
 - TARIC client gracefully downgrades to seed data after network/database failures, ensuring HS lookup continuity.
+- `lib/config.ts` centralises feature flags so Redis queues, audit logging, and SMTP alerts can be toggled per environment.
 
 ## üõ†Ô∏è Tooling & Developer Experience
 
 - `.editorconfig`, `.gitattributes`, pre-commit hooks, and Makefile unify local tooling.
 - `commands.sh` documents the canonical automation sequence (setup ‚ûú verify ‚ûú build ‚ûú sbom ‚ûú scan ‚ûú docker-build).
 - Keep a Changelog (`CHANGELOG.md`) + Conventional Commits underpin SemVer releases.
+- `/api/health` powers the dashboard System Status card with dependency awareness (database, Redis, queues, notifications).
 
 ## üìÑ Supporting Documents
 
diff --git a/app/api/health/route.ts b/app/api/health/route.ts
index fa9626d..1361c38 100644
--- a/app/api/health/route.ts
+++ b/app/api/health/route.ts
@@ -1 +1,78 @@
-import { NextResponse } from 'next/server'; import { query } from '@/lib/db'; export async function GET(){ try{ const r=await query('SELECT NOW()::text AS now'); return NextResponse.json({ ok:true, db_time: r.rows[0].now }); }catch(e:any){ return NextResponse.json({ ok:false, error: e?.message||String(e) }, { status:500 }); } }
+import { NextResponse } from 'next/server';
+import { query } from '@/lib/db';
+import { cacheService } from '@/lib/cache-service';
+import {
+  config,
+  isDatabaseEnabled,
+  isNotificationEnabled,
+  isRedisEnabled,
+  isTaskQueueEnabled,
+} from '@/lib/config';
+import { taskQueue } from '@/lib/task-queue';
+
+export const dynamic = 'force-dynamic';
+
+export async function GET() {
+  const now = new Date();
+
+  const database = {
+    enabled: isDatabaseEnabled,
+    ok: false,
+    latencyMs: null as number | null,
+    message: '',
+  };
+
+  if (isDatabaseEnabled) {
+    const start = performance.now();
+    try {
+      const result = await query('SELECT NOW()::text AS now');
+      database.ok = true;
+      database.latencyMs = Math.round(performance.now() - start);
+      database.message = result.rows?.[0]?.now ?? 'connected';
+    } catch (error) {
+      database.ok = false;
+      database.message = (error as Error).message;
+    }
+  } else {
+    database.message = 'DATABASE_URL not configured';
+  }
+
+  const cacheStats = await cacheService.getStats();
+  const queueStatus = await taskQueue.getStatus();
+
+  const cache = {
+    enabled: isRedisEnabled,
+    connected: cacheStats.redisConnected,
+    memoryEntries: cacheStats.memoryCacheSize,
+  };
+
+  const notifications = {
+    enabled: isNotificationEnabled,
+  };
+
+  const ok = [
+    !database.enabled || database.ok,
+    !cache.enabled || cache.connected,
+    !isTaskQueueEnabled || queueStatus.connected,
+  ].every(Boolean);
+
+  return NextResponse.json({
+    ok,
+    timestamp: now.toISOString(),
+    environment: {
+      nodeVersion: process.version,
+      redisUrl: config.redisUrl ? 'configured' : 'not-configured',
+      taricApiBase: config.taricApiBase ?? 'default',
+    },
+    database,
+    cache,
+    taskQueue: {
+      enabled: isTaskQueueEnabled,
+      connected: queueStatus.connected,
+      queues: queueStatus.queues,
+    },
+    notifications,
+  }, {
+    status: ok ? 200 : 503,
+  });
+}
diff --git a/components/dashboard/SystemStatus.tsx b/components/dashboard/SystemStatus.tsx
index fd18a15..38f19bf 100644
--- a/components/dashboard/SystemStatus.tsx
+++ b/components/dashboard/SystemStatus.tsx
@@ -1,214 +1,176 @@
 'use client';
 import React, { useState, useEffect } from 'react';
 
-interface SystemStatus {
+interface HealthStatus {
+  ok: boolean;
+  timestamp: string;
   database: {
-    status: 'active' | 'inactive' | 'error';
+    enabled: boolean;
+    ok: boolean;
+    latencyMs: number | null;
     message: string;
-    responseTime?: number;
   };
-  authentication: {
-    status: 'ready' | 'not-ready' | 'error';
-    message: string;
+  cache: {
+    enabled: boolean;
+    connected: boolean;
+    memoryEntries: number;
   };
-  ssl: {
-    status: 'active' | 'inactive' | 'error';
-    message: string;
+  taskQueue: {
+    enabled: boolean;
+    connected: boolean;
+    queues: string[];
   };
-  api: {
-    status: 'ready' | 'not-ready' | 'error';
-    message: string;
-    responseTime?: number;
+  notifications: {
+    enabled: boolean;
   };
 }
 
-export function SystemStatus() {
-  const [status, setStatus] = useState<SystemStatus>({
-    database: { status: 'inactive', message: 'Checking...' },
-    authentication: { status: 'not-ready', message: 'Checking...' },
-    ssl: { status: 'inactive', message: 'Checking...' },
-    api: { status: 'not-ready', message: 'Checking...' },
-  });
-
-  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());
+interface StatusProps {
+  status: 'ready' | 'warning' | 'error';
+  label: string;
+  message: string;
+  meta?: string;
+}
 
-  useEffect(() => {
-    const checkSystemStatus = async () => {
-      const startTime = Date.now();
-      
-      try {
-        // Check API health (includes database check)
-        const healthResponse = await fetch('/api/health');
-        const healthData = await healthResponse.json();
-        const apiResponseTime = Date.now() - startTime;
-
-        // Check if we can reach the domain via HTTPS
-        let sslStatus: SystemStatus['ssl'] = {
-          status: 'active',
-          message: 'Certificates Active'
-        };
-
-        try {
-          const domainCheck = await fetch('https://psra.sevensa.nl/api/health', {
-            mode: 'no-cors'
-          });
-          // If we get here without error, SSL is working
-        } catch (sslError) {
-          sslStatus = {
-            status: 'error',
-            message: 'SSL/Domain issue detected'
-          };
-        }
-
-        setStatus({
-          database: {
-            status: healthData.ok ? 'active' : 'error',
-            message: healthData.ok ? 'PostgreSQL Active' : 'Database connection failed',
-            responseTime: healthData.db_time ? 5 : undefined, // Simulated DB response time
-          },
-          authentication: {
-            status: 'ready',
-            message: 'Keycloak Ready'
-          },
-          ssl: sslStatus,
-          api: {
-            status: healthResponse.ok ? 'ready' : 'error',
-            message: healthResponse.ok ? 'Enterprise Ready' : 'API Error',
-            responseTime: apiResponseTime,
-          },
-        });
-
-        setLastUpdate(new Date());
-      } catch (error) {
-        console.error('System status check failed:', error);
-        setStatus({
-          database: { status: 'error', message: 'Connection failed' },
-          authentication: { status: 'error', message: 'Auth service error' },
-          ssl: { status: 'error', message: 'SSL check failed' },
-          api: { status: 'error', message: 'API unreachable' },
-        });
-        setLastUpdate(new Date());
-      }
-    };
-
-    // Initial check
-    checkSystemStatus();
-
-    // Check every 30 seconds
-    const interval = setInterval(checkSystemStatus, 30000);
-    return () => clearInterval(interval);
-  }, []);
+const StatusIndicator = ({ status, label, message, meta }: StatusProps) => {
+  const getStyle = () => {
+    switch (status) {
+      case 'ready':
+        return 'text-green-600 bg-green-100';
+      case 'warning':
+        return 'text-yellow-600 bg-yellow-100';
+      case 'error':
+        return 'text-red-600 bg-red-100';
+      default:
+        return 'text-gray-600 bg-gray-100';
+    }
+  };
 
-  const StatusIndicator = ({ 
-    status, 
-    label, 
-    message, 
-    responseTime 
-  }: { 
-    status: 'active' | 'ready' | 'inactive' | 'not-ready' | 'error';
-    label: string;
-    message: string;
-    responseTime?: number;
-  }) => {
-    const getStatusColor = () => {
-      switch (status) {
-        case 'active':
-        case 'ready':
-          return 'text-green-600 bg-green-100';
-        case 'inactive':
-        case 'not-ready':
-          return 'text-yellow-600 bg-yellow-100';
-        case 'error':
-          return 'text-red-600 bg-red-100';
-        default:
-          return 'text-gray-600 bg-gray-100';
-      }
-    };
-
-    const getStatusIcon = () => {
-      switch (status) {
-        case 'active':
-        case 'ready':
-          return '‚úÖ';
-        case 'inactive':
-        case 'not-ready':
-          return '‚ö†Ô∏è';
-        case 'error':
-          return '‚ùå';
-        default:
-          return '‚ö™';
-      }
-    };
-
-    return (
-      <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
-        <div className="flex items-center space-x-3">
-          <div className={`w-8 h-8 rounded-full flex items-center justify-center ${getStatusColor()}`}>
-            <span className="text-sm">{getStatusIcon()}</span>
-          </div>
-          <div>
-            <div className="font-medium text-gray-900">{label}</div>
-            <div className="text-sm text-gray-600">{message}</div>
-          </div>
-        </div>
-        {responseTime && (
-          <div className="text-right">
-            <div className="text-sm font-medium text-gray-900">{responseTime}ms</div>
-            <div className="text-xs text-gray-500">response</div>
-          </div>
-        )}
-      </div>
-    );
+  const getIcon = () => {
+    switch (status) {
+      case 'ready':
+        return '‚úÖ';
+      case 'warning':
+        return '‚ö†Ô∏è';
+      case 'error':
+        return '‚ùå';
+      default:
+        return '‚ÑπÔ∏è';
+    }
   };
 
   return (
-    <div className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
-      <div className="flex items-center justify-between mb-4">
-        <div className="flex items-center space-x-2">
-          <span className="text-2xl">‚úÖ</span>
-          <h3 className="text-lg font-semibold text-gray-900">System Status</h3>
+    <div className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
+      <div className="flex items-center space-x-3">
+        <div className={`w-8 h-8 rounded-full flex items-center justify-center ${getStyle()}`}>
+          <span className="text-sm">{getIcon()}</span>
         </div>
-        <div className="text-sm text-gray-500">
-          Last updated: {lastUpdate.toLocaleTimeString()}
+        <div>
+          <div className="font-medium text-gray-900">{label}</div>
+          <div className="text-sm text-gray-600">{message}</div>
+          {meta && <div className="text-xs text-gray-500 mt-1">{meta}</div>}
         </div>
       </div>
+    </div>
+  );
+};
+
+export function SystemStatus() {
+  const [health, setHealth] = useState<HealthStatus | null>(null);
+  const [error, setError] = useState<string | null>(null);
+  const [lastChecked, setLastChecked] = useState<Date | null>(null);
+
+  const loadStatus = async () => {
+    try {
+      const response = await fetch('/api/health', { cache: 'no-store' });
+      const data = await response.json();
+      setHealth(data);
+      setError(null);
+      setLastChecked(new Date());
+    } catch (err) {
+      setError((err as Error).message);
+      setHealth(null);
+      setLastChecked(new Date());
+    }
+  };
+
+  useEffect(() => {
+    loadStatus();
+    const interval = setInterval(loadStatus, 30000);
+    return () => clearInterval(interval);
+  }, []);
+
+  const computeStatus = () => {
+    if (!health) {
+      return [];
+    }
+
+    const statuses: StatusProps[] = [];
+
+    statuses.push({
+      label: 'Database',
+      status: !health.database.enabled ? 'warning' : health.database.ok ? 'ready' : 'error',
+      message: !health.database.enabled
+        ? 'Database disabled'
+        : health.database.ok
+        ? 'PostgreSQL reachable'
+        : 'Connection failed',
+      meta: health.database.latencyMs ? `${health.database.latencyMs} ms` : undefined,
+    });
+
+    statuses.push({
+      label: 'Cache / Redis',
+      status: !health.cache.enabled ? 'warning' : health.cache.connected ? 'ready' : 'error',
+      message: !health.cache.enabled
+        ? 'Redis disabled'
+        : health.cache.connected
+        ? 'Redis online'
+        : 'Redis unavailable',
+      meta: `Memory entries: ${health.cache.memoryEntries}`,
+    });
+
+    statuses.push({
+      label: 'Task Queue',
+      status: !health.taskQueue.enabled ? 'warning' : health.taskQueue.connected ? 'ready' : 'error',
+      message: !health.taskQueue.enabled
+        ? 'Background workers disabled'
+        : health.taskQueue.connected
+        ? `Queues: ${health.taskQueue.queues.join(', ') || 'none'}`
+        : 'Queue connection failed',
+    });
+
+    statuses.push({
+      label: 'Notifications',
+      status: health.notifications.enabled ? 'ready' : 'warning',
+      message: health.notifications.enabled ? 'SMTP configured' : 'Notifications disabled',
+    });
+
+    return statuses;
+  };
+
+  const statuses = computeStatus();
 
-      <div className="space-y-3">
-        <StatusIndicator
-          status={status.database.status}
-          label="Database"
-          message={status.database.message}
-          responseTime={status.database.responseTime}
-        />
-        
-        <StatusIndicator
-          status={status.authentication.status}
-          label="Authentication"
-          message={status.authentication.message}
-        />
-        
-        <StatusIndicator
-          status={status.ssl.status}
-          label="SSL/HTTPS"
-          message={status.ssl.message}
-        />
-        
-        <StatusIndicator
-          status={status.api.status}
-          label="API"
-          message={status.api.message}
-          responseTime={status.api.responseTime}
-        />
+  return (
+    <div className="space-y-4">
+      <div>
+        <h2 className="text-lg font-semibold text-gray-900">Platform Health</h2>
+        <p className="text-sm text-gray-600">
+          Real-time snapshot of core dependencies (database, cache, background workers, notifications).
+        </p>
       </div>
 
-      <div className="mt-4 p-3 bg-blue-50 rounded-lg">
-        <div className="flex items-center space-x-2">
-          <span className="text-blue-600">‚ÑπÔ∏è</span>
-          <div className="text-sm text-blue-800">
-            <strong>Production Status:</strong> All systems operational. 
-            Domain accessible at <a href="https://psra.sevensa.nl" target="_blank" rel="noopener noreferrer" className="underline">psra.sevensa.nl</a>
-          </div>
+      {error && (
+        <div className="p-3 bg-red-50 border border-red-200 text-red-700 rounded">
+          Unable to load system status: {error}
         </div>
+      )}
+
+      {statuses.map((status) => (
+        <StatusIndicator key={status.label} {...status} />
+      ))}
+
+      <div className="text-xs text-gray-500">
+        Last checked: {lastChecked ? lastChecked.toLocaleTimeString() : '‚Äî'}
       </div>
     </div>
   );
diff --git a/lib/audit-service.ts b/lib/audit-service.ts
index 791d88b..ec7bfdb 100644
--- a/lib/audit-service.ts
+++ b/lib/audit-service.ts
@@ -1,5 +1,11 @@
-import { Pool } from 'pg';
+import { Pool, QueryResult } from 'pg';
 import { cacheService } from './cache-service';
+import {
+  config,
+  isAuditLogEnabled,
+  isNotificationEnabled,
+} from './config';
+import { notificationService } from './notification-service';
 
 export interface AuditLogEntry {
   id?: string;
@@ -24,6 +30,7 @@ export interface SecurityEvent {
   userId?: string;
   ipAddress?: string;
   details: any;
+  timestamp?: Date;
 }
 
 export interface PerformanceMetric {
@@ -35,163 +42,210 @@ export interface PerformanceMetric {
   timestamp?: Date;
 }
 
+interface MemoryStore {
+  logs: AuditLogEntry[];
+  security: SecurityEvent[];
+  performance: PerformanceMetric[];
+}
+
+const MEMORY_LIMIT = 500;
+
 export class AuditService {
-  private pool: Pool;
+  private pool: Pool | null = null;
+  private readonly enabled = isAuditLogEnabled && Boolean(config.databaseUrl);
+  private ready: Promise<void> | null = null;
+  private memory: MemoryStore = {
+    logs: [],
+    security: [],
+    performance: [],
+  };
 
   constructor() {
-    this.pool = new Pool({
-      connectionString: process.env.DATABASE_URL,
-      max: 10,
-    });
-    
-    this.initializeAuditTables();
+    if (this.enabled && config.databaseUrl) {
+      this.pool = new Pool({
+        connectionString: config.databaseUrl,
+        ssl: config.pgSsl ? { rejectUnauthorized: false } : undefined,
+        max: 10,
+      });
+
+      this.pool.on('error', (error) => {
+        console.error('Audit service database error:', error);
+      });
+
+      this.ready = this.initializeAuditTables();
+    }
+  }
+
+  private async ensureReady(): Promise<boolean> {
+    if (!this.pool || !this.ready) {
+      return false;
+    }
+
+    try {
+      await this.ready;
+      return true;
+    } catch (error) {
+      console.error('Audit table initialisation failed:', error);
+      this.pool = null;
+      return false;
+    }
   }
 
   private async initializeAuditTables(): Promise<void> {
+    if (!this.pool) {
+      return;
+    }
+
+    await this.pool.query(`
+      CREATE TABLE IF NOT EXISTS audit_logs (
+        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
+        user_id VARCHAR(255),
+        user_email VARCHAR(255),
+        action VARCHAR(255) NOT NULL,
+        resource VARCHAR(255) NOT NULL,
+        resource_id VARCHAR(255),
+        details JSONB,
+        ip_address INET,
+        user_agent TEXT,
+        session_id VARCHAR(255),
+        timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
+        success BOOLEAN NOT NULL,
+        error_message TEXT,
+        performance_ms INTEGER
+      );
+    `);
+
+    await this.pool.query(`
+      CREATE TABLE IF NOT EXISTS security_events (
+        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
+        event_type VARCHAR(100) NOT NULL,
+        severity VARCHAR(20) NOT NULL,
+        user_id VARCHAR(255),
+        ip_address INET,
+        details JSONB NOT NULL,
+        timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW()
+      );
+    `);
+
+    await this.pool.query(`
+      CREATE TABLE IF NOT EXISTS performance_metrics (
+        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
+        endpoint VARCHAR(255) NOT NULL,
+        method VARCHAR(10) NOT NULL,
+        response_time INTEGER NOT NULL,
+        status_code INTEGER NOT NULL,
+        user_id VARCHAR(255),
+        timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW()
+      );
+    `);
+
+    await this.pool.query(`
+      CREATE INDEX IF NOT EXISTS idx_audit_logs_timestamp ON audit_logs(timestamp);
+      CREATE INDEX IF NOT EXISTS idx_security_events_timestamp ON security_events(timestamp);
+      CREATE INDEX IF NOT EXISTS idx_performance_metrics_timestamp ON performance_metrics(timestamp);
+    `);
+  }
+
+  private pushToMemory<T extends keyof MemoryStore>(key: T, value: MemoryStore[T][number]): void {
+    const store = this.memory[key];
+    store.push({ ...value, timestamp: value.timestamp ?? new Date() } as any);
+    if (store.length > MEMORY_LIMIT) {
+      store.splice(0, store.length - MEMORY_LIMIT);
+    }
+  }
+
+  private async runQuery(sql: string, params: any[] = []): Promise<QueryResult | null> {
+    if (!(await this.ensureReady()) || !this.pool) {
+      return null;
+    }
+
     try {
-      await this.pool.query(`
-        CREATE TABLE IF NOT EXISTS audit_logs (
-          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
-          user_id VARCHAR(255),
-          user_email VARCHAR(255),
-          action VARCHAR(255) NOT NULL,
-          resource VARCHAR(255) NOT NULL,
-          resource_id VARCHAR(255),
-          details JSONB,
-          ip_address INET,
-          user_agent TEXT,
-          session_id VARCHAR(255),
-          timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
-          success BOOLEAN NOT NULL,
-          error_message TEXT,
-          performance_ms INTEGER
-        );
-      `);
-
-      await this.pool.query(`
-        CREATE TABLE IF NOT EXISTS security_events (
-          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
-          event_type VARCHAR(100) NOT NULL,
-          severity VARCHAR(20) NOT NULL,
-          user_id VARCHAR(255),
-          ip_address INET,
-          details JSONB NOT NULL,
-          timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW()
-        );
-      `);
-
-      await this.pool.query(`
-        CREATE TABLE IF NOT EXISTS performance_metrics (
-          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
-          endpoint VARCHAR(255) NOT NULL,
-          method VARCHAR(10) NOT NULL,
-          response_time INTEGER NOT NULL,
-          status_code INTEGER NOT NULL,
-          user_id VARCHAR(255),
-          timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW()
-        );
-      `);
-
-      // Create indexes for better performance
-      await this.pool.query(`
-        CREATE INDEX IF NOT EXISTS idx_audit_logs_timestamp ON audit_logs(timestamp);
-        CREATE INDEX IF NOT EXISTS idx_audit_logs_user_id ON audit_logs(user_id);
-        CREATE INDEX IF NOT EXISTS idx_audit_logs_action ON audit_logs(action);
-        CREATE INDEX IF NOT EXISTS idx_security_events_timestamp ON security_events(timestamp);
-        CREATE INDEX IF NOT EXISTS idx_security_events_severity ON security_events(severity);
-        CREATE INDEX IF NOT EXISTS idx_performance_metrics_timestamp ON performance_metrics(timestamp);
-        CREATE INDEX IF NOT EXISTS idx_performance_metrics_endpoint ON performance_metrics(endpoint);
-      `);
-
-      console.log('Audit tables initialized successfully');
+      return await this.pool.query(sql, params);
     } catch (error) {
-      console.error('Error initializing audit tables:', error);
+      console.error('Audit query error, falling back to memory store:', error);
+      this.pool = null;
+      return null;
     }
   }
 
   async logAction(entry: AuditLogEntry): Promise<void> {
-    try {
-      await this.pool.query(`
-        INSERT INTO audit_logs (
-          user_id, user_email, action, resource, resource_id, details,
-          ip_address, user_agent, session_id, success, error_message, performance_ms
-        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
-      `, [
-        entry.userId,
-        entry.userEmail,
-        entry.action,
-        entry.resource,
-        entry.resourceId,
-        entry.details ? JSON.stringify(entry.details) : null,
-        entry.ipAddress,
-        entry.userAgent,
-        entry.sessionId,
-        entry.success,
-        entry.errorMessage,
-        entry.performanceMs
-      ]);
-
-      // Cache recent audit logs for dashboard
+    const payload = {
+      ...entry,
+      timestamp: entry.timestamp ?? new Date(),
+    };
+
+    const result = await this.runQuery(
+      `INSERT INTO audit_logs (
+        user_id, user_email, action, resource, resource_id, details,
+        ip_address, user_agent, session_id, success, error_message, performance_ms
+      ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)`
+    , [
+      payload.userId,
+      payload.userEmail,
+      payload.action,
+      payload.resource,
+      payload.resourceId,
+      payload.details ? JSON.stringify(payload.details) : null,
+      payload.ipAddress,
+      payload.userAgent,
+      payload.sessionId,
+      payload.success,
+      payload.errorMessage,
+      payload.performanceMs,
+    ]);
+
+    if (!result) {
+      this.pushToMemory('logs', payload);
+    } else {
       await this.cacheRecentAuditLogs();
-    } catch (error) {
-      console.error('Error logging audit entry:', error);
     }
   }
 
   async logSecurityEvent(event: SecurityEvent): Promise<void> {
-    try {
-      await this.pool.query(`
-        INSERT INTO security_events (event_type, severity, user_id, ip_address, details)
-        VALUES ($1, $2, $3, $4, $5)
-      `, [
-        event.type,
-        event.severity,
-        event.userId,
-        event.ipAddress,
-        JSON.stringify(event.details)
-      ]);
-
-      // Alert on high/critical security events
-      if (event.severity === 'high' || event.severity === 'critical') {
-        await this.sendSecurityAlert(event);
-      }
-    } catch (error) {
-      console.error('Error logging security event:', error);
+    const payload = {
+      ...event,
+      timestamp: event.timestamp ?? new Date(),
+    };
+
+    const result = await this.runQuery(
+      `INSERT INTO security_events (event_type, severity, user_id, ip_address, details)
+       VALUES ($1,$2,$3,$4,$5)`,
+      [payload.type, payload.severity, payload.userId, payload.ipAddress, JSON.stringify(payload.details)]
+    );
+
+    if (!result) {
+      this.pushToMemory('security', payload);
+    } else if (payload.severity === 'high' || payload.severity === 'critical') {
+      await this.sendSecurityAlert(payload);
     }
   }
 
   async logPerformanceMetric(metric: PerformanceMetric): Promise<void> {
-    try {
-      await this.pool.query(`
-        INSERT INTO performance_metrics (endpoint, method, response_time, status_code, user_id)
-        VALUES ($1, $2, $3, $4, $5)
-      `, [
-        metric.endpoint,
-        metric.method,
-        metric.responseTime,
-        metric.statusCode,
-        metric.userId
-      ]);
-
-      // Alert on slow responses (>5 seconds)
-      if (metric.responseTime > 5000) {
-        await this.logSecurityEvent({
-          type: 'suspicious_activity',
-          severity: 'medium',
-          userId: metric.userId,
-          details: {
-            type: 'slow_response',
-            endpoint: metric.endpoint,
-            responseTime: metric.responseTime
-          }
-        });
-      }
-    } catch (error) {
-      console.error('Error logging performance metric:', error);
+    const payload = {
+      ...metric,
+      timestamp: metric.timestamp ?? new Date(),
+    };
+
+    const result = await this.runQuery(
+      `INSERT INTO performance_metrics (endpoint, method, response_time, status_code, user_id)
+       VALUES ($1,$2,$3,$4,$5)`,
+      [payload.endpoint, payload.method, payload.responseTime, payload.statusCode, payload.userId]
+    );
+
+    if (!result) {
+      this.pushToMemory('performance', payload);
+    }
+
+    if (payload.responseTime > 5000) {
+      await this.logSecurityEvent({
+        type: 'suspicious_activity',
+        severity: 'medium',
+        userId: payload.userId,
+        details: { type: 'slow_response', endpoint: payload.endpoint, responseTime: payload.responseTime },
+      });
     }
   }
 
-  // Specialized logging methods for PSRA operations
   async logOriginCalculation(
     userId: string | undefined,
     request: any,
@@ -210,11 +264,11 @@ export class AuditService {
         tradeAgreement: request.tradeAgreement,
         productSku: request.productSku,
         isConform: result?.result?.isConform,
-        confidence: result?.result?.confidence
+        confidence: result?.result?.confidence,
       },
       ipAddress,
       success,
-      performanceMs
+      performanceMs,
     });
   }
 
@@ -231,7 +285,7 @@ export class AuditService {
       resource: 'certificate',
       resourceId: certificateId,
       ipAddress,
-      success
+      success,
     });
   }
 
@@ -247,13 +301,10 @@ export class AuditService {
       userId,
       action: 'data_access',
       resource: dataType,
-      details: {
-        query,
-        resultCount
-      },
+      details: { query, resultCount },
       ipAddress,
       success: true,
-      performanceMs
+      performanceMs,
     });
   }
 
@@ -274,184 +325,250 @@ export class AuditService {
         fileName,
         recordsProcessed,
         recordsSuccessful,
-        recordsFailed
+        recordsFailed,
       },
       success: recordsFailed === 0,
-      performanceMs
+      performanceMs,
     });
   }
 
-  // Analytics and reporting methods
-  async getAuditSummary(days: number = 7): Promise<any> {
-    const cacheKey = `audit-summary:${days}`;
-    
-    return await cacheService.getOrSet(cacheKey, async () => {
-      const result = await this.pool.query(`
-        SELECT 
-          action,
-          COUNT(*) as total_count,
-          COUNT(*) FILTER (WHERE success = true) as success_count,
-          COUNT(*) FILTER (WHERE success = false) as failure_count,
-          AVG(performance_ms) as avg_performance_ms
-        FROM audit_logs 
-        WHERE timestamp >= NOW() - INTERVAL '${days} days'
-        GROUP BY action
-        ORDER BY total_count DESC
-      `);
-      
+  async getAuditSummary(days: number = 7): Promise<any[]> {
+    const since = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
+
+    const result = await this.runQuery(
+      `SELECT action, COUNT(*) as total_count,
+              COUNT(*) FILTER (WHERE success = true) as success_count,
+              COUNT(*) FILTER (WHERE success = false) as failure_count,
+              AVG(performance_ms) as avg_performance_ms
+       FROM audit_logs
+       WHERE timestamp >= NOW() - INTERVAL '${days} days'
+       GROUP BY action
+       ORDER BY total_count DESC`
+    );
+
+    if (result) {
       return result.rows;
-    }, 300); // Cache for 5 minutes
+    }
+
+    const grouped = new Map<string, { total: number; success: number; failure: number; performance: number; count: number }>();
+    for (const log of this.memory.logs) {
+      if ((log.timestamp ?? new Date()) < since) continue;
+      const bucket = grouped.get(log.action) ?? { total: 0, success: 0, failure: 0, performance: 0, count: 0 };
+      bucket.total += 1;
+      bucket.success += log.success ? 1 : 0;
+      bucket.failure += log.success ? 0 : 1;
+      if (log.performanceMs) {
+        bucket.performance += log.performanceMs;
+        bucket.count += 1;
+      }
+      grouped.set(log.action, bucket);
+    }
+
+    return Array.from(grouped.entries()).map(([action, value]) => ({
+      action,
+      total_count: value.total,
+      success_count: value.success,
+      failure_count: value.failure,
+      avg_performance_ms: value.count ? value.performance / value.count : null,
+    }));
   }
 
-  async getSecurityEventsSummary(days: number = 7): Promise<any> {
-    const cacheKey = `security-events:${days}`;
-    
-    return await cacheService.getOrSet(cacheKey, async () => {
-      const result = await this.pool.query(`
-        SELECT 
-          event_type,
-          severity,
-          COUNT(*) as count,
-          MAX(timestamp) as last_occurrence
-        FROM security_events 
-        WHERE timestamp >= NOW() - INTERVAL '${days} days'
-        GROUP BY event_type, severity
-        ORDER BY count DESC
-      `);
-      
+  async getSecurityEventsSummary(days: number = 7): Promise<any[]> {
+    const result = await this.runQuery(
+      `SELECT event_type, severity, COUNT(*) as count, MAX(timestamp) as last_occurrence
+       FROM security_events
+       WHERE timestamp >= NOW() - INTERVAL '${days} days'
+       GROUP BY event_type, severity
+       ORDER BY count DESC`
+    );
+
+    if (result) {
       return result.rows;
-    }, 300);
+    }
+
+    const since = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
+    const grouped = new Map<string, { count: number; last: Date | null }>();
+    for (const event of this.memory.security) {
+      const ts = event.timestamp ?? new Date();
+      if (ts < since) continue;
+      const key = `${event.type}:${event.severity}`;
+      const bucket = grouped.get(key) ?? { count: 0, last: null };
+      bucket.count += 1;
+      bucket.last = !bucket.last || bucket.last < ts ? ts : bucket.last;
+      grouped.set(key, bucket);
+    }
+
+    return Array.from(grouped.entries()).map(([key, value]) => {
+      const [event_type, severity] = key.split(':');
+      return {
+        event_type,
+        severity,
+        count: value.count,
+        last_occurrence: value.last?.toISOString() ?? null,
+      };
+    });
   }
 
-  async getPerformanceMetrics(days: number = 7): Promise<any> {
-    const cacheKey = `performance-metrics:${days}`;
-    
-    return await cacheService.getOrSet(cacheKey, async () => {
-      const result = await this.pool.query(`
-        SELECT 
-          endpoint,
-          method,
-          COUNT(*) as request_count,
-          AVG(response_time) as avg_response_time,
-          MIN(response_time) as min_response_time,
-          MAX(response_time) as max_response_time,
-          PERCENTILE_CONT(0.95) WITHIN GROUP (ORDER BY response_time) as p95_response_time
-        FROM performance_metrics 
-        WHERE timestamp >= NOW() - INTERVAL '${days} days'
-        GROUP BY endpoint, method
-        ORDER BY request_count DESC
-      `);
-      
+  async getPerformanceMetrics(days: number = 7): Promise<any[]> {
+    const result = await this.runQuery(
+      `SELECT endpoint, method, COUNT(*) as request_count,
+              AVG(response_time) as avg_response_time,
+              MIN(response_time) as min_response_time,
+              MAX(response_time) as max_response_time
+       FROM performance_metrics
+       WHERE timestamp >= NOW() - INTERVAL '${days} days'
+       GROUP BY endpoint, method
+       ORDER BY request_count DESC`
+    );
+
+    if (result) {
       return result.rows;
-    }, 300);
+    }
+
+    const since = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
+    const grouped = new Map<string, { count: number; total: number; min: number; max: number }>();
+
+    for (const metric of this.memory.performance) {
+      if ((metric.timestamp ?? new Date()) < since) continue;
+      const key = `${metric.endpoint}:${metric.method}`;
+      const bucket = grouped.get(key) ?? { count: 0, total: 0, min: Infinity, max: 0 };
+      bucket.count += 1;
+      bucket.total += metric.responseTime;
+      bucket.min = Math.min(bucket.min, metric.responseTime);
+      bucket.max = Math.max(bucket.max, metric.responseTime);
+      grouped.set(key, bucket);
+    }
+
+    return Array.from(grouped.entries()).map(([key, value]) => {
+      const [endpoint, method] = key.split(':');
+      return {
+        endpoint,
+        method,
+        request_count: value.count,
+        avg_response_time: value.count ? value.total / value.count : null,
+        min_response_time: value.min === Infinity ? null : value.min,
+        max_response_time: value.max || null,
+      };
+    });
   }
 
-  async getUserActivity(userId: string, days: number = 30): Promise<any> {
-    const result = await this.pool.query(`
-      SELECT 
-        action,
-        resource,
-        COUNT(*) as count,
-        MAX(timestamp) as last_activity,
-        COUNT(*) FILTER (WHERE success = false) as failures
-      FROM audit_logs 
-      WHERE user_id = $1 AND timestamp >= NOW() - INTERVAL '${days} days'
-      GROUP BY action, resource
-      ORDER BY count DESC
-    `, [userId]);
-    
-    return result.rows;
+  async getUserActivity(userId: string, days: number = 30): Promise<any[]> {
+    const result = await this.runQuery(
+      `SELECT action, resource, COUNT(*) as count, MAX(timestamp) as last_activity,
+              COUNT(*) FILTER (WHERE success = false) as failures
+       FROM audit_logs
+       WHERE user_id = $1 AND timestamp >= NOW() - INTERVAL '${days} days'
+       GROUP BY action, resource
+       ORDER BY count DESC`,
+      [userId]
+    );
+
+    if (result) {
+      return result.rows;
+    }
+
+    const since = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
+    const grouped = new Map<string, { resource: string; count: number; failures: number; last: Date | null }>();
+
+    for (const log of this.memory.logs) {
+      if ((log.timestamp ?? new Date()) < since || log.userId !== userId) continue;
+      const key = `${log.action}:${log.resource}`;
+      const bucket = grouped.get(key) ?? { resource: log.resource, count: 0, failures: 0, last: null };
+      bucket.count += 1;
+      bucket.failures += log.success ? 0 : 1;
+      const ts = log.timestamp ?? new Date();
+      bucket.last = !bucket.last || bucket.last < ts ? ts : bucket.last;
+      grouped.set(key, bucket);
+    }
+
+    return Array.from(grouped.entries()).map(([key, value]) => ({
+      action: key.split(':')[0],
+      resource: value.resource,
+      count: value.count,
+      last_activity: value.last?.toISOString() ?? null,
+      failures: value.failures,
+    }));
   }
 
-  async getRecentFailures(limit: number = 50): Promise<any> {
-    const result = await this.pool.query(`
-      SELECT 
-        user_id,
-        user_email,
-        action,
-        resource,
-        resource_id,
-        error_message,
-        timestamp,
-        ip_address
-      FROM audit_logs 
-      WHERE success = false
-      ORDER BY timestamp DESC
-      LIMIT $1
-    `, [limit]);
-    
-    return result.rows;
+  async getRecentFailures(limit: number = 50): Promise<any[]> {
+    const result = await this.runQuery(
+      `SELECT user_id, user_email, action, resource, resource_id, error_message, timestamp, ip_address
+       FROM audit_logs
+       WHERE success = false
+       ORDER BY timestamp DESC
+       LIMIT $1`,
+      [limit]
+    );
+
+    if (result) {
+      return result.rows;
+    }
+
+    return this.memory.logs
+      .filter((log) => !log.success)
+      .slice(-limit)
+      .reverse()
+      .map((log) => ({
+        user_id: log.userId,
+        user_email: log.userEmail,
+        action: log.action,
+        resource: log.resource,
+        resource_id: log.resourceId,
+        error_message: log.errorMessage,
+        timestamp: (log.timestamp ?? new Date()).toISOString(),
+        ip_address: log.ipAddress,
+      }));
   }
 
   private async cacheRecentAuditLogs(): Promise<void> {
-    try {
-      const result = await this.pool.query(`
-        SELECT * FROM audit_logs 
-        ORDER BY timestamp DESC 
-        LIMIT 100
-      `);
-      
-      await cacheService.set('recent-audit-logs', result.rows, 60); // Cache for 1 minute
-    } catch (error) {
-      console.error('Error caching recent audit logs:', error);
+    if (!(await this.ensureReady()) || !this.pool) {
+      await cacheService.set('recent-audit-logs', this.memory.logs.slice(-100), 60);
+      return;
     }
+
+    const result = await this.pool.query(`
+      SELECT * FROM audit_logs
+      ORDER BY timestamp DESC
+      LIMIT 100
+    `);
+
+    await cacheService.set('recent-audit-logs', result.rows, 60);
   }
 
   private async sendSecurityAlert(event: SecurityEvent): Promise<void> {
-    try {
-      // Import notification service dynamically to avoid circular dependencies
-      const { taskQueue } = await import('./task-queue');
-      
-      await taskQueue.queueEmailNotification({
-        to: 'admin@sevensa.nl',
-        subject: `Security Alert: ${event.type} (${event.severity})`,
-        body: `
-          Security Event Detected:
-          
-          Type: ${event.type}
-          Severity: ${event.severity}
-          User ID: ${event.userId || 'Unknown'}
-          IP Address: ${event.ipAddress || 'Unknown'}
-          
-          Details:
-          ${JSON.stringify(event.details, null, 2)}
-          
-          Please investigate immediately.
-        `
-      });
-    } catch (error) {
-      console.error('Error sending security alert:', error);
+    if (!isNotificationEnabled) {
+      return;
     }
+
+    await notificationService.sendNotification({
+      type: 'system_alert',
+      title: `Security Alert: ${event.type}`,
+      message: `Security event detected with severity ${event.severity}.`,
+      data: event,
+      priority: event.severity === 'critical' ? 'critical' : 'high',
+    });
   }
 
-  // Middleware for Express/Next.js
   createAuditMiddleware() {
     return (req: any, res: any, next: any) => {
       const startTime = Date.now();
-      
-      // Capture original end method
       const originalEnd = res.end;
-      
+
       res.end = (...args: any[]) => {
         const performanceMs = Date.now() - startTime;
-        
-        // Log the request
         this.logPerformanceMetric({
           endpoint: req.path || req.url,
           method: req.method,
           responseTime: performanceMs,
           statusCode: res.statusCode,
           userId: req.user?.id,
-        });
-        
-        // Call original end method
+        }).catch((error) => console.error('Audit middleware error:', error));
         originalEnd.apply(res, args);
       };
-      
+
       next();
     };
   }
 }
 
-// Singleton instance
 export const auditService = new AuditService();
diff --git a/lib/cache-service.ts b/lib/cache-service.ts
index cf072b6..345f908 100644
--- a/lib/cache-service.ts
+++ b/lib/cache-service.ts
@@ -1,78 +1,111 @@
 import Redis from 'ioredis';
+import { config, isRedisEnabled } from './config';
+
+type MemoryEntry = {
+  data: any;
+  expiry: number;
+};
 
 export class CacheService {
-  private redis: Redis;
-  private memoryCache: Map<string, { data: any; expiry: number }>;
+  private redis: Redis | null = null;
+  private memoryCache: Map<string, MemoryEntry> = new Map();
+  private redisReady = false;
+  private readonly enabled = isRedisEnabled;
 
   constructor() {
-    this.redis = new Redis({
-      host: 'localhost',
-      port: 6379,
-      maxRetriesPerRequest: 3,
-    });
-    
-    this.memoryCache = new Map();
-    
-    // Clean up expired memory cache entries every 5 minutes
-    setInterval(() => this.cleanupMemoryCache(), 5 * 60 * 1000);
+    if (this.enabled && config.redisUrl) {
+      this.redis = new Redis(config.redisUrl, {
+        lazyConnect: true,
+        maxRetriesPerRequest: 3,
+      });
+
+      this.redis.on('error', (error) => {
+        console.warn('Redis cache error:', error.message);
+        this.redisReady = false;
+      });
+    }
+
+    const timer = setInterval(() => this.cleanupMemoryCache(), 5 * 60 * 1000);
+    timer.unref?.();
   }
 
-  async get<T>(key: string): Promise<T | null> {
-    try {
-      // Level 1: Memory cache (fastest)
-      const memoryEntry = this.memoryCache.get(key);
-      if (memoryEntry && memoryEntry.expiry > Date.now()) {
-        return memoryEntry.data;
-      }
+  private async getRedis(): Promise<Redis | null> {
+    if (!this.redis) {
+      return null;
+    }
 
-      // Level 2: Redis cache
-      const redisValue = await this.redis.get(key);
-      if (redisValue) {
-        const parsed = JSON.parse(redisValue);
-        // Store in memory cache for 5 minutes
-        this.memoryCache.set(key, {
-          data: parsed,
-          expiry: Date.now() + 5 * 60 * 1000
-        });
-        return parsed;
+    if (!this.redisReady) {
+      try {
+        if (this.redis.status === 'wait') {
+          await this.redis.connect();
+        }
+        this.redisReady = true;
+      } catch (error) {
+        console.warn('Unable to connect to Redis:', (error as Error).message);
+        this.redis = null;
+        return null;
       }
+    }
 
-      return null;
-    } catch (error) {
-      console.error('Cache get error:', error);
-      return null;
+    return this.redis;
+  }
+
+  async get<T>(key: string): Promise<T | null> {
+    const memoryEntry = this.memoryCache.get(key);
+    if (memoryEntry && memoryEntry.expiry > Date.now()) {
+      return memoryEntry.data as T;
     }
+
+    const redis = await this.getRedis();
+    if (redis) {
+      try {
+        const redisValue = await redis.get(key);
+        if (redisValue) {
+          const parsed = JSON.parse(redisValue) as T;
+          this.memoryCache.set(key, {
+            data: parsed,
+            expiry: Date.now() + 5 * 60 * 1000,
+          });
+          return parsed;
+        }
+      } catch (error) {
+        console.warn('Cache get error:', (error as Error).message);
+      }
+    }
+
+    return null;
   }
 
-  async set(key: string, value: any, ttlSeconds: number = 3600): Promise<void> {
-    try {
-      // Store in Redis
-      await this.redis.setex(key, ttlSeconds, JSON.stringify(value));
-      
-      // Store in memory cache for faster access
-      this.memoryCache.set(key, {
-        data: value,
-        expiry: Date.now() + Math.min(ttlSeconds * 1000, 5 * 60 * 1000)
-      });
-    } catch (error) {
-      console.error('Cache set error:', error);
+  async set(key: string, value: any, ttlSeconds = 3600): Promise<void> {
+    this.memoryCache.set(key, {
+      data: value,
+      expiry: Date.now() + Math.min(ttlSeconds * 1000, 5 * 60 * 1000),
+    });
+
+    const redis = await this.getRedis();
+    if (redis) {
+      try {
+        await redis.setex(key, ttlSeconds, JSON.stringify(value));
+      } catch (error) {
+        console.warn('Cache set error:', (error as Error).message);
+      }
     }
   }
 
   async del(key: string): Promise<void> {
-    try {
-      await this.redis.del(key);
-      this.memoryCache.delete(key);
-    } catch (error) {
-      console.error('Cache delete error:', error);
+    this.memoryCache.delete(key);
+
+    const redis = await this.getRedis();
+    if (redis) {
+      try {
+        await redis.del(key);
+      } catch (error) {
+        console.warn('Cache delete error:', (error as Error).message);
+      }
     }
   }
 
-  async getOrSet<T>(
-    key: string, 
-    fetcher: () => Promise<T>, 
-    ttlSeconds: number = 3600
-  ): Promise<T> {
+  async getOrSet<T>(key: string, fetcher: () => Promise<T>, ttlSeconds = 3600): Promise<T> {
     const cached = await this.get<T>(key);
     if (cached !== null) {
       return cached;
@@ -83,33 +116,28 @@ export class CacheService {
     return value;
   }
 
-  // Specialized caching methods for PSRA data
   async cacheHsCodes(search: string, results: any[]): Promise<void> {
-    const key = `hs-codes:${search.toLowerCase()}`;
-    await this.set(key, results, 3600); // Cache for 1 hour
+    await this.set(`hs-codes:${search.toLowerCase()}`, results, 3600);
   }
 
   async getCachedHsCodes(search: string): Promise<any[] | null> {
-    const key = `hs-codes:${search.toLowerCase()}`;
-    return await this.get<any[]>(key);
+    return this.get<any[]>(`hs-codes:${search.toLowerCase()}`);
   }
 
   async cacheOriginCalculation(request: any, result: any): Promise<void> {
-    const key = `origin:${JSON.stringify(request)}`;
-    await this.set(key, result, 1800); // Cache for 30 minutes
+    await this.set(`origin:${JSON.stringify(request)}`, result, 1800);
   }
 
   async getCachedOriginCalculation(request: any): Promise<any | null> {
-    const key = `origin:${JSON.stringify(request)}`;
-    return await this.get<any>(key);
+    return this.get<any>(`origin:${JSON.stringify(request)}`);
   }
 
   async cacheTradeAgreements(agreements: any[]): Promise<void> {
-    await this.set('trade-agreements:all', agreements, 7200); // Cache for 2 hours
+    await this.set('trade-agreements:all', agreements, 7200);
   }
 
   async getCachedTradeAgreements(): Promise<any[] | null> {
-    return await this.get<any[]>('trade-agreements:all');
+    return this.get<any[]>('trade-agreements:all');
   }
 
   private cleanupMemoryCache(): void {
@@ -122,27 +150,17 @@ export class CacheService {
   }
 
   async getStats(): Promise<{
+    redisEnabled: boolean;
     redisConnected: boolean;
     memoryCacheSize: number;
-    redisMemoryUsage?: string;
   }> {
-    try {
-      const redisInfo = await this.redis.info('memory');
-      const memoryUsage = redisInfo.match(/used_memory_human:(.+)/)?.[1]?.trim();
-      
-      return {
-        redisConnected: true,
-        memoryCacheSize: this.memoryCache.size,
-        redisMemoryUsage: memoryUsage
-      };
-    } catch (error) {
-      return {
-        redisConnected: false,
-        memoryCacheSize: this.memoryCache.size
-      };
-    }
+    const redis = await this.getRedis();
+    return {
+      redisEnabled: this.enabled,
+      redisConnected: Boolean(redis && this.redisReady),
+      memoryCacheSize: this.memoryCache.size,
+    };
   }
 }
 
-// Singleton instance
 export const cacheService = new CacheService();
diff --git a/lib/db.ts b/lib/db.ts
index f28000d..54e66f6 100644
--- a/lib/db.ts
+++ b/lib/db.ts
@@ -1,15 +1,41 @@
 import { Pool } from 'pg';
+import { config, isDatabaseEnabled } from './config';
 
-const pool = new Pool({
-  connectionString: process.env.DATABASE_URL,
-  ssl: process.env.PGSSL === 'true'
-    ? { rejectUnauthorized: false }
-    : undefined,
-});
+let pool: Pool | null = null;
+let poolPromise: Promise<Pool> | null = null;
+
+const createPool = async () => {
+  if (!isDatabaseEnabled || !config.databaseUrl) {
+    throw new Error('DATABASE_URL is not configured.');
+  }
+
+  if (!pool) {
+    pool = new Pool({
+      connectionString: config.databaseUrl,
+      ssl: config.pgSsl
+        ? { rejectUnauthorized: false }
+        : undefined,
+      max: 10,
+    });
+
+    pool.on('error', (error) => {
+      console.error('PostgreSQL connection error:', error);
+    });
+  }
+
+  return pool;
+};
+
+const getPool = async () => {
+  if (!poolPromise) {
+    poolPromise = createPool();
+  }
+  return poolPromise;
+};
 
 export async function query(text: string, params: any[] = []) {
-  const res = await pool.query(text, params);
-  return res;
+  const client = await getPool();
+  return client.query(text, params);
 }
 
 export { pool };
diff --git a/lib/notification-service.ts b/lib/notification-service.ts
index d7a722c..a280f94 100644
--- a/lib/notification-service.ts
+++ b/lib/notification-service.ts
@@ -1,4 +1,5 @@
 import nodemailer from 'nodemailer';
+import { config, isNotificationEnabled } from './config';
 
 export interface NotificationData {
   type: 'certificate_created' | 'certificate_failed' | 'system_alert' | 'bulk_import_complete';
@@ -9,106 +10,107 @@ export interface NotificationData {
 }
 
 export class NotificationService {
-  private transporter: nodemailer.Transporter;
-  
+  private transporter: nodemailer.Transporter | null = null;
+  private readonly enabled = isNotificationEnabled;
+
   constructor() {
-    // Configure email transporter
-    this.transporter = nodemailer.createTransport({
-      host: 'smtp.gmail.com',
-      port: 587,
-      secure: false,
-      auth: {
-        user: process.env.SMTP_USER || 'noreply@sevensa.nl',
-        pass: process.env.SMTP_PASS || 'your-app-password'
-      }
-    });
+    if (this.enabled) {
+      const secure = config.smtp.port === 465;
+      this.transporter = nodemailer.createTransport({
+        host: config.smtp.host,
+        port: config.smtp.port ?? 587,
+        secure,
+        auth: {
+          user: config.smtp.user!,
+          pass: config.smtp.pass!,
+        },
+      });
+    }
   }
-  
+
   async sendNotification(notification: NotificationData): Promise<boolean> {
+    if (!this.enabled || !this.transporter) {
+      console.info('[notification]', notification.type, notification.title, notification.message);
+      return true;
+    }
+
     try {
       const emailContent = this.generateEmailContent(notification);
-      
+
       const mailOptions = {
-        from: '"PSRA Origin Checker" <noreply@sevensa.nl>',
-        to: 'admin@sevensa.nl',
+        from: `"PSRA Origin Checker" <${config.smtp.from}>`,
+        to: config.smtp.user,
         subject: `[PSRA] ${notification.title}`,
         html: emailContent,
-        priority: this.mapPriority(notification.priority)
-      };
-      
+        priority: this.mapPriority(notification.priority),
+      } satisfies nodemailer.SendMailOptions;
+
       await this.transporter.sendMail(mailOptions);
-      
-      // Log notification
-      console.log(`Notification sent: ${notification.type} - ${notification.title}`);
-      
       return true;
     } catch (error) {
       console.error('Failed to send notification:', error);
       return false;
     }
   }
-  
+
   private generateEmailContent(notification: NotificationData): string {
     const priorityColor = this.getPriorityColor(notification.priority);
     const timestamp = new Date().toLocaleString();
-    
+
     return `
       <!DOCTYPE html>
       <html>
-      <head>
-        <style>
-          body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
-          .container { max-width: 600px; margin: 0 auto; background-color: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
-          .header { background-color: ${priorityColor}; color: white; padding: 20px; text-align: center; }
-          .content { padding: 30px; }
-          .priority-badge { display: inline-block; padding: 4px 12px; border-radius: 20px; font-size: 12px; font-weight: bold; text-transform: uppercase; background-color: ${priorityColor}; color: white; margin-bottom: 15px; }
-          .data-section { background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-top: 20px; }
-          .footer { background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666; }
-          .timestamp { color: #888; font-size: 14px; }
-        </style>
-      </head>
-      <body>
-        <div class="container">
-          <div class="header">
-            <h1>PSRA Origin Checker</h1>
-            <h2>${notification.title}</h2>
-          </div>
-          <div class="content">
-            <div class="priority-badge">${notification.priority} priority</div>
-            <div class="timestamp">Timestamp: ${timestamp}</div>
-            
-            <h3>Notification Details</h3>
-            <p><strong>Type:</strong> ${notification.type.replace('_', ' ').toUpperCase()}</p>
-            <p><strong>Message:</strong></p>
-            <p>${notification.message}</p>
-            
-            ${notification.data ? `
-              <div class="data-section">
-                <h4>Additional Data</h4>
-                <pre>${JSON.stringify(notification.data, null, 2)}</pre>
-              </div>
-            ` : ''}
-          </div>
-          <div class="footer">
-            <p>This is an automated notification from the PSRA Origin Checker system.</p>
-            <p>Access the system at: <a href="https://psra.sevensa.nl">https://psra.sevensa.nl</a></p>
+        <head>
+          <style>
+            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5; }
+            .container { max-width: 600px; margin: 0 auto; background-color: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
+            .header { background-color: ${priorityColor}; color: white; padding: 20px; text-align: center; }
+            .content { padding: 30px; }
+            .priority-badge { display: inline-block; padding: 4px 12px; border-radius: 20px; font-size: 12px; font-weight: bold; text-transform: uppercase; background-color: ${priorityColor}; color: white; margin-bottom: 15px; }
+            .data-section { background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-top: 20px; }
+            .footer { background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666; }
+            .timestamp { color: #888; font-size: 14px; }
+          </style>
+        </head>
+        <body>
+          <div class="container">
+            <div class="header">
+              <h1>PSRA Origin Checker</h1>
+              <h2>${notification.title}</h2>
+            </div>
+            <div class="content">
+              <div class="priority-badge">${notification.priority} priority</div>
+              <div class="timestamp">Timestamp: ${timestamp}</div>
+              <h3>Notification Details</h3>
+              <p><strong>Type:</strong> ${notification.type.replace('_', ' ').toUpperCase()}</p>
+              <p><strong>Message:</strong></p>
+              <p>${notification.message}</p>
+              ${notification.data ? `
+                <div class="data-section">
+                  <h4>Additional Data</h4>
+                  <pre>${JSON.stringify(notification.data, null, 2)}</pre>
+                </div>
+              ` : ''}
+            </div>
+            <div class="footer">
+              <p>This is an automated notification from the PSRA Origin Checker system.</p>
+            </div>
           </div>
-        </div>
-      </body>
+        </body>
       </html>
     `;
   }
-  
+
   private getPriorityColor(priority: string): string {
     switch (priority) {
       case 'critical': return '#dc3545';
       case 'high': return '#fd7e14';
       case 'medium': return '#ffc107';
-      case 'low': return '#28a745';
-      default: return '#6c757d';
+      case 'low':
+      default: return '#28a745';
     }
   }
-  
+
   private mapPriority(priority: string): 'high' | 'normal' | 'low' {
     switch (priority) {
       case 'critical':
@@ -121,45 +123,44 @@ export class NotificationService {
         return 'low';
     }
   }
-  
-  // Predefined notification templates
+
   async notifyCertificateCreated(certificateId: string, productSku: string, isConform: boolean) {
     await this.sendNotification({
       type: 'certificate_created',
       title: 'New Certificate Generated',
       message: `A new origin certificate has been generated for product ${productSku}. Result: ${isConform ? 'CONFORMING' : 'NON-CONFORMING'}`,
       data: { certificateId, productSku, isConform },
-      priority: isConform ? 'low' : 'medium'
+      priority: isConform ? 'low' : 'medium',
     });
   }
-  
+
   async notifyCertificateFailed(productSku: string, error: string) {
     await this.sendNotification({
       type: 'certificate_failed',
       title: 'Certificate Generation Failed',
       message: `Failed to generate certificate for product ${productSku}. Error: ${error}`,
       data: { productSku, error },
-      priority: 'high'
+      priority: 'high',
     });
   }
-  
+
   async notifySystemAlert(message: string, data?: any) {
     await this.sendNotification({
       type: 'system_alert',
       title: 'System Alert',
       message,
       data,
-      priority: 'high'
+      priority: 'high',
     });
   }
-  
+
   async notifyBulkImportComplete(importType: string, imported: number, total: number, errors: string[]) {
     await this.sendNotification({
       type: 'bulk_import_complete',
       title: 'Bulk Import Completed',
       message: `Bulk import of ${importType} completed. Imported: ${imported}/${total} records.`,
-      data: { importType, imported, total, errors: errors.slice(0, 5) },
-      priority: errors.length > 0 ? 'medium' : 'low'
+      data: { importType, imported, total, errors },
+      priority: errors.length ? 'medium' : 'low',
     });
   }
 }
diff --git a/lib/rate-limiter.ts b/lib/rate-limiter.ts
index 9ce8a6a..8294c9b 100644
--- a/lib/rate-limiter.ts
+++ b/lib/rate-limiter.ts
@@ -1,13 +1,25 @@
 import { NextRequest, NextResponse } from 'next/server';
 import Redis from 'ioredis';
+import { config, isRedisEnabled } from './config';
 
-// Redis client for rate limiting
-const redis = new Redis({
-  host: 'localhost',
-  port: 6379,
-  maxRetriesPerRequest: 3,
-  lazyConnect: true,
-});
+type MemoryStore = Map<string, number[]>;
+
+const createRedis = () => {
+  if (!isRedisEnabled || !config.redisUrl) {
+    return null;
+  }
+
+  const client = new Redis(config.redisUrl, {
+    lazyConnect: true,
+    maxRetriesPerRequest: 3,
+  });
+
+  client.on('error', (error) => {
+    console.warn('Rate limiter redis error:', error.message);
+  });
+
+  return client;
+};
 
 interface RateLimitConfig {
   windowMs: number;
@@ -27,32 +39,39 @@ interface RateLimitResult {
 
 export class RateLimiter {
   private config: RateLimitConfig;
+  private redis: Redis | null;
+  private memoryStore: MemoryStore = new Map();
 
   constructor(config: RateLimitConfig) {
+    const defaults = {
+      windowMs: 60_000,
+      maxRequests: 100,
+      keyGenerator: (req: NextRequest) => this.getClientIdentifier(req),
+      skipSuccessfulRequests: false,
+      skipFailedRequests: false,
+    } as const;
+
     this.config = {
-      ...{
-        windowMs: 60000, // 1 minute default
-        maxRequests: 100, // 100 requests per minute default
-        keyGenerator: (req) => this.getClientIdentifier(req),
-        skipSuccessfulRequests: false,
-        skipFailedRequests: false,
-      },
-      ...config,
+      windowMs: config.windowMs ?? defaults.windowMs,
+      maxRequests: config.maxRequests ?? defaults.maxRequests,
+      keyGenerator: config.keyGenerator ?? defaults.keyGenerator,
+      skipSuccessfulRequests: config.skipSuccessfulRequests ?? defaults.skipSuccessfulRequests,
+      skipFailedRequests: config.skipFailedRequests ?? defaults.skipFailedRequests,
     };
+
+    this.redis = createRedis();
   }
 
   private getClientIdentifier(req: NextRequest): string {
-    // Try to get IP from various headers
     const forwarded = req.headers.get('x-forwarded-for');
     const realIp = req.headers.get('x-real-ip');
     const remoteAddr = req.headers.get('remote-addr');
-    
+
     let ip = forwarded?.split(',')[0] || realIp || remoteAddr || 'unknown';
-    
-    // Add user agent for additional uniqueness
+
     const userAgent = req.headers.get('user-agent') || 'unknown';
     const userAgentHash = this.simpleHash(userAgent);
-    
+
     return `rate_limit:${ip}:${userAgentHash}`;
   }
 
@@ -61,68 +80,103 @@ export class RateLimiter {
     for (let i = 0; i < str.length; i++) {
       const char = str.charCodeAt(i);
       hash = ((hash << 5) - hash) + char;
-      hash = hash & hash; // Convert to 32-bit integer
+      hash = hash & hash;
     }
     return Math.abs(hash).toString(16);
   }
 
-  async checkRateLimit(req: NextRequest): Promise<RateLimitResult> {
-    try {
-      const key = this.config.keyGenerator!(req);
-      const now = Date.now();
-      const windowStart = now - this.config.windowMs;
-
-      // Use Redis pipeline for atomic operations
-      const pipeline = redis.pipeline();
-      
-      // Remove expired entries
-      pipeline.zremrangebyscore(key, 0, windowStart);
-      
-      // Count current requests in window
-      pipeline.zcard(key);
-      
-      // Add current request
-      pipeline.zadd(key, now, `${now}-${Math.random()}`);
-      
-      // Set expiration
-      pipeline.expire(key, Math.ceil(this.config.windowMs / 1000));
-
-      const results = await pipeline.exec();
-      
-      if (!results) {
-        throw new Error('Redis pipeline failed');
-      }
+  private async ensureRedis(): Promise<Redis | null> {
+    if (!this.redis) {
+      return null;
+    }
 
-      const currentCount = (results[1][1] as number) || 0;
-      const resetTime = now + this.config.windowMs;
-      const remaining = Math.max(0, this.config.maxRequests - currentCount - 1);
-
-      if (currentCount >= this.config.maxRequests) {
-        return {
-          success: false,
-          limit: this.config.maxRequests,
-          remaining: 0,
-          resetTime,
-          retryAfter: Math.ceil(this.config.windowMs / 1000),
-        };
+    if (this.redis.status === 'wait') {
+      try {
+        await this.redis.connect();
+      } catch (error) {
+        console.warn('Unable to connect to Redis for rate limiting:', (error as Error).message);
+        this.redis = null;
+        return null;
       }
+    }
+
+    return this.redis;
+  }
+
+  async checkRateLimit(req: NextRequest): Promise<RateLimitResult> {
+    const key = this.config.keyGenerator!(req);
+    const now = Date.now();
+    const windowStart = now - this.config.windowMs;
+
+    const redis = await this.ensureRedis();
+    if (redis) {
+      return this.checkRedis(redis, key, now, windowStart);
+    }
+
+    return this.checkMemory(key, now, windowStart);
+  }
+
+  private async checkRedis(redis: Redis, key: string, now: number, windowStart: number): Promise<RateLimitResult> {
+    const pipeline = redis.pipeline();
+
+    pipeline.zremrangebyscore(key, 0, windowStart);
+    pipeline.zcard(key);
+    pipeline.zadd(key, now, `${now}-${Math.random()}`);
+    pipeline.expire(key, Math.ceil(this.config.windowMs / 1000));
+
+    const results = await pipeline.exec();
 
+    if (!results) {
+      return this.checkMemory(key, now, windowStart);
+    }
+
+    const currentCount = (results[1][1] as number) || 0;
+    const resetTime = now + this.config.windowMs;
+    const remaining = Math.max(0, this.config.maxRequests - currentCount - 1);
+
+    if (currentCount >= this.config.maxRequests) {
       return {
-        success: true,
+        success: false,
         limit: this.config.maxRequests,
-        remaining,
+        remaining: 0,
         resetTime,
+        retryAfter: Math.ceil(this.config.windowMs / 1000),
       };
-    } catch (error) {
-      console.error('Rate limiter error:', error);
-      // Fail open - allow request if rate limiter fails
+    }
+
+    return {
+      success: true,
+      limit: this.config.maxRequests,
+      remaining,
+      resetTime,
+    };
+  }
+
+  private checkMemory(key: string, now: number, windowStart: number): RateLimitResult {
+    const entries = this.memoryStore.get(key) || [];
+    const filtered = entries.filter((timestamp) => timestamp > windowStart);
+    filtered.push(now);
+    this.memoryStore.set(key, filtered);
+
+    const resetTime = now + this.config.windowMs;
+    const remaining = Math.max(0, this.config.maxRequests - filtered.length);
+
+    if (filtered.length > this.config.maxRequests) {
       return {
-        success: true,
+        success: false,
         limit: this.config.maxRequests,
-        remaining: this.config.maxRequests - 1,
-        resetTime: Date.now() + this.config.windowMs,
+        remaining: 0,
+        resetTime,
+        retryAfter: Math.ceil(this.config.windowMs / 1000),
       };
     }
+
+    return {
+      success: true,
+      limit: this.config.maxRequests,
+      remaining,
+      resetTime,
+    };
   }
 
   createMiddleware() {
@@ -139,7 +193,6 @@ export class RateLimiter {
           { status: 429 }
         );
 
-        // Add rate limit headers
         response.headers.set('X-RateLimit-Limit', result.limit.toString());
         response.headers.set('X-RateLimit-Remaining', result.remaining.toString());
         response.headers.set('X-RateLimit-Reset', result.resetTime.toString());
@@ -148,34 +201,31 @@ export class RateLimiter {
         return response;
       }
 
-      // Add rate limit headers to successful requests
       const response = NextResponse.next();
       response.headers.set('X-RateLimit-Limit', result.limit.toString());
       response.headers.set('X-RateLimit-Remaining', result.remaining.toString());
       response.headers.set('X-RateLimit-Reset', result.resetTime.toString());
 
-      return null; // Continue to next middleware/handler
+      return null;
     };
   }
 }
 
-// Pre-configured rate limiters for different endpoint types
 export const generalRateLimiter = new RateLimiter({
-  windowMs: 60000, // 1 minute
-  maxRequests: 100, // 100 requests per minute
+  windowMs: 60000,
+  maxRequests: 100,
 });
 
 export const heavyOperationRateLimiter = new RateLimiter({
-  windowMs: 60000, // 1 minute
-  maxRequests: 10, // 10 requests per minute for heavy operations
+  windowMs: 60000,
+  maxRequests: 10,
 });
 
 export const authRateLimiter = new RateLimiter({
-  windowMs: 900000, // 15 minutes
-  maxRequests: 5, // 5 login attempts per 15 minutes
+  windowMs: 900000,
+  maxRequests: 5,
 });
 
-// Utility function to apply rate limiting to API routes
 export async function withRateLimit(
   req: NextRequest,
   rateLimiter: RateLimiter,
@@ -193,7 +243,6 @@ export async function withRateLimit(
       { status: 429 }
     );
 
-    // Add rate limit headers
     response.headers.set('X-RateLimit-Limit', rateLimitResult.limit.toString());
     response.headers.set('X-RateLimit-Remaining', rateLimitResult.remaining.toString());
     response.headers.set('X-RateLimit-Reset', rateLimitResult.resetTime.toString());
@@ -202,58 +251,10 @@ export async function withRateLimit(
     return response;
   }
 
-  // Execute the handler
   const response = await handler();
-
-  // Add rate limit headers to successful responses
   response.headers.set('X-RateLimit-Limit', rateLimitResult.limit.toString());
   response.headers.set('X-RateLimit-Remaining', rateLimitResult.remaining.toString());
   response.headers.set('X-RateLimit-Reset', rateLimitResult.resetTime.toString());
 
   return response;
 }
-
-// Rate limit monitoring
-export async function getRateLimitStats(): Promise<{
-  totalRequests: number;
-  blockedRequests: number;
-  topClients: Array<{ client: string; requests: number }>;
-}> {
-  try {
-    const keys = await redis.keys('rate_limit:*');
-    let totalRequests = 0;
-    let blockedRequests = 0;
-    const clientStats: Record<string, number> = {};
-
-    for (const key of keys) {
-      const count = await redis.zcard(key);
-      totalRequests += count;
-      
-      const client = key.split(':')[1] || 'unknown';
-      clientStats[client] = (clientStats[client] || 0) + count;
-      
-      // Check if this client was blocked (simplified check)
-      if (count > 100) {
-        blockedRequests += count - 100;
-      }
-    }
-
-    const topClients = Object.entries(clientStats)
-      .sort(([, a], [, b]) => b - a)
-      .slice(0, 10)
-      .map(([client, requests]) => ({ client, requests }));
-
-    return {
-      totalRequests,
-      blockedRequests,
-      topClients,
-    };
-  } catch (error) {
-    console.error('Error getting rate limit stats:', error);
-    return {
-      totalRequests: 0,
-      blockedRequests: 0,
-      topClients: [],
-    };
-  }
-}
diff --git a/lib/task-queue.ts b/lib/task-queue.ts
index f2b6976..4fdb473 100644
--- a/lib/task-queue.ts
+++ b/lib/task-queue.ts
@@ -1,15 +1,15 @@
-import { Queue, Worker, Job } from 'bullmq';
 import Redis from 'ioredis';
-import type { CertificateData } from './pdf-generator';
+import type { Queue, Worker, Job } from 'bullmq';
+import { config, isNotificationEnabled, isTaskQueueEnabled } from './config';
+import { notificationService } from './notification-service';
 
-// Redis connection for BullMQ
-const connection = new Redis({
-  host: 'localhost',
-  port: 6379,
-  maxRetriesPerRequest: null,
-});
+type QueueMap = {
+  origin?: Queue;
+  pdf?: Queue;
+  bulk?: Queue;
+  email?: Queue;
+};
 
-// Job types
 export interface OriginCalculationJob {
   type: 'origin-calculation';
   data: {
@@ -53,73 +53,91 @@ export interface EmailNotificationJob {
 export type JobData = OriginCalculationJob | PDFGenerationJob | BulkImportJob | EmailNotificationJob;
 
 export class TaskQueueService {
-  private originQueue: Queue;
-  private pdfQueue: Queue;
-  private bulkImportQueue: Queue;
-  private emailQueue: Queue;
+  private connection: Redis | null = null;
+  private queues: QueueMap = {};
   private workers: Worker[] = [];
+  private enabled = isTaskQueueEnabled && Boolean(config.redisUrl);
+  private ready: Promise<void>;
 
   constructor() {
-    // Initialize queues
-    this.originQueue = new Queue('origin-calculations', { connection });
-    this.pdfQueue = new Queue('pdf-generation', { connection });
-    this.bulkImportQueue = new Queue('bulk-import', { connection });
-    this.emailQueue = new Queue('email-notifications', { connection });
-
-    // Start workers
-    this.startWorkers();
+    this.ready = this.enabled ? this.initialize() : Promise.resolve();
   }
 
-  private startWorkers(): void {
-    // Origin calculation worker
-    const originWorker = new Worker('origin-calculations', async (job: Job) => {
-      return await this.processOriginCalculation(job.data);
-    }, { 
-      connection,
-      concurrency: 5
-    });
-
-    // PDF generation worker
-    const pdfWorker = new Worker('pdf-generation', async (job: Job) => {
-      return await this.processPDFGeneration(job.data);
-    }, { 
-      connection,
-      concurrency: 3
-    });
-
-    // Bulk import worker
-    const bulkImportWorker = new Worker('bulk-import', async (job: Job) => {
-      return await this.processBulkImport(job.data);
-    }, { 
-      connection,
-      concurrency: 1 // Single concurrency for data integrity
-    });
-
-    // Email notification worker
-    const emailWorker = new Worker('email-notifications', async (job: Job) => {
-      return await this.processEmailNotification(job.data);
-    }, { 
-      connection,
-      concurrency: 10
-    });
+  private async initialize(): Promise<void> {
+    try {
+      if (!config.redisUrl) {
+        this.enabled = false;
+        return;
+      }
 
-    this.workers = [originWorker, pdfWorker, bulkImportWorker, emailWorker];
+      const { Queue, Worker } = await import('bullmq');
+      this.connection = new Redis(config.redisUrl, {
+        lazyConnect: true,
+        maxRetriesPerRequest: null,
+      });
 
-    // Add error handling
-    this.workers.forEach(worker => {
-      worker.on('error', (error) => {
-        console.error(`Worker error in ${worker.name}:`, error);
+      this.connection.on('error', (error) => {
+        console.warn('Task queue Redis error:', error.message);
       });
 
-      worker.on('failed', (job, error) => {
-        console.error(`Job ${job?.id} failed in ${worker.name}:`, error);
+      await this.connection.connect();
+
+      this.queues.origin = new Queue('origin-calculations', { connection: this.connection });
+      this.queues.pdf = new Queue('pdf-generation', { connection: this.connection });
+      this.queues.bulk = new Queue('bulk-import', { connection: this.connection });
+      this.queues.email = new Queue('email-notifications', { connection: this.connection });
+
+      this.workers = [
+        new Worker('origin-calculations', async (job: Job) => this.processOriginCalculation(job.data), {
+          connection: this.connection,
+          concurrency: 5,
+        }),
+        new Worker('pdf-generation', async (job: Job) => this.processPDFGeneration(job.data), {
+          connection: this.connection,
+          concurrency: 3,
+        }),
+        new Worker('bulk-import', async (job: Job) => this.processBulkImport(job.data), {
+          connection: this.connection,
+          concurrency: 1,
+        }),
+        new Worker('email-notifications', async (job: Job) => this.processEmailNotification(job.data), {
+          connection: this.connection,
+          concurrency: 10,
+        }),
+      ];
+
+      this.workers.forEach((worker) => {
+        worker.on('error', (error) => console.error(`Worker error (${worker.name}):`, error));
+        worker.on('failed', (job, error) => console.error(`Job ${job?.id} failed (${worker.name}):`, error));
       });
-    });
+    } catch (error) {
+      console.warn('Task queue initialisation failed, falling back to inline processing:', error);
+      this.enabled = false;
+      this.connection = null;
+      this.queues = {};
+      await this.close();
+    }
+  }
+
+  private async ensureReady(): Promise<boolean> {
+    await this.ready;
+    return this.enabled && Boolean(this.connection);
   }
 
-  // Queue job methods
   async queueOriginCalculation(data: OriginCalculationJob['data']): Promise<string> {
-    const job = await this.originQueue.add('calculate', data, {
+    if (!(await this.ensureReady()) || !this.queues.origin) {
+      const { originEngine } = await import('./advanced-origin-engine');
+      await originEngine.calculateOrigin({
+        productSku: data.productSku,
+        hsCode: data.hsCode,
+        tradeAgreement: data.tradeAgreement,
+        materials: data.materials,
+        productValue: data.productValue,
+      });
+      return `inline-${Date.now()}`;
+    }
+
+    const job = await this.queues.origin.add('calculate', data, {
       attempts: 3,
       backoff: {
         type: 'exponential',
@@ -130,7 +148,12 @@ export class TaskQueueService {
   }
 
   async queuePDFGeneration(data: PDFGenerationJob['data']): Promise<string> {
-    const job = await this.pdfQueue.add('generate', data, {
+    if (!(await this.ensureReady()) || !this.queues.pdf) {
+      await this.processPDFGeneration(data);
+      return `inline-${Date.now()}`;
+    }
+
+    const job = await this.queues.pdf.add('generate', data, {
       attempts: 2,
       backoff: {
         type: 'fixed',
@@ -141,15 +164,34 @@ export class TaskQueueService {
   }
 
   async queueBulkImport(data: BulkImportJob['data']): Promise<string> {
-    const job = await this.bulkImportQueue.add('import', data, {
-      attempts: 1, // No retries for bulk imports
-      delay: 0,
+    if (!(await this.ensureReady()) || !this.queues.bulk) {
+      await this.processBulkImport(data);
+      return `inline-${Date.now()}`;
+    }
+
+    const job = await this.queues.bulk.add('import', data, {
+      attempts: 1,
     });
     return job.id!;
   }
 
   async queueEmailNotification(data: EmailNotificationJob['data']): Promise<string> {
-    const job = await this.emailQueue.add('send', data, {
+    if (!(await this.ensureReady()) || !this.queues.email) {
+      if (isNotificationEnabled) {
+        await notificationService.sendNotification({
+          type: 'system_alert',
+          title: data.subject,
+          message: data.body,
+          priority: 'medium',
+          data,
+        });
+      } else {
+        console.info('[email-notification]', data.subject, data.body);
+      }
+      return `inline-${Date.now()}`;
+    }
+
+    const job = await this.queues.email.add('send', data, {
       attempts: 5,
       backoff: {
         type: 'exponential',
@@ -159,230 +201,136 @@ export class TaskQueueService {
     return job.id!;
   }
 
-  // Job processors
   private async processOriginCalculation(data: OriginCalculationJob['data']): Promise<any> {
-    try {
-      // Import origin engine dynamically to avoid circular dependencies
-      const { originEngine } = await import('./advanced-origin-engine');
-      
-      const result = await originEngine.calculateOrigin({
-        productSku: data.productSku,
-        hsCode: data.hsCode,
-        tradeAgreement: data.tradeAgreement,
-        materials: data.materials,
-        productValue: data.productValue,
-      });
+    const { originEngine } = await import('./advanced-origin-engine');
+    const result = await originEngine.calculateOrigin({
+      productSku: data.productSku,
+      hsCode: data.hsCode,
+      tradeAgreement: data.tradeAgreement,
+      materials: data.materials,
+      productValue: data.productValue,
+    });
 
-      // Store result in database
-      const repository = await import('./repository');
-      // Note: Using mock certificate creation for now
-      console.log('Certificate result stored:', {
-        id: data.requestId,
-        productSku: data.productSku,
-        hsCode: data.hsCode,
-        tradeAgreement: data.tradeAgreement,
-        result: result,
-        createdAt: new Date().toISOString(),
+    if (data.userId && isNotificationEnabled) {
+      await notificationService.sendNotification({
+        type: 'system_alert',
+        title: 'Origin calculation completed',
+        message: `Origin calculation for ${data.productSku} completed (${result.isConform ? 'conforming' : 'non-conforming'}).`,
+        priority: result.isConform ? 'low' : 'high',
+        data: { requestId: data.requestId, result },
       });
-
-      // Send notification if user provided
-      if (data.userId) {
-        await this.queueEmailNotification({
-          to: 'admin@sevensa.nl',
-          subject: 'Origin Calculation Completed',
-          body: `Origin calculation for ${data.productSku} has been completed. Result: ${result.isConform ? 'Conforming' : 'Non-conforming'}`,
-        });
-      }
-
-      return result;
-    } catch (error) {
-      console.error('Origin calculation processing error:', error);
-      throw error;
     }
+
+    return result;
   }
 
   private async processPDFGeneration(data: PDFGenerationJob['data']): Promise<Buffer> {
-    try {
-      const { pdfGenerator } = await import('./pdf-generator');
-      const { getCertificateById } = await import('./repository');
-
-      const certificate = await getCertificateById(data.certificateId);
-      if (!certificate) {
-        throw new Error(`Certificate ${data.certificateId} not found`);
-      }
-
-      const payload: CertificateData = {
-        ...certificate,
-        result: certificate.result as CertificateData['result'],
-      };
+    const { pdfGenerator } = await import('./pdf-generator');
+    const { getCertificateById } = await import('./repository');
 
-      const pdfBuffer = pdfGenerator.generateCertificate(payload);
+    const certificate = await getCertificateById(data.certificateId);
+    if (!certificate) {
+      throw new Error(`Certificate ${data.certificateId} not found`);
+    }
 
-      // Optionally store PDF or send notification
-      if (data.userId) {
-        await this.queueEmailNotification({
-          to: 'admin@sevensa.nl',
-          subject: 'PDF Certificate Generated',
-          body: `PDF certificate for ${certificate.productSku} has been generated.`,
-        });
-      }
+    const pdf = pdfGenerator.generateCertificate({
+      ...certificate,
+      result: certificate.result as any,
+    });
 
-      return pdfBuffer;
-    } catch (error) {
-      console.error('PDF generation processing error:', error);
-      throw error;
+    if (data.userId && isNotificationEnabled) {
+      await notificationService.sendNotification({
+        type: 'system_alert',
+        title: 'Certificate PDF generated',
+        message: `PDF certificate for ${certificate.productSku} is ready.`,
+        priority: 'medium',
+        data: { certificateId: certificate.id },
+      });
     }
+
+    return pdf;
   }
 
   private async processBulkImport(data: BulkImportJob['data']): Promise<{ imported: number; errors: number }> {
-    try {
-      // Import CSV parser
-      const fs = await import('fs');
-      const csv = require('csv-parser');
-      
-      let imported = 0;
-      let errors = 0;
-
-      return new Promise((resolve, reject) => {
-        const results: any[] = [];
-        
-        fs.createReadStream(data.filePath)
-          .pipe(csv())
-          .on('data', (row: any) => results.push(row))
-          .on('end', async () => {
-            try {
-              const repository = await import('./repository');
-              
-              for (const row of results) {
-                try {
-                  switch (data.importType) {
-                    case 'hs-codes':
-                      console.log('Importing HS code:', {
-                        code: row.code,
-                        description: row.description,
-                        chapter: row.chapter,
-                        section: row.section,
-                      });
-                      break;
-                    case 'origin-rules':
-                      console.log('Importing origin rule:', {
-                        hsCode: row.hsCode,
-                        tradeAgreement: row.tradeAgreement,
-                        ruleText: row.ruleText,
-                      });
-                      break;
-                    case 'certificates':
-                      console.log('Importing certificate:', {
-                        id: row.id,
-                        productSku: row.productSku,
-                        hsCode: row.hsCode,
-                      });
-                      break;
-                  }
-                  imported++;
-                } catch (error) {
-                  console.error(`Error importing row:`, error);
-                  errors++;
-                }
-              }
-
-              // Send completion notification
-              await this.queueEmailNotification({
-                to: 'admin@sevensa.nl',
-                subject: 'Bulk Import Completed',
-                body: `Bulk import of ${data.importType} completed. Imported: ${imported}, Errors: ${errors}`,
-              });
-
-              resolve({ imported, errors });
-            } catch (error) {
-              reject(error);
-            }
-          })
-          .on('error', reject);
-      });
-    } catch (error) {
-      console.error('Bulk import processing error:', error);
-      throw error;
-    }
+    console.info('Bulk import request received (mock processing):', data.importType, data.filePath);
+    return { imported: 0, errors: 0 };
   }
 
   private async processEmailNotification(data: EmailNotificationJob['data']): Promise<void> {
-    try {
-      const { notificationService } = await import('./notification-service');
-      
+    if (isNotificationEnabled) {
       await notificationService.sendNotification({
         type: 'system_alert',
         title: data.subject,
         message: data.body,
-        priority: 'medium'
+        priority: 'medium',
+        data,
       });
-    } catch (error) {
-      console.error('Email notification processing error:', error);
-      throw error;
+    } else {
+      console.info('[queue-email]', data.subject, data.body);
     }
   }
 
-  // Job status methods
-  async getJobStatus(queueName: string, jobId: string): Promise<any> {
-    const queue = this.getQueueByName(queueName);
-    const job = await queue.getJob(jobId);
-    
-    if (!job) {
-      return { status: 'not_found' };
+  async getQueueStats(): Promise<Record<string, any>> {
+    if (!(await this.ensureReady()) || !this.queues.origin) {
+      return { enabled: false };
     }
 
-    return {
-      id: job.id,
-      status: await job.getState(),
-      progress: job.progress,
-      data: job.data,
-      returnvalue: job.returnvalue,
-      failedReason: job.failedReason,
-      processedOn: job.processedOn,
-      finishedOn: job.finishedOn,
-    };
-  }
-
-  async getQueueStats(): Promise<any> {
-    const stats: any = {};
-    
-    for (const queue of [this.originQueue, this.pdfQueue, this.bulkImportQueue, this.emailQueue]) {
-      const waiting = await queue.getWaiting();
-      const active = await queue.getActive();
-      const completed = await queue.getCompleted();
-      const failed = await queue.getFailed();
-      
-      stats[queue.name] = {
+    const stats: Record<string, any> = {};
+    const entries: Array<[string, Queue | undefined]> = [
+      ['origin', this.queues.origin],
+      ['pdf', this.queues.pdf],
+      ['bulk', this.queues.bulk],
+      ['email', this.queues.email],
+    ];
+
+    for (const [name, queue] of entries) {
+      if (!queue) continue;
+      const [waiting, active, completed, failed] = await Promise.all([
+        queue.getWaiting(),
+        queue.getActive(),
+        queue.getCompleted(),
+        queue.getFailed(),
+      ]);
+
+      stats[name] = {
         waiting: waiting.length,
         active: active.length,
         completed: completed.length,
         failed: failed.length,
       };
     }
-    
+
     return stats;
   }
 
-  private getQueueByName(name: string): Queue {
-    switch (name) {
-      case 'origin-calculations': return this.originQueue;
-      case 'pdf-generation': return this.pdfQueue;
-      case 'bulk-import': return this.bulkImportQueue;
-      case 'email-notifications': return this.emailQueue;
-      default: throw new Error(`Unknown queue: ${name}`);
+  async close(): Promise<void> {
+    await Promise.all(
+      this.workers.map(async (worker) => {
+        try {
+          await worker.close();
+        } catch (error) {
+          console.warn('Error closing worker:', error);
+        }
+      })
+    );
+
+    const queues = Object.values(this.queues).filter(Boolean) as Queue[];
+    await Promise.all(queues.map((queue) => queue.close().catch((error) => console.warn('Error closing queue:', error))));
+
+    if (this.connection) {
+      await this.connection.quit().catch((error) => console.warn('Error closing Redis connection:', error));
+      this.connection = null;
     }
   }
 
-  async close(): Promise<void> {
-    await Promise.all([
-      ...this.workers.map(worker => worker.close()),
-      this.originQueue.close(),
-      this.pdfQueue.close(),
-      this.bulkImportQueue.close(),
-      this.emailQueue.close(),
-    ]);
+  async getStatus() {
+    const ready = await this.ensureReady();
+    return {
+      enabled: this.enabled,
+      connected: ready,
+      queues: Object.keys(this.queues).filter((key) => Boolean(this.queues[key as keyof QueueMap])),
+    };
   }
 }
 
-// Singleton instance
 export const taskQueue = new TaskQueueService();
diff --git a/patch.diff b/patch.diff
index 0916379..6384210 100644
--- a/patch.diff
+++ b/patch.diff
@@ -1,3450 +0,0 @@
-diff --git a/ARCHITECTURE.md b/ARCHITECTURE.md
-index f2c65da..3963c38 100644
---- a/ARCHITECTURE.md
-+++ b/ARCHITECTURE.md
-@@ -15,6 +15,7 @@ ### APIs
- - Route handlers under `app/api/**` implement RESTful endpoints.
- - Zod validation ensures payload integrity (e.g. `/api/certificates`).
- - TARIC integration lives in `lib/taric-client.ts` with caching and graceful fallbacks.
-+- Certificate download endpoints (`/api/certificates/[id]` + `/api/certificates/[id]/pdf`) surface structured data and PDF artefacts via `lib/pdf-generator.ts`.
- 
- ### Data Layer
- - `lib/db.ts` wraps the PostgreSQL connection pool.
-@@ -36,7 +37,7 @@ ## Data Flows
- 
- - **HS Codes**: `/api/hs-codes` queries PostgreSQL, falls back to TARIC, then to seeded JSON.
- - **Origin Calculation**: `OriginCalculator` submits to `/api/origin/calculate`, which leverages `AdvancedOriginEngine` to evaluate applicable rules.
--- **Certificates**: `/api/certificates` supports GET/POST, persisting via `lib/repository.ts` and mirrored into mock storage when the database is unavailable.
-+- **Certificates**: `/api/certificates` supports GET/POST, persisting via `lib/repository.ts` and mirrored into mock storage when the database is unavailable. `/api/certificates/[id]` exposes detail views and `/api/certificates/[id]/pdf` streams generated PDF certificates for downstream auditors.
- - **Analytics**: `/api/analytics` aggregates certificate metrics; when DB access fails it reuses mock data for parity.
- 
- ## Observability
-@@ -49,4 +50,4 @@ ## Security Considerations
- - Input validation via Zod and TypeScript typing.
- - Parameterised SQL queries to mitigate injection.
- - TARIC requests performed over HTTPS with caching to reduce load.
--- Pre-commit hooks enforce lint/typecheck/test before merge.
-+- Pre-commit hooks and Vitest coverage enforce lint/typecheck/unit tests before merge.
-diff --git a/CHANGELOG.md b/CHANGELOG.md
-index 4f51b44..eba2932 100644
---- a/CHANGELOG.md
-+++ b/CHANGELOG.md
-@@ -10,9 +10,13 @@ ### Added
- - Supply-chain security tooling (Syft SBOM, Trivy scanning, Cosign release pipeline).
- - Documentation set (ARCHITECTURE.md, CONTRIBUTING.md, SECURITY.md, audit and implementation plan reports).
- - Multi-stage Dockerfile and release automation scaffolding.
-+- Vitest-powered behavioural coverage for the advanced origin engine and PDF certificate generator.
-+- Certificate detail and PDF streaming endpoints with mock-aware fallbacks for offline environments.
- 
- ### Changed
- - HS code API now falls back to seeded dataset when the database and TARIC return no matches.
-+- `make test` now delegates to the consolidated `npm run verify` workflow (lint, typecheck, unit tests).
- 
- ### Fixed
- - Ensured persona-driven workflows operate with seeded data even without a live database connection.
-+- PDF generation now renders rule insights, BoM snapshots, and persona context instead of placeholder strings.
-diff --git a/Makefile b/Makefile
-index 928caf7..9d55ac3 100644
---- a/Makefile
-+++ b/Makefile
-@@ -17,7 +17,7 @@ typecheck:
- 	npm run typecheck
- 
- test:
--	npm run test
-+	npm run verify
- 
- build:
- 	npm run build
-diff --git a/README.md b/README.md
-index 11d8913..f7d34c6 100644
---- a/README.md
-+++ b/README.md
-@@ -1,25 +1,60 @@
- # PSRA Origin Checker Enterprise v2
- 
--A Next.js 14 application that helps trade and customs teams validate preferential origin eligibility, generate compliance artefacts, and rehearse enterprise user journeys with a reusable set of ten regression personas.
-+PSRA Origin Checker Enterprise v2 is a Next.js 14 compliance workstation for validating preferential origin, generating audit-ready certificates, and rehearsing enterprise-grade UAT scenarios. The stack respects 12-Factor principles, Conventional Commits, and OWASP ASVS L2 guard rails, while remaining fully functional in offline/mock environments for CI or demos.
- 
--## Key Capabilities
-+> Live demo reference: [https://psra.sevensa.nl](https://psra.sevensa.nl)
- 
--- **Origin Calculator** &mdash; configurable bill of materials analysis with confidence scoring, H/V/A alternative tracking, and certificate generation hooks.
--- **Persona UAT Harness** &mdash; ten curated personas with objectives, risk focus, validation notes, and follow-up actions surfaced directly in the UI to guide advanced user acceptance testing.
--- **TARIC Integration** &mdash; live HS classification lookups against the European Commission TARIC API with graceful fallbacks to the seeded data set.
--- **Data Seeding Pipeline** &mdash; reproducible Prisma seed script that hydrates PostgreSQL with HS codes, trade agreements, origin rules, and persona-aligned sample certificates.
--- **Offline Fallbacks** &mdash; mock repositories and analytics calculators to keep the dashboard functional when the database is not available (handy for demos and CI).
-+## ‚öôÔ∏è Key Capabilities
- 
--## Architecture Overview
-+### üîπ Origin Calculator
-+- Configurable bill-of-materials analysis with persona presets or ad-hoc entry.
-+- Confidence scoring across heading (H), value (V), and alternative process (A) routes.
-+- Advanced Origin Engine with RVC, MaxNOM, tariff shift, and wholly obtained metrics.
-+- Inline certificate creation with PDF export (`/api/certificates/:id/pdf`).
- 
--| Layer | Technology | Notes |
-+### üîπ Persona UAT Harness
-+- Ten curated personas (importer, compliance manager, auditor, etc.) with goals, risk focus, validation notes, and follow-up actions.
-+- Scenario insights feed certificate creation and analytics panels to mirror production workflows.
-+
-+### üîπ TARIC Integration & Offline Fallbacks
-+- Live HS code lookups through the European Commission TARIC API with automatic caching.
-+- Deterministic fallback chain: PostgreSQL ‚ûú TARIC ‚ûú seeded JSON dataset.
-+- Mock repositories keep analytics, certificates, and personas operational when the database is unreachable.
-+
-+### üîπ Data Seeding Pipeline
-+- Prisma seed script (`npm run db:seed`) hydrates HS codes, trade agreements, origin rules, personas, and representative certificates.
-+- Seeds align with mock data consumed by APIs to maintain parity across environments.
-+
-+### üîπ Quality, Security & Supply Chain
-+- `npm run verify` (lint, typecheck, Vitest coverage) enforced locally and in CI.
-+- Syft CycloneDX SBOM generation, Trivy HIGH/CRITICAL gating, and GitHub CodeQL scans.
-+- Multi-stage Dockerfile with non-root runtime, BuildKit caching, and Cosign-ready release workflow.
-+
-+## üèóÔ∏è Architecture Overview
-+
-+| Layer | Technology | Description |
- | --- | --- | --- |
--| Frontend | Next.js 14, React 18, Tailwind CSS | Client components for persona selection, dashboard stats, and certificate flows. |
--| API | Next.js Route Handlers | Dynamic routes for HS codes, trade agreements, certificates, analytics, and origin calculation. |
--| Data | PostgreSQL + Prisma | `prisma/schema.prisma` models covering HS codes, trade agreements, origin rules, and certificates. |
--| Integrations | TARIC API, mock data fallbacks | Live HS lookup with `lib/taric-client.ts` and JSON-backed fallbacks in `lib/mock-data.ts`. |
-+| Frontend | Next.js 14, React 18, Tailwind CSS | Dashboard, persona harness, analytics, certificate UI |
-+| API | Next.js Route Handlers | `/api/**` endpoints for origin calculation, HS codes, trade agreements, analytics, certificates, health, and admin bulk import |
-+| Backend Services | Advanced Origin Engine, TARIC client | Rule evaluation, confidence metrics, HS code lookups with caching/fallbacks |
-+| Data | PostgreSQL + Prisma + mock memory stores | Persistent storage with deterministic seeds and offline mirrors |
-+| Security | OWASP ASVS L2 baseline, Zod validation, parameterised SQL | Static/dynamic scanning, SBOM/signing, JWT-ready integration points |
-+
-+## üì° API Ecosystem
- 
--## Getting Started
-+| Endpoint | Description | Status |
-+| --- | --- | --- |
-+| `GET /api/health` | Database heartbeat + uptime diagnostics | ‚úÖ |
-+| `GET /api/hs-codes` | HS code search (DB ‚ûú TARIC ‚ûú seed fallback) | ‚úÖ |
-+| `GET /api/trade-agreements` | Trade agreement catalogue | ‚úÖ |
-+| `POST /api/origin/calculate` | Advanced origin engine evaluation | ‚úÖ |
-+| `GET/POST /api/certificates` | Certificate listing and creation | ‚úÖ |
-+| `GET /api/certificates/:id` | Certificate detail (DB + mock fallback) | ‚úÖ |
-+| `GET /api/certificates/:id/pdf` | PDF certificate download via `lib/pdf-generator` | ‚úÖ |
-+| `GET /api/analytics` | KPI metrics (conformity, agreement mix, status distribution) | ‚úÖ |
-+| `POST /api/admin/bulk-import` | CSV ingestion for HS codes, certificates, origin rules | ‚úÖ |
-+
-+## üöÄ Getting Started
- 
- 1. **Install dependencies**
-    ```bash
-@@ -30,89 +65,103 @@ ## Getting Started
-    ```bash
-    cp .env.example .env.local
-    ```
--
--   Add your PostgreSQL connection string to `DATABASE_URL` and, if required, override the TARIC endpoint with `TARIC_API_BASE`.
--
--3. **Generate Prisma client**
--   ```bash
--   npx prisma generate
-+   Populate at minimum:
-+   ```env
-+   DATABASE_URL=postgresql://user:pass@localhost:5432/psra
-+   TARIC_API_BASE=https://ec.europa.eu/taric
-+   PGSSL=false
-    ```
- 
--4. **Apply schema**
-+3. **Generate Prisma client & apply schema**
-    ```bash
-+   npx prisma generate
-    npx prisma migrate deploy
-    ```
- 
--5. **Seed reference data**
-+4. **Seed reference data**
-    ```bash
-    npm run db:seed
-    ```
-+   Seeds include HS codes, trade agreements, origin rules, personas, and sample certificates for regression personas.
- 
--   The seed imports:
--   - 30+ HS codes from [`data/hs-codes.json`](data/hs-codes.json)
--   - Active trade agreements from [`data/trade-agreements.json`](data/trade-agreements.json)
--   - Persona-aligned product specific rules from [`data/origin-rules.json`](data/origin-rules.json)
--   - Sample certificates derived from the first five personas
-+5. **Run verification suite**
-+   ```bash
-+   npm run verify
-+   ```
-+   Executes linting, TypeScript checks, and Vitest coverage to satisfy CI gates.
- 
--6. **Run the development server**
-+6. **Start development server**
-    ```bash
-    npm run dev
-    ```
- 
--7. **Build for production / CI validation**
-+7. **Build for production**
-    ```bash
-    npm run build
-    ```
-+   Falls back to mock data when PostgreSQL is unavailable, ensuring CI and offline demos succeed.
- 
--   `npm run build` exercises linting, TypeScript checks, and the Next.js production build. Origin calculations and persona flows are validated during the build via type safety and the mocked fallbacks when PostgreSQL is unreachable.
--
--## Advanced UAT Playbook
--
--The Origin Calculator exposes a persona tray that preloads data for ten roles ranging from import specialists to compliance auditors. Each persona entry includes:
-+## üß™ Testing & Quality Gates
- 
--- Objective, risk focus, and success criteria
--- Pre-populated bill of materials and process list
--- Insights summarising UAT findings, validation notes, and recommended follow-up actions
-+- `npm run verify` ‚Äì lint, typecheck, Vitest coverage (`coverage/` reports, uploaded in CI).
-+- `npm run test` ‚Äì direct Vitest execution (handy for focused unit runs).
-+- `make sbom` & `make scan` ‚Äì Syft CycloneDX SBOM + Trivy HIGH/CRITICAL gating (used in CI/CD).
-+- GitHub Actions (`ci/ci.yml`) ‚Äì Node 20/22 matrix with caching, build, SBOM, Trivy, CodeQL.
-+- Release workflow (`ci/release.yml`) ‚Äì Docker build with BuildKit cache, Cosign signing, SBOM upload.
- 
--To run the full persona regression:
-+## üìä Persona-Driven UAT Workflow
- 
--1. Open the dashboard and select each persona sequentially.
--2. Trigger an origin calculation and review the applied rules, confidence score, and H/V/A alternatives.
--3. Capture observations or create certificates to verify downstream workflows.
--4. Switch to the analytics view to confirm the certificate and agreement counts update accordingly.
-+1. Launch the dashboard and select a persona from the tray (importer, compliance manager, auditor, etc.).
-+2. Review pre-filled HS code, agreement, BOM, and manufacturing steps; adjust as needed.
-+3. Run origin calculation to inspect applied rules, H/V/A alternatives, and metrics.
-+4. Generate certificates, download PDFs, and validate analytics counters for regression confidence.
-+5. Log findings per persona insights to maintain enterprise-ready validation evidence.
- 
--Custom scenarios remain available for exploratory testing with live TARIC lookups reinforcing HS validation guard rails.
-+## üîí Security & Compliance
- 
--## TARIC Live Connectivity
-+- OWASP ASVS Level 2 checklist (`docs/security/asvs-l2-checklist.md`).
-+- Zod validation on every user-facing API, parameterised SQL queries, and strict TypeScript typing.
-+- SBOM artefacts stored in `sbom/`, Trivy reports fail the pipeline on unresolved HIGH/CRITICAL issues.
-+- Ready for JWT / Keycloak integration (see `lib/auth` placeholders) and Redis-backed rate limiting (via `lib/queue` scaffolding).
- 
--`lib/taric-client.ts` performs cached fetches against the European Commission TARIC API. The HS codes API route (`app/api/hs-codes/route.ts`) first attempts to use PostgreSQL, then TARIC, and finally the seeded dataset if the upstream services are unavailable.
-+## üß± Data Assets & Offline Mode
- 
--To point at a different TARIC environment, set:
-+- Seed assets under `data/` feed Prisma seeds and mock repositories.
-+- `lib/mock-data.ts` keeps certificates, analytics, and persona context synchronised when the database is offline.
-+- TARIC client gracefully downgrades to seed data after network/database failures, ensuring HS lookup continuity.
- 
--```bash
--export TARIC_API_BASE="https://your-proxy.example.com/taric"
--```
-+## üõ†Ô∏è Tooling & Developer Experience
- 
--## Data Assets
-+- `.editorconfig`, `.gitattributes`, pre-commit hooks, and Makefile unify local tooling.
-+- `commands.sh` documents the canonical automation sequence (setup ‚ûú verify ‚ûú build ‚ûú sbom ‚ûú scan ‚ûú docker-build).
-+- Keep a Changelog (`CHANGELOG.md`) + Conventional Commits underpin SemVer releases.
- 
--All seedable data lives in the `data/` directory for transparency and auditability:
-+## üìÑ Supporting Documents
- 
--- `hs-codes.json`
--- `trade-agreements.json`
--- `origin-rules.json`
--- `persona-scenarios.ts`
-+- [ARCHITECTURE.md](ARCHITECTURE.md)
-+- [CONTRIBUTING.md](CONTRIBUTING.md)
-+- [SECURITY.md](SECURITY.md)
-+- [report/audit.md](report/audit.md)
-+- [report/implementation-plan.md](report/implementation-plan.md)
-+- [report/structure-decisions.md](report/structure-decisions.md)
- 
--These assets are consumed by the Prisma seed script and the mock data module, ensuring the UI, API routes, and fallbacks remain in sync.
-+## üó∫Ô∏è Roadmap Highlights
- 
--## Testing & Validation
-+- Automated integration tests for TARIC client and persona journeys.
-+- Observability (structured logging, tracing, metrics) via `lib/audit-service` once infra is ready.
-+- Infra-as-code assets in `/infra` (Terraform/Kubernetes) for reproducible deployments.
-+- Multilingual UI support and ERP connector prototypes (SAP, Dynamics) to extend enterprise reach.
- 
--- `npm run build` &mdash; verifies the Next.js application compiles with the current dataset and mocks when PostgreSQL is offline.
--- Manual persona walkthrough &mdash; ensures each preconfigured scenario produces the expected insights, validation notes, and certificate messaging.
--- TARIC probe &mdash; HS code lookups fall back to the live TARIC service when the database does not contain the requested classification.
-+## ü§ù Contributing
- 
--## Contributing
-+1. Run `npm run verify` before committing to satisfy lint/typecheck/test gates.
-+2. Use Conventional Commits (e.g., `feat:`, `fix:`) to unlock SemVer automation.
-+3. Update seeds and documentation when expanding HS codes, trade agreements, or persona scenarios.
-+4. Open PRs with clear intent, test evidence, risk assessment, and rollback plan per Google eng-practices.
- 
--1. Run `npm run build` before committing to ensure type checks and the production build succeed.
--2. If you add new HS codes, rules, or personas, update the JSON/TS assets in `data/` and re-run `npm run db:seed` to keep the database consistent.
--3. Document any new manual validation steps in this README so the persona UAT library stays authoritative.
-+## üìû Support
- 
-+- Live application: [https://psra.sevensa.nl](https://psra.sevensa.nl)
-+- API documentation: [https://psra.sevensa.nl/api](https://psra.sevensa.nl/api)
-+- System health: [https://psra.sevensa.nl/api/health](https://psra.sevensa.nl/api/health)
-+- License: MIT (see `LICENSE`)
-diff --git a/app/api/certificates/[id]/pdf/route.ts b/app/api/certificates/[id]/pdf/route.ts
-index d7d68da..c768e2b 100644
---- a/app/api/certificates/[id]/pdf/route.ts
-+++ b/app/api/certificates/[id]/pdf/route.ts
-@@ -1,47 +1,29 @@
- import { NextRequest, NextResponse } from 'next/server';
--import { query } from '@/lib/db';
--import { pdfGenerator } from '@/lib/pdf-generator';
-+import { getCertificateById } from '@/lib/repository';
-+import { pdfGenerator, CertificateData } from '@/lib/pdf-generator';
- 
--export async function GET(
--  request: NextRequest,
--  { params }: { params: { id: string } }
--) {
--  try {
--    const certificateId = params.id;
--    
--    // Get certificate from database
--    const result = await query(
--      'SELECT * FROM certificates WHERE id = $1',
--      [certificateId]
--    );
--    
--    if (!result.rows || result.rows.length === 0) {
--      return NextResponse.json(
--        { error: 'Certificate not found' },
--        { status: 404 }
--      );
--    }
--    
--    const certificate = result.rows[0];
--    
--    // Generate PDF
--    const pdfBuffer = pdfGenerator.generateCertificate(certificate);
--    
--    // Return PDF response
--    return new NextResponse(pdfBuffer, {
--      status: 200,
--      headers: {
--        'Content-Type': 'application/pdf',
--        'Content-Disposition': `attachment; filename="certificate-${certificateId}.pdf"`,
--        'Content-Length': pdfBuffer.length.toString(),
--      },
--    });
--    
--  } catch (error) {
--    console.error('Error generating PDF certificate:', error);
--    return NextResponse.json(
--      { error: 'Failed to generate PDF certificate' },
--      { status: 500 }
--    );
-+interface RouteParams {
-+  params: {
-+    id: string;
-+  };
-+}
-+
-+export async function GET(_request: NextRequest, { params }: RouteParams) {
-+  const certificate = await getCertificateById(params.id);
-+
-+  if (!certificate) {
-+    return NextResponse.json({ error: 'Certificate not found' }, { status: 404 });
-   }
-+
-+  const certificateData: CertificateData = {
-+    ...certificate,
-+    result: certificate.result as CertificateData['result'],
-+  };
-+
-+  const buffer = pdfGenerator.generateCertificate(certificateData);
-+  const response = new NextResponse(buffer);
-+  response.headers.set('Content-Type', 'application/pdf');
-+  response.headers.set('Content-Disposition', `attachment; filename="certificate-${certificate.id}.pdf"`);
-+
-+  return response;
- }
-diff --git a/app/api/certificates/[id]/route.ts b/app/api/certificates/[id]/route.ts
-index 2bfa389..5d2b8f3 100644
---- a/app/api/certificates/[id]/route.ts
-+++ b/app/api/certificates/[id]/route.ts
-@@ -1 +1,18 @@
--import { NextResponse } from 'next/server'; import { getCertificateById } from '@/lib/repository'; export async function GET(_:Request,{params}:{params:{id:string}}){ const row = await getCertificateById(params.id); if(!row) return NextResponse.json({error:'Not found'},{status:404}); return NextResponse.json({ id: params.id, status: row.status, result: row.isConform==null? undefined : { isConform: !!row.isConform, confidence: row.confidence??undefined, ruleVersion: row.ruleVersion??undefined, summary: row.summary??undefined } }); }
-+import { NextRequest, NextResponse } from 'next/server';
-+import { getCertificateById } from '@/lib/repository';
-+
-+interface RouteParams {
-+  params: {
-+    id: string;
-+  };
-+}
-+
-+export async function GET(_request: NextRequest, { params }: RouteParams) {
-+  const certificate = await getCertificateById(params.id);
-+
-+  if (!certificate) {
-+    return NextResponse.json({ error: 'Certificate not found' }, { status: 404 });
-+  }
-+
-+  return NextResponse.json({ certificate });
-+}
-diff --git a/ci/ci.yml b/ci/ci.yml
-index e7e7f9f..fbc8f6b 100644
---- a/ci/ci.yml
-+++ b/ci/ci.yml
-@@ -38,7 +38,7 @@ jobs:
-       - name: Install dependencies
-         run: make setup
- 
--      - name: Lint & Typecheck
-+      - name: Verify (lint, typecheck, unit tests)
-         run: make test
- 
-       - name: Build
-diff --git a/lib/mock-data.ts b/lib/mock-data.ts
-index fb4bdcb..50b2ae1 100644
---- a/lib/mock-data.ts
-+++ b/lib/mock-data.ts
-@@ -159,6 +159,10 @@ export function getMockCertificates() {
-   return certificateMemory.sort((a, b) => (a.createdAt > b.createdAt ? -1 : 1));
- }
- 
-+export function findMockCertificate(id: string) {
-+  return certificateMemory.find((certificate) => certificate.id === id) ?? null;
-+}
-+
- export function addMockCertificate(entry: {
-   productSku: string;
-   hs6: string;
-diff --git a/lib/pdf-generator.ts b/lib/pdf-generator.ts
-index b758718..9b5c369 100644
---- a/lib/pdf-generator.ts
-+++ b/lib/pdf-generator.ts
-@@ -1,138 +1,227 @@
--const jsPDF = require('jspdf');
--
--export interface CertificateData {
--  id: string;
--  productSku: string;
--  hsCode: string;
--  agreement: string;
--  status: string;
--  result: any;
--  createdAt: string;
-+import { jsPDF } from 'jspdf';
-+import type { Certificate } from '@/lib/repository';
-+
-+interface CertificateResultPayload {
-+  isConform: boolean;
-+  confidence: number;
-+  explanation?: string;
-+  appliedRules?: Array<{ id?: string; ruleText: string; priority?: number | null }>;
-+  calculations?: {
-+    rvc?: number;
-+    maxNom?: number;
-+    changeOfTariff?: boolean;
-+    whollyObtained?: boolean;
-+  };
-+  alternatives?: Array<{
-+    type: string;
-+    result: boolean;
-+    confidence?: number;
-+    details?: string;
-+  }>;
-+  persona?: {
-+    id: string;
-+    name: string;
-+    role: string;
-+    objective: string;
-+  };
-+  materials?: Array<{
-+    hsCode: string;
-+    origin: string;
-+    value: number;
-+    percentage: number;
-+    description?: string;
-+  }>;
-+  manufacturingProcesses?: string[];
- }
- 
-+export type CertificateData = Certificate & { result?: CertificateResultPayload };
-+
- export class PDFCertificateGenerator {
--  
-   generateCertificate(certificate: CertificateData): Buffer {
--    const doc = new jsPDF.jsPDF();
--    
--    // Header
--    doc.setFontSize(20);
-+    const doc = new jsPDF({ unit: 'pt' });
-+
-+    this.renderHeader(doc, certificate);
-+    this.renderSummary(doc, certificate);
-+    this.renderRuleInsights(doc, certificate.result);
-+    this.renderBillOfMaterials(doc, certificate.result);
-+    this.renderFooter(doc);
-+
-+    return Buffer.from(doc.output('arraybuffer'));
-+  }
-+
-+  private renderHeader(doc: jsPDF, certificate: CertificateData) {
-     doc.setFont('helvetica', 'bold');
--    doc.text('CERTIFICATE OF ORIGIN', 105, 30, { align: 'center' });
--    
--    // Subheader
-+    doc.setFontSize(22);
-+    doc.text('Certificate of Origin', 297.5, 60, { align: 'center' });
-+
-     doc.setFontSize(14);
-     doc.setFont('helvetica', 'normal');
--    doc.text(`Trade Agreement: ${certificate.agreement}`, 105, 45, { align: 'center' });
--    
--    // Certificate details
-+    doc.text(`Trade Agreement: ${certificate.agreement}`, 297.5, 85, { align: 'center' });
-+  }
-+
-+  private renderSummary(doc: jsPDF, certificate: CertificateData) {
-+    const { result } = certificate;
-+    const createdDate = new Date(certificate.createdAt);
-+
-     doc.setFontSize(12);
-     doc.setFont('helvetica', 'bold');
--    
--    // Left column
--    doc.text('Certificate ID:', 20, 70);
--    doc.text('Product SKU:', 20, 85);
--    doc.text('HS Code:', 20, 100);
--    doc.text('Status:', 20, 115);
--    doc.text('Issue Date:', 20, 130);
--    
--    // Right column values
--    doc.setFont('helvetica', 'normal');
--    doc.text(certificate.id, 80, 70);
--    doc.text(certificate.productSku, 80, 85);
--    doc.text(certificate.hsCode, 80, 100);
--    doc.text(certificate.status.toUpperCase(), 80, 115);
--    doc.text(new Date(certificate.createdAt).toLocaleDateString(), 80, 130);
--    
--    // Origin determination section
--    doc.setFont('helvetica', 'bold');
--    doc.text('ORIGIN DETERMINATION', 20, 155);
--    
--    if (certificate.result) {
--      const result = typeof certificate.result === 'string' 
--        ? JSON.parse(certificate.result) 
--        : certificate.result;
--      
-+
-+    const leftColumnX = 40;
-+    const rightColumnX = 250;
-+    let yPos = 120;
-+
-+    const summaryFields: Array<[string, string]> = [
-+      ['Certificate ID', certificate.id],
-+      ['Product SKU', certificate.productSku],
-+      ['HS Code', certificate.hs6],
-+      ['Status', certificate.status.toUpperCase()],
-+      ['Issued', createdDate.toISOString().split('T')[0]],
-+    ];
-+
-+    summaryFields.forEach(([label, value]) => {
-+      doc.text(`${label}:`, leftColumnX, yPos);
-       doc.setFont('helvetica', 'normal');
--      doc.text(`Conformity: ${result.isConform ? 'CONFORMING' : 'NON-CONFORMING'}`, 20, 170);
--      doc.text(`Confidence: ${(result.confidence * 100).toFixed(1)}%`, 20, 185);
--      
--      // Explanation
-+      doc.text(value, rightColumnX, yPos);
-+      doc.setFont('helvetica', 'bold');
-+      yPos += 18;
-+    });
-+
-+    if (result) {
-       doc.setFont('helvetica', 'bold');
--      doc.text('Explanation:', 20, 205);
-+      doc.text('Compliance Outcome:', leftColumnX, yPos + 10);
-       doc.setFont('helvetica', 'normal');
--      
--      const explanation = result.explanation || 'No explanation provided';
--      const splitExplanation = doc.splitTextToSize(explanation, 170);
--      doc.text(splitExplanation, 20, 220);
--      
--      // Calculations if available
--      if (result.calculations) {
--        let yPos = 240 + (splitExplanation.length * 5);
--        
--        doc.setFont('helvetica', 'bold');
--        doc.text('CALCULATIONS', 20, yPos);
--        yPos += 15;
--        
--        doc.setFont('helvetica', 'normal');
--        if (result.calculations.rvc !== undefined) {
--          doc.text(`Regional Value Content (RVC): ${result.calculations.rvc.toFixed(1)}%`, 20, yPos);
--          yPos += 15;
--        }
--        
--        if (result.calculations.maxNom !== undefined) {
--          doc.text(`Maximum Non-Originating Materials: ${result.calculations.maxNom.toFixed(1)}%`, 20, yPos);
--          yPos += 15;
--        }
--        
--        if (result.calculations.changeOfTariff !== undefined) {
--          doc.text(`Change of Tariff: ${result.calculations.changeOfTariff ? 'YES' : 'NO'}`, 20, yPos);
--          yPos += 15;
--        }
--        
--        if (result.calculations.whollyObtained !== undefined) {
--          doc.text(`Wholly Obtained: ${result.calculations.whollyObtained ? 'YES' : 'NO'}`, 20, yPos);
--        }
--      }
-+      doc.text(result.isConform ? 'CONFORMING' : 'NON-CONFORMING', rightColumnX, yPos + 10);
-+      doc.text(`Confidence: ${(result.confidence * 100).toFixed(1)}%`, rightColumnX, yPos + 28);
-     }
--    
--    // Footer
--    doc.setFontSize(10);
--    doc.setFont('helvetica', 'italic');
--    doc.text('This certificate is generated automatically by the PSRA Origin Checker system.', 105, 280, { align: 'center' });
--    doc.text('For verification, please contact the issuing authority.', 105, 290, { align: 'center' });
--    
--    // Return PDF as buffer
--    return Buffer.from(doc.output('arraybuffer'));
-   }
--  
--  generateBulkCertificates(certificates: CertificateData[]): Buffer {
--    const doc = new jsPDF.jsPDF();
--    
--    certificates.forEach((certificate, index) => {
--      if (index > 0) {
--        doc.addPage();
-+
-+  private renderRuleInsights(doc: jsPDF, result?: CertificateResultPayload) {
-+    if (!result) {
-+      return;
-+    }
-+
-+    let yPos = 220;
-+    doc.setFontSize(12);
-+    doc.setFont('helvetica', 'bold');
-+    doc.text('Rule Interpretation', 40, yPos);
-+    yPos += 18;
-+
-+    doc.setFont('helvetica', 'normal');
-+    const explanation = result.explanation ?? 'No explanation provided';
-+    const wrapped = doc.splitTextToSize(explanation, 515);
-+    doc.text(wrapped, 40, yPos);
-+    yPos += wrapped.length * 14 + 10;
-+
-+    if (result.appliedRules?.length) {
-+      doc.setFont('helvetica', 'bold');
-+      doc.text('Applied Rules', 40, yPos);
-+      yPos += 16;
-+      doc.setFont('helvetica', 'normal');
-+      result.appliedRules.forEach((rule, index) => {
-+        const priorityText = rule.priority != null ? ` (Priority ${rule.priority})` : '';
-+        const label = `${index + 1}. ${rule.ruleText}${priorityText}`;
-+        const wrappedRule = doc.splitTextToSize(label, 515);
-+        doc.text(wrappedRule, 40, yPos);
-+        yPos += wrappedRule.length * 14 + 6;
-+      });
-+    }
-+
-+    if (result.calculations) {
-+      doc.setFont('helvetica', 'bold');
-+      doc.text('Key Metrics', 40, yPos + 10);
-+      yPos += 24;
-+      doc.setFont('helvetica', 'normal');
-+
-+      const metrics: string[] = [];
-+      if (result.calculations.rvc != null) {
-+        metrics.push(`Regional Value Content: ${result.calculations.rvc.toFixed(1)}%`);
-       }
--      
--      // Generate individual certificate on current page
--      this.addCertificateToPage(doc, certificate);
--    });
--    
--    return Buffer.from(doc.output('arraybuffer'));
-+      if (result.calculations.maxNom != null) {
-+        metrics.push(`Maximum Non-Originating Materials: ${result.calculations.maxNom.toFixed(1)}%`);
-+      }
-+      if (result.calculations.changeOfTariff != null) {
-+        metrics.push(`Change of Tariff: ${result.calculations.changeOfTariff ? 'Yes' : 'No'}`);
-+      }
-+      if (result.calculations.whollyObtained != null) {
-+        metrics.push(`Wholly Obtained: ${result.calculations.whollyObtained ? 'Yes' : 'No'}`);
-+      }
-+
-+      metrics.forEach((metric) => {
-+        doc.text(`‚Ä¢ ${metric}`, 40, yPos);
-+        yPos += 14;
-+      });
-+    }
-+
-+    if (result.alternatives?.length) {
-+      doc.setFont('helvetica', 'bold');
-+      doc.text('Alternative Evaluations', 40, yPos + 10);
-+      yPos += 24;
-+      doc.setFont('helvetica', 'normal');
-+
-+      result.alternatives.forEach((alt) => {
-+        const status = alt.result ? 'PASS' : 'FAIL';
-+        const confidence = alt.confidence != null ? ` (${(alt.confidence * 100).toFixed(0)}% confidence)` : '';
-+        const description = alt.details ?? 'No additional detail';
-+        const wrapped = doc.splitTextToSize(`‚Ä¢ ${alt.type}: ${status}${confidence} ‚Äî ${description}`, 515);
-+        doc.text(wrapped, 40, yPos);
-+        yPos += wrapped.length * 14 + 6;
-+      });
-+    }
-+
-+    if (result.persona) {
-+      doc.setFont('helvetica', 'bold');
-+      doc.text('Persona Context', 40, yPos + 10);
-+      yPos += 24;
-+      doc.setFont('helvetica', 'normal');
-+      doc.text(`Name: ${result.persona.name} (${result.persona.role})`, 40, yPos);
-+      doc.text(`Objective: ${result.persona.objective}`, 40, yPos + 16);
-+    }
-   }
--  
--  private addCertificateToPage(doc: any, certificate: CertificateData) {
--    // Same logic as generateCertificate but without creating new doc
--    doc.setFontSize(20);
-+
-+  private renderBillOfMaterials(doc: jsPDF, result?: CertificateResultPayload) {
-+    if (!result?.materials?.length) {
-+      return;
-+    }
-+
-+    let yPos = 440;
-     doc.setFont('helvetica', 'bold');
--    doc.text('CERTIFICATE OF ORIGIN', 105, 30, { align: 'center' });
--    
--    doc.setFontSize(14);
-+    doc.setFontSize(12);
-+    doc.text('Bill of Materials Snapshot', 40, yPos);
-+    yPos += 18;
-+
-     doc.setFont('helvetica', 'normal');
--    doc.text(`Trade Agreement: ${certificate.agreement}`, 105, 45, { align: 'center' });
--    
--    // Add rest of certificate content...
--    // (Implementation details same as above)
-+    result.materials.slice(0, 8).forEach((material, index) => {
-+      const description = material.description ?? 'Component';
-+      const line = `${index + 1}. ${description} ‚Äî HS ${material.hsCode} (${material.origin}) ‚Ä¢ ${material.percentage}% / ‚Ç¨${material.value.toFixed(2)}`;
-+      const wrapped = doc.splitTextToSize(line, 515);
-+      doc.text(wrapped, 40, yPos);
-+      yPos += wrapped.length * 14 + 4;
-+    });
-+
-+    if (result.materials.length > 8) {
-+      doc.text(`+ ${result.materials.length - 8} additional materials`, 40, yPos + 10);
-+    }
-+
-+    if (result.manufacturingProcesses?.length) {
-+      yPos += 24;
-+      doc.setFont('helvetica', 'bold');
-+      doc.text('Critical Processes', 40, yPos);
-+      yPos += 16;
-+      doc.setFont('helvetica', 'normal');
-+      doc.text(result.manufacturingProcesses.map((process) => `‚Ä¢ ${process}`), 40, yPos);
-+    }
-+  }
-+
-+  private renderFooter(doc: jsPDF) {
-+    doc.setFontSize(10);
-+    doc.setFont('helvetica', 'italic');
-+    doc.text(
-+      'Generated automatically by the PSRA Origin Checker Enterprise v2 platform.',
-+      297.5,
-+      780,
-+      { align: 'center' }
-+    );
-+    doc.text('For verification support contact compliance@sevensa.nl', 297.5, 795, { align: 'center' });
-   }
- }
- 
-diff --git a/lib/repository.ts b/lib/repository.ts
-index 6d9ea70..36d0af7 100644
---- a/lib/repository.ts
-+++ b/lib/repository.ts
-@@ -1,5 +1,11 @@
- import { query } from '@/lib/db';
--import { addMockCertificate, computeMockAnalytics, getMockCertificates } from '@/lib/mock-data';
-+import {
-+  addMockCertificate,
-+  computeMockAnalytics,
-+  findMockCertificate,
-+  getMockCertificates,
-+  MockCertificate,
-+} from '@/lib/mock-data';
- 
- interface CertificateParams {
-   status?: string;
-@@ -9,6 +15,16 @@ interface CertificateParams {
-   pageSize?: number;
- }
- 
-+export interface Certificate {
-+  id: string;
-+  productSku: string;
-+  hs6: string;
-+  agreement: string;
-+  status: 'pending' | 'processing' | 'done' | 'failed';
-+  result?: Record<string, unknown> | undefined;
-+  createdAt: string;
-+}
-+
- interface CreateCertificateParams {
-   productSku: string;
-   hs6: string;
-@@ -23,6 +39,30 @@ function lim(page: number, pageSize: number) {
-   return { limit: ps, offset: (p - 1) * ps };
- }
- 
-+function mapCertificateRow(row: any): Certificate {
-+  return {
-+    id: row.id as string,
-+    productSku: row.productSku as string,
-+    hs6: row.hs6 as string,
-+    agreement: row.agreement as string,
-+    status: (row.status ?? 'pending') as Certificate['status'],
-+    result: row.result ? JSON.parse(row.result) : undefined,
-+    createdAt: (row.createdAt instanceof Date ? row.createdAt.toISOString() : row.createdAt) as string,
-+  } satisfies Certificate;
-+}
-+
-+function mapMockCertificate(cert: MockCertificate): Certificate {
-+  return {
-+    id: cert.id,
-+    productSku: cert.productSku,
-+    hs6: cert.hs6,
-+    agreement: cert.agreement,
-+    status: cert.status,
-+    result: cert.result as unknown as Record<string, unknown> | undefined,
-+    createdAt: cert.createdAt,
-+  } satisfies Certificate;
-+}
-+
- export async function listCertificates(params: CertificateParams) {
-   const where: string[] = [];
-   const values: any[] = [];
-@@ -59,15 +99,7 @@ export async function listCertificates(params: CertificateParams) {
-     const rows = result.rows || [];
- 
-     return {
--      items: rows.map((r: any) => ({
--        id: r.id,
--        productSku: r.productSku,
--        hs6: r.hs6,
--        agreement: r.agreement,
--        status: r.status,
--        result: r.result ? JSON.parse(r.result) : undefined,
--        createdAt: r.createdAt
--      })),
-+      items: rows.map(mapCertificateRow),
-       total: rows.length
-     };
-   } catch (error) {
-@@ -91,7 +123,7 @@ export async function listCertificates(params: CertificateParams) {
-     const start = (page - 1) * pageSize;
-     const items = mock.slice(start, start + pageSize);
- 
--    return { items, total: mock.length };
-+    return { items: items.map(mapMockCertificate), total: mock.length };
-   }
- }
- 
-@@ -117,15 +149,7 @@ export async function createCertificate(params: CreateCertificateParams) {
-       throw new Error('Failed to insert certificate');
-     }
- 
--    return {
--      id: row.id as string,
--      productSku: row.productSku as string,
--      hs6: row.hs6 as string,
--      agreement: row.agreement as string,
--      status: row.status as string,
--      result: row.result ? JSON.parse(row.result) : undefined,
--      createdAt: row.createdAt as string
--    };
-+    return mapCertificateRow(row);
-   } catch (error) {
-     console.error('Error creating certificate:', error);
- 
-@@ -137,7 +161,7 @@ export async function createCertificate(params: CreateCertificateParams) {
-       result: params.result as any,
-     });
- 
--    return mock;
-+    return mapMockCertificate(mock);
-   }
- }
- 
-@@ -145,11 +169,16 @@ export async function getCertificateById(id: string) {
-   const sql = 'SELECT * FROM certificates WHERE id = $1 LIMIT 1';
-   try {
-     const result = await query(sql, [id]);
--    return result.rows?.[0] || null;
-+    const row = result.rows?.[0];
-+    if (row) {
-+      return mapCertificateRow(row);
-+    }
-   } catch (error) {
-     console.error('Error getting certificate:', error);
--    return null;
-   }
-+
-+  const mock = findMockCertificate(id);
-+  return mock ? mapMockCertificate(mock) : null;
- }
- 
- export async function getTraceByRequestId(requestId: string) {
-diff --git a/lib/task-queue.ts b/lib/task-queue.ts
-index b68cd2b..f2b6976 100644
---- a/lib/task-queue.ts
-+++ b/lib/task-queue.ts
-@@ -1,5 +1,6 @@
- import { Queue, Worker, Job } from 'bullmq';
- import Redis from 'ioredis';
-+import type { CertificateData } from './pdf-generator';
- 
- // Redis connection for BullMQ
- const connection = new Redis({
-@@ -202,25 +203,20 @@ export class TaskQueueService {
- 
-   private async processPDFGeneration(data: PDFGenerationJob['data']): Promise<Buffer> {
-     try {
--      const { PDFCertificateGenerator } = await import('./pdf-generator');
--      const repository = await import('./repository');
--      
--      // Mock certificate for PDF generation
--      const certificate = {
--        id: data.certificateId,
--        productSku: 'MOCK-SKU',
--        hsCode: '3901',
--        agreement: 'CETA',
--        status: 'completed',
--        createdAt: new Date().toISOString(),
--        result: { isConform: true, confidence: 0.95 }
--      };
-+      const { pdfGenerator } = await import('./pdf-generator');
-+      const { getCertificateById } = await import('./repository');
-+
-+      const certificate = await getCertificateById(data.certificateId);
-       if (!certificate) {
-         throw new Error(`Certificate ${data.certificateId} not found`);
-       }
- 
--      const generator = new PDFCertificateGenerator();
--      const pdfBuffer = generator.generateCertificate(certificate);
-+      const payload: CertificateData = {
-+        ...certificate,
-+        result: certificate.result as CertificateData['result'],
-+      };
-+
-+      const pdfBuffer = pdfGenerator.generateCertificate(payload);
- 
-       // Optionally store PDF or send notification
-       if (data.userId) {
-diff --git a/package-lock.json b/package-lock.json
-index 56641c5..f9e0b7f 100644
---- a/package-lock.json
-+++ b/package-lock.json
-@@ -33,6 +33,7 @@
-         "@prisma/client": "^5.18.0",
-         "@types/pg": "^8.15.5",
-         "@types/react": "19.1.13",
-+        "@vitest/coverage-v8": "^2.1.4",
-         "autoprefixer": "10.4.19",
-         "eslint": "^8.57.0",
-         "eslint-config-next": "^15.5.4",
-@@ -41,7 +42,8 @@
-         "prisma": "^5.18.0",
-         "tailwindcss": "3.4.10",
-         "ts-node": "^10.9.2",
--        "typescript": "5.5.4"
-+        "typescript": "5.5.4",
-+        "vitest": "^2.1.4"
-       }
-     },
-     "node_modules/@alloc/quick-lru": {
-@@ -57,6 +59,20 @@
-         "url": "https://github.com/sponsors/sindresorhus"
-       }
-     },
-+    "node_modules/@ampproject/remapping": {
-+      "version": "2.3.0",
-+      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
-+      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
-+      "dev": true,
-+      "license": "Apache-2.0",
-+      "dependencies": {
-+        "@jridgewell/gen-mapping": "^0.3.5",
-+        "@jridgewell/trace-mapping": "^0.3.24"
-+      },
-+      "engines": {
-+        "node": ">=6.0.0"
-+      }
-+    },
-     "node_modules/@aws-crypto/sha256-browser": {
-       "version": "5.2.0",
-       "resolved": "https://registry.npmjs.org/@aws-crypto/sha256-browser/-/sha256-browser-5.2.0.tgz",
-@@ -745,6 +761,42 @@
-         "node": ">=18.0.0"
-       }
-     },
-+    "node_modules/@babel/helper-string-parser": {
-+      "version": "7.27.1",
-+      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
-+      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
-+      "dev": true,
-+      "license": "MIT",
-+      "engines": {
-+        "node": ">=6.9.0"
-+      }
-+    },
-+    "node_modules/@babel/helper-validator-identifier": {
-+      "version": "7.27.1",
-+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
-+      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
-+      "dev": true,
-+      "license": "MIT",
-+      "engines": {
-+        "node": ">=6.9.0"
-+      }
-+    },
-+    "node_modules/@babel/parser": {
-+      "version": "7.28.4",
-+      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.4.tgz",
-+      "integrity": "sha512-yZbBqeM6TkpP9du/I2pUZnJsRMGGvOuIrhjzC1AwHwW+6he4mni6Bp/m8ijn0iOuZuPI2BfkCoSRunpyjnrQKg==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "@babel/types": "^7.28.4"
-+      },
-+      "bin": {
-+        "parser": "bin/babel-parser.js"
-+      },
-+      "engines": {
-+        "node": ">=6.0.0"
-+      }
-+    },
-     "node_modules/@babel/runtime": {
-       "version": "7.28.4",
-       "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.28.4.tgz",
-@@ -754,6 +806,27 @@
-         "node": ">=6.9.0"
-       }
-     },
-+    "node_modules/@babel/types": {
-+      "version": "7.28.4",
-+      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.4.tgz",
-+      "integrity": "sha512-bkFqkLhh3pMBUQQkpVgWDWq/lqzc2678eUyDlTBhRqhCHFguYYGM0Efga7tYk4TogG/3x0EEl66/OQ+WGbWB/Q==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "@babel/helper-string-parser": "^7.27.1",
-+        "@babel/helper-validator-identifier": "^7.27.1"
-+      },
-+      "engines": {
-+        "node": ">=6.9.0"
-+      }
-+    },
-+    "node_modules/@bcoe/v8-coverage": {
-+      "version": "0.2.3",
-+      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
-+      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
-+      "dev": true,
-+      "license": "MIT"
-+    },
-     "node_modules/@cspotcode/source-map-support": {
-       "version": "0.8.1",
-       "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
-@@ -822,165 +895,556 @@
-         "tslib": "^2.4.0"
-       }
-     },
--    "node_modules/@eslint-community/eslint-utils": {
--      "version": "4.9.0",
--      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.9.0.tgz",
--      "integrity": "sha512-ayVFHdtZ+hsq1t2Dy24wCmGXGe4q9Gu3smhLYALJrr473ZH27MsnSL+LKUlimp4BWJqMDMLmPpx/Q9R3OAlL4g==",
-+    "node_modules/@esbuild/aix-ppc64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.21.5.tgz",
-+      "integrity": "sha512-1SDgH6ZSPTlggy1yI6+Dbkiz8xzpHJEVAlF/AM1tHPLsf5STom9rwtjE4hKAF20FfXXNTFqEYXyJNWh1GiZedQ==",
-+      "cpu": [
-+        "ppc64"
-+      ],
-       "dev": true,
-       "license": "MIT",
--      "dependencies": {
--        "eslint-visitor-keys": "^3.4.3"
--      },
-+      "optional": true,
-+      "os": [
-+        "aix"
-+      ],
-       "engines": {
--        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
--      },
--      "funding": {
--        "url": "https://opencollective.com/eslint"
--      },
--      "peerDependencies": {
--        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
-+        "node": ">=12"
-       }
-     },
--    "node_modules/@eslint-community/regexpp": {
--      "version": "4.12.1",
--      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
--      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
-+    "node_modules/@esbuild/android-arm": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.21.5.tgz",
-+      "integrity": "sha512-vCPvzSjpPHEi1siZdlvAlsPxXl7WbOVUBBAowWug4rJHb68Ox8KualB+1ocNvT5fjv6wpkX6o/iEpbDrf68zcg==",
-+      "cpu": [
-+        "arm"
-+      ],
-       "dev": true,
-       "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "android"
-+      ],
-       "engines": {
--        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
-+        "node": ">=12"
-       }
-     },
--    "node_modules/@eslint/eslintrc": {
--      "version": "2.1.4",
--      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
--      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
-+    "node_modules/@esbuild/android-arm64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.21.5.tgz",
-+      "integrity": "sha512-c0uX9VAUBQ7dTDCjq+wdyGLowMdtR/GoC2U5IYk/7D1H1JYC0qseD7+11iMP2mRLN9RcCMRcjC4YMclCzGwS/A==",
-+      "cpu": [
-+        "arm64"
-+      ],
-       "dev": true,
-       "license": "MIT",
--      "dependencies": {
--        "ajv": "^6.12.4",
--        "debug": "^4.3.2",
--        "espree": "^9.6.0",
--        "globals": "^13.19.0",
--        "ignore": "^5.2.0",
--        "import-fresh": "^3.2.1",
--        "js-yaml": "^4.1.0",
--        "minimatch": "^3.1.2",
--        "strip-json-comments": "^3.1.1"
--      },
-+      "optional": true,
-+      "os": [
-+        "android"
-+      ],
-       "engines": {
--        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
--      },
--      "funding": {
--        "url": "https://opencollective.com/eslint"
-+        "node": ">=12"
-       }
-     },
--    "node_modules/@eslint/eslintrc/node_modules/brace-expansion": {
--      "version": "1.1.12",
--      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
--      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
-+    "node_modules/@esbuild/android-x64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.21.5.tgz",
-+      "integrity": "sha512-D7aPRUUNHRBwHxzxRvp856rjUHRFW1SdQATKXH2hqA0kAZb1hKmi02OpYRacl0TxIGz/ZmXWlbZgjwWYaCakTA==",
-+      "cpu": [
-+        "x64"
-+      ],
-       "dev": true,
-       "license": "MIT",
--      "dependencies": {
--        "balanced-match": "^1.0.0",
--        "concat-map": "0.0.1"
-+      "optional": true,
-+      "os": [
-+        "android"
-+      ],
-+      "engines": {
-+        "node": ">=12"
-       }
-     },
--    "node_modules/@eslint/eslintrc/node_modules/minimatch": {
--      "version": "3.1.2",
--      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
--      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
-+    "node_modules/@esbuild/darwin-arm64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.21.5.tgz",
-+      "integrity": "sha512-DwqXqZyuk5AiWWf3UfLiRDJ5EDd49zg6O9wclZ7kUMv2WRFr4HKjXp/5t8JZ11QbQfUS6/cRCKGwYhtNAY88kQ==",
-+      "cpu": [
-+        "arm64"
-+      ],
-       "dev": true,
--      "license": "ISC",
--      "dependencies": {
--        "brace-expansion": "^1.1.7"
--      },
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "darwin"
-+      ],
-       "engines": {
--        "node": "*"
-+        "node": ">=12"
-       }
-     },
--    "node_modules/@eslint/js": {
--      "version": "8.57.0",
--      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.0.tgz",
--      "integrity": "sha512-Ys+3g2TaW7gADOJzPt83SJtCDhMjndcDMFVQ/Tj9iA1BfJzFKD9mAUXT3OenpuPHbI6P/myECxRJrofUsDx/5g==",
-+    "node_modules/@esbuild/darwin-x64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.21.5.tgz",
-+      "integrity": "sha512-se/JjF8NlmKVG4kNIuyWMV/22ZaerB+qaSi5MdrXtd6R08kvs2qCN4C09miupktDitvh8jRFflwGFBQcxZRjbw==",
-+      "cpu": [
-+        "x64"
-+      ],
-       "dev": true,
-       "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "darwin"
-+      ],
-       "engines": {
--        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-+        "node": ">=12"
-       }
-     },
--    "node_modules/@humanwhocodes/config-array": {
--      "version": "0.11.14",
--      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.11.14.tgz",
--      "integrity": "sha512-3T8LkOmg45BV5FICb15QQMsyUSWrQ8AygVfC7ZG32zOalnqrilm018ZVCw0eapXux8FtA33q8PSRSstjee3jSg==",
--      "deprecated": "Use @eslint/config-array instead",
-+    "node_modules/@esbuild/freebsd-arm64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.21.5.tgz",
-+      "integrity": "sha512-5JcRxxRDUJLX8JXp/wcBCy3pENnCgBR9bN6JsY4OmhfUtIHe3ZW0mawA7+RDAcMLrMIZaf03NlQiX9DGyB8h4g==",
-+      "cpu": [
-+        "arm64"
-+      ],
-       "dev": true,
--      "license": "Apache-2.0",
--      "dependencies": {
--        "@humanwhocodes/object-schema": "^2.0.2",
--        "debug": "^4.3.1",
--        "minimatch": "^3.0.5"
--      },
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "freebsd"
-+      ],
-       "engines": {
--        "node": ">=10.10.0"
-+        "node": ">=12"
-       }
-     },
--    "node_modules/@humanwhocodes/config-array/node_modules/brace-expansion": {
--      "version": "1.1.12",
--      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
--      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
-+    "node_modules/@esbuild/freebsd-x64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.21.5.tgz",
-+      "integrity": "sha512-J95kNBj1zkbMXtHVH29bBriQygMXqoVQOQYA+ISs0/2l3T9/kj42ow2mpqerRBxDJnmkUDCaQT/dfNXWX/ZZCQ==",
-+      "cpu": [
-+        "x64"
-+      ],
-       "dev": true,
-       "license": "MIT",
--      "dependencies": {
--        "balanced-match": "^1.0.0",
--        "concat-map": "0.0.1"
-+      "optional": true,
-+      "os": [
-+        "freebsd"
-+      ],
-+      "engines": {
-+        "node": ">=12"
-       }
-     },
--    "node_modules/@humanwhocodes/config-array/node_modules/minimatch": {
--      "version": "3.1.2",
--      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
--      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
-+    "node_modules/@esbuild/linux-arm": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.21.5.tgz",
-+      "integrity": "sha512-bPb5AHZtbeNGjCKVZ9UGqGwo8EUu4cLq68E95A53KlxAPRmUyYv2D6F0uUI65XisGOL1hBP5mTronbgo+0bFcA==",
-+      "cpu": [
-+        "arm"
-+      ],
-       "dev": true,
--      "license": "ISC",
--      "dependencies": {
--        "brace-expansion": "^1.1.7"
--      },
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ],
-       "engines": {
--        "node": "*"
-+        "node": ">=12"
-       }
-     },
--    "node_modules/@humanwhocodes/module-importer": {
--      "version": "1.0.1",
--      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
--      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
-+    "node_modules/@esbuild/linux-arm64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.21.5.tgz",
-+      "integrity": "sha512-ibKvmyYzKsBeX8d8I7MH/TMfWDXBF3db4qM6sy+7re0YXya+K1cem3on9XgdT2EQGMu4hQyZhan7TeQ8XkGp4Q==",
-+      "cpu": [
-+        "arm64"
-+      ],
-       "dev": true,
--      "license": "Apache-2.0",
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ],
-       "engines": {
--        "node": ">=12.22"
--      },
--      "funding": {
--        "type": "github",
--        "url": "https://github.com/sponsors/nzakas"
-+        "node": ">=12"
-       }
-     },
--    "node_modules/@humanwhocodes/object-schema": {
--      "version": "2.0.3",
--      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
--      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
--      "deprecated": "Use @eslint/object-schema instead",
-+    "node_modules/@esbuild/linux-ia32": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.21.5.tgz",
-+      "integrity": "sha512-YvjXDqLRqPDl2dvRODYmmhz4rPeVKYvppfGYKSNGdyZkA01046pLWyRKKI3ax8fbJoK5QbxblURkwK/MWY18Tg==",
-+      "cpu": [
-+        "ia32"
-+      ],
-       "dev": true,
--      "license": "BSD-3-Clause"
--    },
--    "node_modules/@ioredis/commands": {
--      "version": "1.4.0",
--      "resolved": "https://registry.npmjs.org/@ioredis/commands/-/commands-1.4.0.tgz",
--      "integrity": "sha512-aFT2yemJJo+TZCmieA7qnYGQooOS7QfNmYrzGtsYd3g9j5iDP8AimYYAesf79ohjbLG12XxC4nG5DyEnC88AsQ==",
--      "license": "MIT"
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ],
-+      "engines": {
-+        "node": ">=12"
-+      }
-     },
--    "node_modules/@isaacs/cliui": {
--      "version": "8.0.2",
--      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
--      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
-+    "node_modules/@esbuild/linux-loong64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.21.5.tgz",
-+      "integrity": "sha512-uHf1BmMG8qEvzdrzAqg2SIG/02+4/DHB6a9Kbya0XDvwDEKCoC8ZRWI5JJvNdUjtciBGFQ5PuBlpEOXQj+JQSg==",
-+      "cpu": [
-+        "loong64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ],
-+      "engines": {
-+        "node": ">=12"
-+      }
-+    },
-+    "node_modules/@esbuild/linux-mips64el": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.21.5.tgz",
-+      "integrity": "sha512-IajOmO+KJK23bj52dFSNCMsz1QP1DqM6cwLUv3W1QwyxkyIWecfafnI555fvSGqEKwjMXVLokcV5ygHW5b3Jbg==",
-+      "cpu": [
-+        "mips64el"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ],
-+      "engines": {
-+        "node": ">=12"
-+      }
-+    },
-+    "node_modules/@esbuild/linux-ppc64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.21.5.tgz",
-+      "integrity": "sha512-1hHV/Z4OEfMwpLO8rp7CvlhBDnjsC3CttJXIhBi+5Aj5r+MBvy4egg7wCbe//hSsT+RvDAG7s81tAvpL2XAE4w==",
-+      "cpu": [
-+        "ppc64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ],
-+      "engines": {
-+        "node": ">=12"
-+      }
-+    },
-+    "node_modules/@esbuild/linux-riscv64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.21.5.tgz",
-+      "integrity": "sha512-2HdXDMd9GMgTGrPWnJzP2ALSokE/0O5HhTUvWIbD3YdjME8JwvSCnNGBnTThKGEB91OZhzrJ4qIIxk/SBmyDDA==",
-+      "cpu": [
-+        "riscv64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ],
-+      "engines": {
-+        "node": ">=12"
-+      }
-+    },
-+    "node_modules/@esbuild/linux-s390x": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.21.5.tgz",
-+      "integrity": "sha512-zus5sxzqBJD3eXxwvjN1yQkRepANgxE9lgOW2qLnmr8ikMTphkjgXu1HR01K4FJg8h1kEEDAqDcZQtbrRnB41A==",
-+      "cpu": [
-+        "s390x"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ],
-+      "engines": {
-+        "node": ">=12"
-+      }
-+    },
-+    "node_modules/@esbuild/linux-x64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.21.5.tgz",
-+      "integrity": "sha512-1rYdTpyv03iycF1+BhzrzQJCdOuAOtaqHTWJZCWvijKD2N5Xu0TtVC8/+1faWqcP9iBCWOmjmhoH94dH82BxPQ==",
-+      "cpu": [
-+        "x64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ],
-+      "engines": {
-+        "node": ">=12"
-+      }
-+    },
-+    "node_modules/@esbuild/netbsd-x64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.21.5.tgz",
-+      "integrity": "sha512-Woi2MXzXjMULccIwMnLciyZH4nCIMpWQAs049KEeMvOcNADVxo0UBIQPfSmxB3CWKedngg7sWZdLvLczpe0tLg==",
-+      "cpu": [
-+        "x64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "netbsd"
-+      ],
-+      "engines": {
-+        "node": ">=12"
-+      }
-+    },
-+    "node_modules/@esbuild/openbsd-x64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.21.5.tgz",
-+      "integrity": "sha512-HLNNw99xsvx12lFBUwoT8EVCsSvRNDVxNpjZ7bPn947b8gJPzeHWyNVhFsaerc0n3TsbOINvRP2byTZ5LKezow==",
-+      "cpu": [
-+        "x64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "openbsd"
-+      ],
-+      "engines": {
-+        "node": ">=12"
-+      }
-+    },
-+    "node_modules/@esbuild/sunos-x64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.21.5.tgz",
-+      "integrity": "sha512-6+gjmFpfy0BHU5Tpptkuh8+uw3mnrvgs+dSPQXQOv3ekbordwnzTVEb4qnIvQcYXq6gzkyTnoZ9dZG+D4garKg==",
-+      "cpu": [
-+        "x64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "sunos"
-+      ],
-+      "engines": {
-+        "node": ">=12"
-+      }
-+    },
-+    "node_modules/@esbuild/win32-arm64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.21.5.tgz",
-+      "integrity": "sha512-Z0gOTd75VvXqyq7nsl93zwahcTROgqvuAcYDUr+vOv8uHhNSKROyU961kgtCD1e95IqPKSQKH7tBTslnS3tA8A==",
-+      "cpu": [
-+        "arm64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "win32"
-+      ],
-+      "engines": {
-+        "node": ">=12"
-+      }
-+    },
-+    "node_modules/@esbuild/win32-ia32": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.21.5.tgz",
-+      "integrity": "sha512-SWXFF1CL2RVNMaVs+BBClwtfZSvDgtL//G/smwAc5oVK/UPu2Gu9tIaRgFmYFFKrmg3SyAjSrElf0TiJ1v8fYA==",
-+      "cpu": [
-+        "ia32"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "win32"
-+      ],
-+      "engines": {
-+        "node": ">=12"
-+      }
-+    },
-+    "node_modules/@esbuild/win32-x64": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.21.5.tgz",
-+      "integrity": "sha512-tQd/1efJuzPC6rCFwEvLtci/xNFcTZknmXs98FYDfGE4wP9ClFV98nyKrzJKVPMhdDnjzLhdUyMX4PsQAPjwIw==",
-+      "cpu": [
-+        "x64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "win32"
-+      ],
-+      "engines": {
-+        "node": ">=12"
-+      }
-+    },
-+    "node_modules/@eslint-community/eslint-utils": {
-+      "version": "4.9.0",
-+      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.9.0.tgz",
-+      "integrity": "sha512-ayVFHdtZ+hsq1t2Dy24wCmGXGe4q9Gu3smhLYALJrr473ZH27MsnSL+LKUlimp4BWJqMDMLmPpx/Q9R3OAlL4g==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "eslint-visitor-keys": "^3.4.3"
-+      },
-+      "engines": {
-+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-+      },
-+      "funding": {
-+        "url": "https://opencollective.com/eslint"
-+      },
-+      "peerDependencies": {
-+        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
-+      }
-+    },
-+    "node_modules/@eslint-community/regexpp": {
-+      "version": "4.12.1",
-+      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
-+      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
-+      "dev": true,
-+      "license": "MIT",
-+      "engines": {
-+        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
-+      }
-+    },
-+    "node_modules/@eslint/eslintrc": {
-+      "version": "2.1.4",
-+      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
-+      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "ajv": "^6.12.4",
-+        "debug": "^4.3.2",
-+        "espree": "^9.6.0",
-+        "globals": "^13.19.0",
-+        "ignore": "^5.2.0",
-+        "import-fresh": "^3.2.1",
-+        "js-yaml": "^4.1.0",
-+        "minimatch": "^3.1.2",
-+        "strip-json-comments": "^3.1.1"
-+      },
-+      "engines": {
-+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-+      },
-+      "funding": {
-+        "url": "https://opencollective.com/eslint"
-+      }
-+    },
-+    "node_modules/@eslint/eslintrc/node_modules/brace-expansion": {
-+      "version": "1.1.12",
-+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
-+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "balanced-match": "^1.0.0",
-+        "concat-map": "0.0.1"
-+      }
-+    },
-+    "node_modules/@eslint/eslintrc/node_modules/minimatch": {
-+      "version": "3.1.2",
-+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
-+      "dev": true,
-+      "license": "ISC",
-+      "dependencies": {
-+        "brace-expansion": "^1.1.7"
-+      },
-+      "engines": {
-+        "node": "*"
-+      }
-+    },
-+    "node_modules/@eslint/js": {
-+      "version": "8.57.0",
-+      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.0.tgz",
-+      "integrity": "sha512-Ys+3g2TaW7gADOJzPt83SJtCDhMjndcDMFVQ/Tj9iA1BfJzFKD9mAUXT3OenpuPHbI6P/myECxRJrofUsDx/5g==",
-+      "dev": true,
-+      "license": "MIT",
-+      "engines": {
-+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-+      }
-+    },
-+    "node_modules/@humanwhocodes/config-array": {
-+      "version": "0.11.14",
-+      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.11.14.tgz",
-+      "integrity": "sha512-3T8LkOmg45BV5FICb15QQMsyUSWrQ8AygVfC7ZG32zOalnqrilm018ZVCw0eapXux8FtA33q8PSRSstjee3jSg==",
-+      "deprecated": "Use @eslint/config-array instead",
-+      "dev": true,
-+      "license": "Apache-2.0",
-+      "dependencies": {
-+        "@humanwhocodes/object-schema": "^2.0.2",
-+        "debug": "^4.3.1",
-+        "minimatch": "^3.0.5"
-+      },
-+      "engines": {
-+        "node": ">=10.10.0"
-+      }
-+    },
-+    "node_modules/@humanwhocodes/config-array/node_modules/brace-expansion": {
-+      "version": "1.1.12",
-+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
-+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "balanced-match": "^1.0.0",
-+        "concat-map": "0.0.1"
-+      }
-+    },
-+    "node_modules/@humanwhocodes/config-array/node_modules/minimatch": {
-+      "version": "3.1.2",
-+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
-+      "dev": true,
-+      "license": "ISC",
-+      "dependencies": {
-+        "brace-expansion": "^1.1.7"
-+      },
-+      "engines": {
-+        "node": "*"
-+      }
-+    },
-+    "node_modules/@humanwhocodes/module-importer": {
-+      "version": "1.0.1",
-+      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
-+      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
-+      "dev": true,
-+      "license": "Apache-2.0",
-+      "engines": {
-+        "node": ">=12.22"
-+      },
-+      "funding": {
-+        "type": "github",
-+        "url": "https://github.com/sponsors/nzakas"
-+      }
-+    },
-+    "node_modules/@humanwhocodes/object-schema": {
-+      "version": "2.0.3",
-+      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
-+      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
-+      "deprecated": "Use @eslint/object-schema instead",
-+      "dev": true,
-+      "license": "BSD-3-Clause"
-+    },
-+    "node_modules/@ioredis/commands": {
-+      "version": "1.4.0",
-+      "resolved": "https://registry.npmjs.org/@ioredis/commands/-/commands-1.4.0.tgz",
-+      "integrity": "sha512-aFT2yemJJo+TZCmieA7qnYGQooOS7QfNmYrzGtsYd3g9j5iDP8AimYYAesf79ohjbLG12XxC4nG5DyEnC88AsQ==",
-+      "license": "MIT"
-+    },
-+    "node_modules/@isaacs/cliui": {
-+      "version": "8.0.2",
-+      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
-+      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
-       "dev": true,
-       "license": "ISC",
-       "dependencies": {
-@@ -995,6 +1459,16 @@
-         "node": ">=12"
-       }
-     },
-+    "node_modules/@istanbuljs/schema": {
-+      "version": "0.1.3",
-+      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
-+      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
-+      "dev": true,
-+      "license": "MIT",
-+      "engines": {
-+        "node": ">=8"
-+      }
-+    },
-     "node_modules/@jridgewell/gen-mapping": {
-       "version": "0.3.13",
-       "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
-@@ -1353,102 +1827,410 @@
-         "node": ">= 8"
-       }
-     },
--    "node_modules/@nolyfill/is-core-module": {
--      "version": "1.0.39",
--      "resolved": "https://registry.npmjs.org/@nolyfill/is-core-module/-/is-core-module-1.0.39.tgz",
--      "integrity": "sha512-nn5ozdjYQpUCZlWGuxcJY/KpxkWQs4DcbMCmKojjyrYDEAGy4Ce19NN4v5MduafTwJlbKc99UA8YhSVqq9yPZA==",
-+    "node_modules/@nolyfill/is-core-module": {
-+      "version": "1.0.39",
-+      "resolved": "https://registry.npmjs.org/@nolyfill/is-core-module/-/is-core-module-1.0.39.tgz",
-+      "integrity": "sha512-nn5ozdjYQpUCZlWGuxcJY/KpxkWQs4DcbMCmKojjyrYDEAGy4Ce19NN4v5MduafTwJlbKc99UA8YhSVqq9yPZA==",
-+      "dev": true,
-+      "license": "MIT",
-+      "engines": {
-+        "node": ">=12.4.0"
-+      }
-+    },
-+    "node_modules/@pkgjs/parseargs": {
-+      "version": "0.11.0",
-+      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
-+      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "engines": {
-+        "node": ">=14"
-+      }
-+    },
-+    "node_modules/@polka/url": {
-+      "version": "1.0.0-next.29",
-+      "resolved": "https://registry.npmjs.org/@polka/url/-/url-1.0.0-next.29.tgz",
-+      "integrity": "sha512-wwQAWhWSuHaag8c4q/KN/vCoeOJYshAIvMQwD4GpSb3OiZklFfvAgmj0VCBBImRpuF/aFgIRzllXlVX93Jevww==",
-+      "dev": true,
-+      "license": "MIT"
-+    },
-+    "node_modules/@prisma/client": {
-+      "version": "5.22.0",
-+      "resolved": "https://registry.npmjs.org/@prisma/client/-/client-5.22.0.tgz",
-+      "integrity": "sha512-M0SVXfyHnQREBKxCgyo7sffrKttwE6R8PMq330MIUF0pTwjUhLbW84pFDlf06B27XyCR++VtjugEnIHdr07SVA==",
-+      "dev": true,
-+      "hasInstallScript": true,
-+      "license": "Apache-2.0",
-+      "engines": {
-+        "node": ">=16.13"
-+      },
-+      "peerDependencies": {
-+        "prisma": "*"
-+      },
-+      "peerDependenciesMeta": {
-+        "prisma": {
-+          "optional": true
-+        }
-+      }
-+    },
-+    "node_modules/@prisma/debug": {
-+      "version": "5.22.0",
-+      "resolved": "https://registry.npmjs.org/@prisma/debug/-/debug-5.22.0.tgz",
-+      "integrity": "sha512-AUt44v3YJeggO2ZU5BkXI7M4hu9BF2zzH2iF2V5pyXT/lRTyWiElZ7It+bRH1EshoMRxHgpYg4VB6rCM+mG5jQ==",
-+      "dev": true,
-+      "license": "Apache-2.0"
-+    },
-+    "node_modules/@prisma/engines": {
-+      "version": "5.22.0",
-+      "resolved": "https://registry.npmjs.org/@prisma/engines/-/engines-5.22.0.tgz",
-+      "integrity": "sha512-UNjfslWhAt06kVL3CjkuYpHAWSO6L4kDCVPegV6itt7nD1kSJavd3vhgAEhjglLJJKEdJ7oIqDJ+yHk6qO8gPA==",
-+      "dev": true,
-+      "hasInstallScript": true,
-+      "license": "Apache-2.0",
-+      "dependencies": {
-+        "@prisma/debug": "5.22.0",
-+        "@prisma/engines-version": "5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2",
-+        "@prisma/fetch-engine": "5.22.0",
-+        "@prisma/get-platform": "5.22.0"
-+      }
-+    },
-+    "node_modules/@prisma/engines-version": {
-+      "version": "5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2",
-+      "resolved": "https://registry.npmjs.org/@prisma/engines-version/-/engines-version-5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2.tgz",
-+      "integrity": "sha512-2PTmxFR2yHW/eB3uqWtcgRcgAbG1rwG9ZriSvQw+nnb7c4uCr3RAcGMb6/zfE88SKlC1Nj2ziUvc96Z379mHgQ==",
-+      "dev": true,
-+      "license": "Apache-2.0"
-+    },
-+    "node_modules/@prisma/fetch-engine": {
-+      "version": "5.22.0",
-+      "resolved": "https://registry.npmjs.org/@prisma/fetch-engine/-/fetch-engine-5.22.0.tgz",
-+      "integrity": "sha512-bkrD/Mc2fSvkQBV5EpoFcZ87AvOgDxbG99488a5cexp5Ccny+UM6MAe/UFkUC0wLYD9+9befNOqGiIJhhq+HbA==",
-+      "dev": true,
-+      "license": "Apache-2.0",
-+      "dependencies": {
-+        "@prisma/debug": "5.22.0",
-+        "@prisma/engines-version": "5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2",
-+        "@prisma/get-platform": "5.22.0"
-+      }
-+    },
-+    "node_modules/@prisma/get-platform": {
-+      "version": "5.22.0",
-+      "resolved": "https://registry.npmjs.org/@prisma/get-platform/-/get-platform-5.22.0.tgz",
-+      "integrity": "sha512-pHhpQdr1UPFpt+zFfnPazhulaZYCUqeIcPpJViYoq9R+D/yw4fjE+CtnsnKzPYm0ddUbeXUzjGVGIRVgPDCk4Q==",
-+      "dev": true,
-+      "license": "Apache-2.0",
-+      "dependencies": {
-+        "@prisma/debug": "5.22.0"
-+      }
-+    },
-+    "node_modules/@rollup/rollup-android-arm-eabi": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.52.4.tgz",
-+      "integrity": "sha512-BTm2qKNnWIQ5auf4deoetINJm2JzvihvGb9R6K/ETwKLql/Bb3Eg2H1FBp1gUb4YGbydMA3jcmQTR73q7J+GAA==",
-+      "cpu": [
-+        "arm"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "android"
-+      ]
-+    },
-+    "node_modules/@rollup/rollup-android-arm64": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.52.4.tgz",
-+      "integrity": "sha512-P9LDQiC5vpgGFgz7GSM6dKPCiqR3XYN1WwJKA4/BUVDjHpYsf3iBEmVz62uyq20NGYbiGPR5cNHI7T1HqxNs2w==",
-+      "cpu": [
-+        "arm64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "android"
-+      ]
-+    },
-+    "node_modules/@rollup/rollup-darwin-arm64": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.52.4.tgz",
-+      "integrity": "sha512-QRWSW+bVccAvZF6cbNZBJwAehmvG9NwfWHwMy4GbWi/BQIA/laTIktebT2ipVjNncqE6GLPxOok5hsECgAxGZg==",
-+      "cpu": [
-+        "arm64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "darwin"
-+      ]
-+    },
-+    "node_modules/@rollup/rollup-darwin-x64": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.52.4.tgz",
-+      "integrity": "sha512-hZgP05pResAkRJxL1b+7yxCnXPGsXU0fG9Yfd6dUaoGk+FhdPKCJ5L1Sumyxn8kvw8Qi5PvQ8ulenUbRjzeCTw==",
-+      "cpu": [
-+        "x64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "darwin"
-+      ]
-+    },
-+    "node_modules/@rollup/rollup-freebsd-arm64": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.52.4.tgz",
-+      "integrity": "sha512-xmc30VshuBNUd58Xk4TKAEcRZHaXlV+tCxIXELiE9sQuK3kG8ZFgSPi57UBJt8/ogfhAF5Oz4ZSUBN77weM+mQ==",
-+      "cpu": [
-+        "arm64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "freebsd"
-+      ]
-+    },
-+    "node_modules/@rollup/rollup-freebsd-x64": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.52.4.tgz",
-+      "integrity": "sha512-WdSLpZFjOEqNZGmHflxyifolwAiZmDQzuOzIq9L27ButpCVpD7KzTRtEG1I0wMPFyiyUdOO+4t8GvrnBLQSwpw==",
-+      "cpu": [
-+        "x64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "freebsd"
-+      ]
-+    },
-+    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.52.4.tgz",
-+      "integrity": "sha512-xRiOu9Of1FZ4SxVbB0iEDXc4ddIcjCv2aj03dmW8UrZIW7aIQ9jVJdLBIhxBI+MaTnGAKyvMwPwQnoOEvP7FgQ==",
-+      "cpu": [
-+        "arm"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ]
-+    },
-+    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.52.4.tgz",
-+      "integrity": "sha512-FbhM2p9TJAmEIEhIgzR4soUcsW49e9veAQCziwbR+XWB2zqJ12b4i/+hel9yLiD8pLncDH4fKIPIbt5238341Q==",
-+      "cpu": [
-+        "arm"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ]
-+    },
-+    "node_modules/@rollup/rollup-linux-arm64-gnu": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.52.4.tgz",
-+      "integrity": "sha512-4n4gVwhPHR9q/g8lKCyz0yuaD0MvDf7dV4f9tHt0C73Mp8h38UCtSCSE6R9iBlTbXlmA8CjpsZoujhszefqueg==",
-+      "cpu": [
-+        "arm64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ]
-+    },
-+    "node_modules/@rollup/rollup-linux-arm64-musl": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.52.4.tgz",
-+      "integrity": "sha512-u0n17nGA0nvi/11gcZKsjkLj1QIpAuPFQbR48Subo7SmZJnGxDpspyw2kbpuoQnyK+9pwf3pAoEXerJs/8Mi9g==",
-+      "cpu": [
-+        "arm64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ]
-+    },
-+    "node_modules/@rollup/rollup-linux-loong64-gnu": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loong64-gnu/-/rollup-linux-loong64-gnu-4.52.4.tgz",
-+      "integrity": "sha512-0G2c2lpYtbTuXo8KEJkDkClE/+/2AFPdPAbmaHoE870foRFs4pBrDehilMcrSScrN/fB/1HTaWO4bqw+ewBzMQ==",
-+      "cpu": [
-+        "loong64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ]
-+    },
-+    "node_modules/@rollup/rollup-linux-ppc64-gnu": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.52.4.tgz",
-+      "integrity": "sha512-teSACug1GyZHmPDv14VNbvZFX779UqWTsd7KtTM9JIZRDI5NUwYSIS30kzI8m06gOPB//jtpqlhmraQ68b5X2g==",
-+      "cpu": [
-+        "ppc64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ]
-+    },
-+    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.52.4.tgz",
-+      "integrity": "sha512-/MOEW3aHjjs1p4Pw1Xk4+3egRevx8Ji9N6HUIA1Ifh8Q+cg9dremvFCUbOX2Zebz80BwJIgCBUemjqhU5XI5Eg==",
-+      "cpu": [
-+        "riscv64"
-+      ],
-+      "dev": true,
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ]
-+    },
-+    "node_modules/@rollup/rollup-linux-riscv64-musl": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.52.4.tgz",
-+      "integrity": "sha512-1HHmsRyh845QDpEWzOFtMCph5Ts+9+yllCrREuBR/vg2RogAQGGBRC8lDPrPOMnrdOJ+mt1WLMOC2Kao/UwcvA==",
-+      "cpu": [
-+        "riscv64"
-+      ],
-       "dev": true,
-       "license": "MIT",
--      "engines": {
--        "node": ">=12.4.0"
--      }
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ]
-     },
--    "node_modules/@pkgjs/parseargs": {
--      "version": "0.11.0",
--      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
--      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
-+    "node_modules/@rollup/rollup-linux-s390x-gnu": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.52.4.tgz",
-+      "integrity": "sha512-seoeZp4L/6D1MUyjWkOMRU6/iLmCU2EjbMTyAG4oIOs1/I82Y5lTeaxW0KBfkUdHAWN7j25bpkt0rjnOgAcQcA==",
-+      "cpu": [
-+        "s390x"
-+      ],
-       "dev": true,
-       "license": "MIT",
-       "optional": true,
--      "engines": {
--        "node": ">=14"
--      }
-+      "os": [
-+        "linux"
-+      ]
-     },
--    "node_modules/@polka/url": {
--      "version": "1.0.0-next.29",
--      "resolved": "https://registry.npmjs.org/@polka/url/-/url-1.0.0-next.29.tgz",
--      "integrity": "sha512-wwQAWhWSuHaag8c4q/KN/vCoeOJYshAIvMQwD4GpSb3OiZklFfvAgmj0VCBBImRpuF/aFgIRzllXlVX93Jevww==",
-+    "node_modules/@rollup/rollup-linux-x64-gnu": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.52.4.tgz",
-+      "integrity": "sha512-Wi6AXf0k0L7E2gteNsNHUs7UMwCIhsCTs6+tqQ5GPwVRWMaflqGec4Sd8n6+FNFDw9vGcReqk2KzBDhCa1DLYg==",
-+      "cpu": [
-+        "x64"
-+      ],
-       "dev": true,
--      "license": "MIT"
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ]
-     },
--    "node_modules/@prisma/client": {
--      "version": "5.22.0",
--      "resolved": "https://registry.npmjs.org/@prisma/client/-/client-5.22.0.tgz",
--      "integrity": "sha512-M0SVXfyHnQREBKxCgyo7sffrKttwE6R8PMq330MIUF0pTwjUhLbW84pFDlf06B27XyCR++VtjugEnIHdr07SVA==",
-+    "node_modules/@rollup/rollup-linux-x64-musl": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.52.4.tgz",
-+      "integrity": "sha512-dtBZYjDmCQ9hW+WgEkaffvRRCKm767wWhxsFW3Lw86VXz/uJRuD438/XvbZT//B96Vs8oTA8Q4A0AfHbrxP9zw==",
-+      "cpu": [
-+        "x64"
-+      ],
-       "dev": true,
--      "hasInstallScript": true,
--      "license": "Apache-2.0",
--      "engines": {
--        "node": ">=16.13"
--      },
--      "peerDependencies": {
--        "prisma": "*"
--      },
--      "peerDependenciesMeta": {
--        "prisma": {
--          "optional": true
--        }
--      }
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "linux"
-+      ]
-     },
--    "node_modules/@prisma/debug": {
--      "version": "5.22.0",
--      "resolved": "https://registry.npmjs.org/@prisma/debug/-/debug-5.22.0.tgz",
--      "integrity": "sha512-AUt44v3YJeggO2ZU5BkXI7M4hu9BF2zzH2iF2V5pyXT/lRTyWiElZ7It+bRH1EshoMRxHgpYg4VB6rCM+mG5jQ==",
-+    "node_modules/@rollup/rollup-openharmony-arm64": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-openharmony-arm64/-/rollup-openharmony-arm64-4.52.4.tgz",
-+      "integrity": "sha512-1ox+GqgRWqaB1RnyZXL8PD6E5f7YyRUJYnCqKpNzxzP0TkaUh112NDrR9Tt+C8rJ4x5G9Mk8PQR3o7Ku2RKqKA==",
-+      "cpu": [
-+        "arm64"
-+      ],
-       "dev": true,
--      "license": "Apache-2.0"
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "openharmony"
-+      ]
-     },
--    "node_modules/@prisma/engines": {
--      "version": "5.22.0",
--      "resolved": "https://registry.npmjs.org/@prisma/engines/-/engines-5.22.0.tgz",
--      "integrity": "sha512-UNjfslWhAt06kVL3CjkuYpHAWSO6L4kDCVPegV6itt7nD1kSJavd3vhgAEhjglLJJKEdJ7oIqDJ+yHk6qO8gPA==",
-+    "node_modules/@rollup/rollup-win32-arm64-msvc": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.52.4.tgz",
-+      "integrity": "sha512-8GKr640PdFNXwzIE0IrkMWUNUomILLkfeHjXBi/nUvFlpZP+FA8BKGKpacjW6OUUHaNI6sUURxR2U2g78FOHWQ==",
-+      "cpu": [
-+        "arm64"
-+      ],
-       "dev": true,
--      "hasInstallScript": true,
--      "license": "Apache-2.0",
--      "dependencies": {
--        "@prisma/debug": "5.22.0",
--        "@prisma/engines-version": "5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2",
--        "@prisma/fetch-engine": "5.22.0",
--        "@prisma/get-platform": "5.22.0"
--      }
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "win32"
-+      ]
-     },
--    "node_modules/@prisma/engines-version": {
--      "version": "5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2",
--      "resolved": "https://registry.npmjs.org/@prisma/engines-version/-/engines-version-5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2.tgz",
--      "integrity": "sha512-2PTmxFR2yHW/eB3uqWtcgRcgAbG1rwG9ZriSvQw+nnb7c4uCr3RAcGMb6/zfE88SKlC1Nj2ziUvc96Z379mHgQ==",
-+    "node_modules/@rollup/rollup-win32-ia32-msvc": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.52.4.tgz",
-+      "integrity": "sha512-AIy/jdJ7WtJ/F6EcfOb2GjR9UweO0n43jNObQMb6oGxkYTfLcnN7vYYpG+CN3lLxrQkzWnMOoNSHTW54pgbVxw==",
-+      "cpu": [
-+        "ia32"
-+      ],
-       "dev": true,
--      "license": "Apache-2.0"
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "win32"
-+      ]
-     },
--    "node_modules/@prisma/fetch-engine": {
--      "version": "5.22.0",
--      "resolved": "https://registry.npmjs.org/@prisma/fetch-engine/-/fetch-engine-5.22.0.tgz",
--      "integrity": "sha512-bkrD/Mc2fSvkQBV5EpoFcZ87AvOgDxbG99488a5cexp5Ccny+UM6MAe/UFkUC0wLYD9+9befNOqGiIJhhq+HbA==",
-+    "node_modules/@rollup/rollup-win32-x64-gnu": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-gnu/-/rollup-win32-x64-gnu-4.52.4.tgz",
-+      "integrity": "sha512-UF9KfsH9yEam0UjTwAgdK0anlQ7c8/pWPU2yVjyWcF1I1thABt6WXE47cI71pGiZ8wGvxohBoLnxM04L/wj8mQ==",
-+      "cpu": [
-+        "x64"
-+      ],
-       "dev": true,
--      "license": "Apache-2.0",
--      "dependencies": {
--        "@prisma/debug": "5.22.0",
--        "@prisma/engines-version": "5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2",
--        "@prisma/get-platform": "5.22.0"
--      }
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "win32"
-+      ]
-     },
--    "node_modules/@prisma/get-platform": {
--      "version": "5.22.0",
--      "resolved": "https://registry.npmjs.org/@prisma/get-platform/-/get-platform-5.22.0.tgz",
--      "integrity": "sha512-pHhpQdr1UPFpt+zFfnPazhulaZYCUqeIcPpJViYoq9R+D/yw4fjE+CtnsnKzPYm0ddUbeXUzjGVGIRVgPDCk4Q==",
-+    "node_modules/@rollup/rollup-win32-x64-msvc": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.52.4.tgz",
-+      "integrity": "sha512-bf9PtUa0u8IXDVxzRToFQKsNCRz9qLYfR/MpECxl4mRoWYjAeFjgxj1XdZr2M/GNVpT05p+LgQOHopYDlUu6/w==",
-+      "cpu": [
-+        "x64"
-+      ],
-       "dev": true,
--      "license": "Apache-2.0",
--      "dependencies": {
--        "@prisma/debug": "5.22.0"
--      }
-+      "license": "MIT",
-+      "optional": true,
-+      "os": [
-+        "win32"
-+      ]
-     },
-     "node_modules/@rtsao/scc": {
-       "version": "1.1.0",
-@@ -2131,6 +2913,13 @@
-         "tslib": "^2.4.0"
-       }
-     },
-+    "node_modules/@types/estree": {
-+      "version": "1.0.8",
-+      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
-+      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
-+      "dev": true,
-+      "license": "MIT"
-+    },
-     "node_modules/@types/ioredis": {
-       "version": "5.0.0",
-       "resolved": "https://registry.npmjs.org/@types/ioredis/-/ioredis-5.0.0.tgz",
-@@ -2736,6 +3525,152 @@
-         "win32"
-       ]
-     },
-+    "node_modules/@vitest/coverage-v8": {
-+      "version": "2.1.9",
-+      "resolved": "https://registry.npmjs.org/@vitest/coverage-v8/-/coverage-v8-2.1.9.tgz",
-+      "integrity": "sha512-Z2cOr0ksM00MpEfyVE8KXIYPEcBFxdbLSs56L8PO0QQMxt/6bDj45uQfxoc96v05KW3clk7vvgP0qfDit9DmfQ==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "@ampproject/remapping": "^2.3.0",
-+        "@bcoe/v8-coverage": "^0.2.3",
-+        "debug": "^4.3.7",
-+        "istanbul-lib-coverage": "^3.2.2",
-+        "istanbul-lib-report": "^3.0.1",
-+        "istanbul-lib-source-maps": "^5.0.6",
-+        "istanbul-reports": "^3.1.7",
-+        "magic-string": "^0.30.12",
-+        "magicast": "^0.3.5",
-+        "std-env": "^3.8.0",
-+        "test-exclude": "^7.0.1",
-+        "tinyrainbow": "^1.2.0"
-+      },
-+      "funding": {
-+        "url": "https://opencollective.com/vitest"
-+      },
-+      "peerDependencies": {
-+        "@vitest/browser": "2.1.9",
-+        "vitest": "2.1.9"
-+      },
-+      "peerDependenciesMeta": {
-+        "@vitest/browser": {
-+          "optional": true
-+        }
-+      }
-+    },
-+    "node_modules/@vitest/expect": {
-+      "version": "2.1.9",
-+      "resolved": "https://registry.npmjs.org/@vitest/expect/-/expect-2.1.9.tgz",
-+      "integrity": "sha512-UJCIkTBenHeKT1TTlKMJWy1laZewsRIzYighyYiJKZreqtdxSos/S1t+ktRMQWu2CKqaarrkeszJx1cgC5tGZw==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "@vitest/spy": "2.1.9",
-+        "@vitest/utils": "2.1.9",
-+        "chai": "^5.1.2",
-+        "tinyrainbow": "^1.2.0"
-+      },
-+      "funding": {
-+        "url": "https://opencollective.com/vitest"
-+      }
-+    },
-+    "node_modules/@vitest/mocker": {
-+      "version": "2.1.9",
-+      "resolved": "https://registry.npmjs.org/@vitest/mocker/-/mocker-2.1.9.tgz",
-+      "integrity": "sha512-tVL6uJgoUdi6icpxmdrn5YNo3g3Dxv+IHJBr0GXHaEdTcw3F+cPKnsXFhli6nO+f/6SDKPHEK1UN+k+TQv0Ehg==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "@vitest/spy": "2.1.9",
-+        "estree-walker": "^3.0.3",
-+        "magic-string": "^0.30.12"
-+      },
-+      "funding": {
-+        "url": "https://opencollective.com/vitest"
-+      },
-+      "peerDependencies": {
-+        "msw": "^2.4.9",
-+        "vite": "^5.0.0"
-+      },
-+      "peerDependenciesMeta": {
-+        "msw": {
-+          "optional": true
-+        },
-+        "vite": {
-+          "optional": true
-+        }
-+      }
-+    },
-+    "node_modules/@vitest/pretty-format": {
-+      "version": "2.1.9",
-+      "resolved": "https://registry.npmjs.org/@vitest/pretty-format/-/pretty-format-2.1.9.tgz",
-+      "integrity": "sha512-KhRIdGV2U9HOUzxfiHmY8IFHTdqtOhIzCpd8WRdJiE7D/HUcZVD0EgQCVjm+Q9gkUXWgBvMmTtZgIG48wq7sOQ==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "tinyrainbow": "^1.2.0"
-+      },
-+      "funding": {
-+        "url": "https://opencollective.com/vitest"
-+      }
-+    },
-+    "node_modules/@vitest/runner": {
-+      "version": "2.1.9",
-+      "resolved": "https://registry.npmjs.org/@vitest/runner/-/runner-2.1.9.tgz",
-+      "integrity": "sha512-ZXSSqTFIrzduD63btIfEyOmNcBmQvgOVsPNPe0jYtESiXkhd8u2erDLnMxmGrDCwHCCHE7hxwRDCT3pt0esT4g==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "@vitest/utils": "2.1.9",
-+        "pathe": "^1.1.2"
-+      },
-+      "funding": {
-+        "url": "https://opencollective.com/vitest"
-+      }
-+    },
-+    "node_modules/@vitest/snapshot": {
-+      "version": "2.1.9",
-+      "resolved": "https://registry.npmjs.org/@vitest/snapshot/-/snapshot-2.1.9.tgz",
-+      "integrity": "sha512-oBO82rEjsxLNJincVhLhaxxZdEtV0EFHMK5Kmx5sJ6H9L183dHECjiefOAdnqpIgT5eZwT04PoggUnW88vOBNQ==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "@vitest/pretty-format": "2.1.9",
-+        "magic-string": "^0.30.12",
-+        "pathe": "^1.1.2"
-+      },
-+      "funding": {
-+        "url": "https://opencollective.com/vitest"
-+      }
-+    },
-+    "node_modules/@vitest/spy": {
-+      "version": "2.1.9",
-+      "resolved": "https://registry.npmjs.org/@vitest/spy/-/spy-2.1.9.tgz",
-+      "integrity": "sha512-E1B35FwzXXTs9FHNK6bDszs7mtydNi5MIfUWpceJ8Xbfb1gBMscAnwLbEu+B44ed6W3XjL9/ehLPHR1fkf1KLQ==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "tinyspy": "^3.0.2"
-+      },
-+      "funding": {
-+        "url": "https://opencollective.com/vitest"
-+      }
-+    },
-+    "node_modules/@vitest/utils": {
-+      "version": "2.1.9",
-+      "resolved": "https://registry.npmjs.org/@vitest/utils/-/utils-2.1.9.tgz",
-+      "integrity": "sha512-v0psaMSkNJ3A2NMrUEHFRzJtDPFn+/VWZ5WxImB21T9fjucJRmS7xCS3ppEnARb9y11OAzaD+P2Ps+b+BGX5iQ==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "@vitest/pretty-format": "2.1.9",
-+        "loupe": "^3.1.2",
-+        "tinyrainbow": "^1.2.0"
-+      },
-+      "funding": {
-+        "url": "https://opencollective.com/vitest"
-+      }
-+    },
-     "node_modules/acorn": {
-       "version": "8.15.0",
-       "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
-@@ -3019,6 +3954,16 @@
-         "url": "https://github.com/sponsors/ljharb"
-       }
-     },
-+    "node_modules/assertion-error": {
-+      "version": "2.0.1",
-+      "resolved": "https://registry.npmjs.org/assertion-error/-/assertion-error-2.0.1.tgz",
-+      "integrity": "sha512-Izi8RQcffqCeNVgFigKli1ssklIbpHnCYc6AknXGYoB6grJqyeby7jv12JUQgmTAnIDnbck1uxksT4dzN3PWBA==",
-+      "dev": true,
-+      "license": "MIT",
-+      "engines": {
-+        "node": ">=12"
-+      }
-+    },
-     "node_modules/ast-types-flow": {
-       "version": "0.0.8",
-       "resolved": "https://registry.npmjs.org/ast-types-flow/-/ast-types-flow-0.0.8.tgz",
-@@ -3270,6 +4215,16 @@
-         "node": ">=10.16.0"
-       }
-     },
-+    "node_modules/cac": {
-+      "version": "6.7.14",
-+      "resolved": "https://registry.npmjs.org/cac/-/cac-6.7.14.tgz",
-+      "integrity": "sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==",
-+      "dev": true,
-+      "license": "MIT",
-+      "engines": {
-+        "node": ">=8"
-+      }
-+    },
-     "node_modules/call-bind": {
-       "version": "1.0.8",
-       "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
-@@ -3380,6 +4335,23 @@
-         "node": ">=10.0.0"
-       }
-     },
-+    "node_modules/chai": {
-+      "version": "5.3.3",
-+      "resolved": "https://registry.npmjs.org/chai/-/chai-5.3.3.tgz",
-+      "integrity": "sha512-4zNhdJD/iOjSH0A05ea+Ke6MU5mmpQcbQsSOkgdaUMJ9zTlDTD/GYlwohmIE2u0gaxHYiVHEn1Fw9mZ/ktJWgw==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "assertion-error": "^2.0.1",
-+        "check-error": "^2.1.1",
-+        "deep-eql": "^5.0.1",
-+        "loupe": "^3.1.0",
-+        "pathval": "^2.0.0"
-+      },
-+      "engines": {
-+        "node": ">=18"
-+      }
-+    },
-     "node_modules/chalk": {
-       "version": "4.1.2",
-       "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-@@ -3413,6 +4385,16 @@
-         "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-       }
-     },
-+    "node_modules/check-error": {
-+      "version": "2.1.1",
-+      "resolved": "https://registry.npmjs.org/check-error/-/check-error-2.1.1.tgz",
-+      "integrity": "sha512-OAlb+T7V4Op9OwdkjmguYRqncdlx5JiofwOAUkmTF+jNdHwzTaTs4sRAGpzLF3oOz5xAyDGrPgeIDFQmDOTiJw==",
-+      "dev": true,
-+      "license": "MIT",
-+      "engines": {
-+        "node": ">= 16"
-+      }
-+    },
-     "node_modules/chokidar": {
-       "version": "3.6.0",
-       "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
-@@ -3685,6 +4667,16 @@
-         }
-       }
-     },
-+    "node_modules/deep-eql": {
-+      "version": "5.0.2",
-+      "resolved": "https://registry.npmjs.org/deep-eql/-/deep-eql-5.0.2.tgz",
-+      "integrity": "sha512-h5k/5U50IJJFpzfL6nO9jaaumfjO/f2NjK/oYB2Djzm4p9L+3T9qWpZqZ2hAbLPuuYq9wrU08WQyBTL5GbPk5Q==",
-+      "dev": true,
-+      "license": "MIT",
-+      "engines": {
-+        "node": ">=6"
-+      }
-+    },
-     "node_modules/deep-is": {
-       "version": "0.1.4",
-       "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
-@@ -3994,6 +4986,13 @@
-         "node": ">= 0.4"
-       }
-     },
-+    "node_modules/es-module-lexer": {
-+      "version": "1.7.0",
-+      "resolved": "https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-1.7.0.tgz",
-+      "integrity": "sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==",
-+      "dev": true,
-+      "license": "MIT"
-+    },
-     "node_modules/es-object-atoms": {
-       "version": "1.1.1",
-       "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
-@@ -4054,6 +5053,45 @@
-         "url": "https://github.com/sponsors/ljharb"
-       }
-     },
-+    "node_modules/esbuild": {
-+      "version": "0.21.5",
-+      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.21.5.tgz",
-+      "integrity": "sha512-mg3OPMV4hXywwpoDxu3Qda5xCKQi+vCTZq8S9J/EpkhB2HzKXq4SNFZE3+NK93JYxc8VMSep+lOUSC/RVKaBqw==",
-+      "dev": true,
-+      "hasInstallScript": true,
-+      "license": "MIT",
-+      "bin": {
-+        "esbuild": "bin/esbuild"
-+      },
-+      "engines": {
-+        "node": ">=12"
-+      },
-+      "optionalDependencies": {
-+        "@esbuild/aix-ppc64": "0.21.5",
-+        "@esbuild/android-arm": "0.21.5",
-+        "@esbuild/android-arm64": "0.21.5",
-+        "@esbuild/android-x64": "0.21.5",
-+        "@esbuild/darwin-arm64": "0.21.5",
-+        "@esbuild/darwin-x64": "0.21.5",
-+        "@esbuild/freebsd-arm64": "0.21.5",
-+        "@esbuild/freebsd-x64": "0.21.5",
-+        "@esbuild/linux-arm": "0.21.5",
-+        "@esbuild/linux-arm64": "0.21.5",
-+        "@esbuild/linux-ia32": "0.21.5",
-+        "@esbuild/linux-loong64": "0.21.5",
-+        "@esbuild/linux-mips64el": "0.21.5",
-+        "@esbuild/linux-ppc64": "0.21.5",
-+        "@esbuild/linux-riscv64": "0.21.5",
-+        "@esbuild/linux-s390x": "0.21.5",
-+        "@esbuild/linux-x64": "0.21.5",
-+        "@esbuild/netbsd-x64": "0.21.5",
-+        "@esbuild/openbsd-x64": "0.21.5",
-+        "@esbuild/sunos-x64": "0.21.5",
-+        "@esbuild/win32-arm64": "0.21.5",
-+        "@esbuild/win32-ia32": "0.21.5",
-+        "@esbuild/win32-x64": "0.21.5"
-+      }
-+    },
-     "node_modules/escalade": {
-       "version": "3.2.0",
-       "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
-@@ -4634,6 +5672,16 @@
-         "node": ">=4.0"
-       }
-     },
-+    "node_modules/estree-walker": {
-+      "version": "3.0.3",
-+      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-3.0.3.tgz",
-+      "integrity": "sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "@types/estree": "^1.0.0"
-+      }
-+    },
-     "node_modules/esutils": {
-       "version": "2.0.3",
-       "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
-@@ -4644,6 +5692,16 @@
-         "node": ">=0.10.0"
-       }
-     },
-+    "node_modules/expect-type": {
-+      "version": "1.2.2",
-+      "resolved": "https://registry.npmjs.org/expect-type/-/expect-type-1.2.2.tgz",
-+      "integrity": "sha512-JhFGDVJ7tmDJItKhYgJCGLOWjuK9vPxiXoUFLwLDc99NlmklilbiQJwoctZtt13+xMw91MCk/REan6MWHqDjyA==",
-+      "dev": true,
-+      "license": "Apache-2.0",
-+      "engines": {
-+        "node": ">=12.0.0"
-+      }
-+    },
-     "node_modules/fast-deep-equal": {
-       "version": "3.1.3",
-       "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
-@@ -5809,6 +6867,60 @@
-       "dev": true,
-       "license": "ISC"
-     },
-+    "node_modules/istanbul-lib-coverage": {
-+      "version": "3.2.2",
-+      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
-+      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
-+      "dev": true,
-+      "license": "BSD-3-Clause",
-+      "engines": {
-+        "node": ">=8"
-+      }
-+    },
-+    "node_modules/istanbul-lib-report": {
-+      "version": "3.0.1",
-+      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
-+      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
-+      "dev": true,
-+      "license": "BSD-3-Clause",
-+      "dependencies": {
-+        "istanbul-lib-coverage": "^3.0.0",
-+        "make-dir": "^4.0.0",
-+        "supports-color": "^7.1.0"
-+      },
-+      "engines": {
-+        "node": ">=10"
-+      }
-+    },
-+    "node_modules/istanbul-lib-source-maps": {
-+      "version": "5.0.6",
-+      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-5.0.6.tgz",
-+      "integrity": "sha512-yg2d+Em4KizZC5niWhQaIomgf5WlL4vOOjZ5xGCmF8SnPE/mDWWXgvRExdcpCgh9lLRRa1/fSYp2ymmbJ1pI+A==",
-+      "dev": true,
-+      "license": "BSD-3-Clause",
-+      "dependencies": {
-+        "@jridgewell/trace-mapping": "^0.3.23",
-+        "debug": "^4.1.1",
-+        "istanbul-lib-coverage": "^3.0.0"
-+      },
-+      "engines": {
-+        "node": ">=10"
-+      }
-+    },
-+    "node_modules/istanbul-reports": {
-+      "version": "3.2.0",
-+      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.2.0.tgz",
-+      "integrity": "sha512-HGYWWS/ehqTV3xN10i23tkPkpH46MLCIMFNCaaKNavAXTF1RkqxawEPtnjnGZ6XKSInBKkiOA5BKS+aZiY3AvA==",
-+      "dev": true,
-+      "license": "BSD-3-Clause",
-+      "dependencies": {
-+        "html-escaper": "^2.0.0",
-+        "istanbul-lib-report": "^3.0.0"
-+      },
-+      "engines": {
-+        "node": ">=8"
-+      }
-+    },
-     "node_modules/iterator.prototype": {
-       "version": "1.1.5",
-       "resolved": "https://registry.npmjs.org/iterator.prototype/-/iterator.prototype-1.1.5.tgz",
-@@ -6052,6 +7164,13 @@
-         "loose-envify": "cli.js"
-       }
-     },
-+    "node_modules/loupe": {
-+      "version": "3.2.1",
-+      "resolved": "https://registry.npmjs.org/loupe/-/loupe-3.2.1.tgz",
-+      "integrity": "sha512-CdzqowRJCeLU72bHvWqwRBBlLcMEtIvGrlvef74kMnV2AolS9Y8xUv1I0U/MNAWMhBlKIoyuEgoJ0t/bbwHbLQ==",
-+      "dev": true,
-+      "license": "MIT"
-+    },
-     "node_modules/lru-cache": {
-       "version": "10.4.3",
-       "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
-@@ -6077,6 +7196,44 @@
-         "node": ">=12"
-       }
-     },
-+    "node_modules/magic-string": {
-+      "version": "0.30.19",
-+      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.19.tgz",
-+      "integrity": "sha512-2N21sPY9Ws53PZvsEpVtNuSW+ScYbQdp4b9qUaL+9QkHUrGFKo56Lg9Emg5s9V/qrtNBmiR01sYhUOwu3H+VOw==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "@jridgewell/sourcemap-codec": "^1.5.5"
-+      }
-+    },
-+    "node_modules/magicast": {
-+      "version": "0.3.5",
-+      "resolved": "https://registry.npmjs.org/magicast/-/magicast-0.3.5.tgz",
-+      "integrity": "sha512-L0WhttDl+2BOsybvEOLK7fW3UA0OQ0IQ2d6Zl2x/a6vVRs3bAY0ECOSHHeL5jD+SbOpOCUEi0y1DgHEn9Qn1AQ==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "@babel/parser": "^7.25.4",
-+        "@babel/types": "^7.25.4",
-+        "source-map-js": "^1.2.0"
-+      }
-+    },
-+    "node_modules/make-dir": {
-+      "version": "4.0.0",
-+      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
-+      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "semver": "^7.5.3"
-+      },
-+      "engines": {
-+        "node": ">=10"
-+      },
-+      "funding": {
-+        "url": "https://github.com/sponsors/sindresorhus"
-+      }
-+    },
-     "node_modules/make-error": {
-       "version": "1.3.6",
-       "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
-@@ -6722,6 +7879,23 @@
-         "url": "https://github.com/sponsors/isaacs"
-       }
-     },
-+    "node_modules/pathe": {
-+      "version": "1.1.2",
-+      "resolved": "https://registry.npmjs.org/pathe/-/pathe-1.1.2.tgz",
-+      "integrity": "sha512-whLdWMYL2TwI08hn8/ZqAbrVemu0LNaNNJZX73O6qaIdCTfXutsLhMkjdENX0qhsQ9uIimo4/aQOmXkoon2nDQ==",
-+      "dev": true,
-+      "license": "MIT"
-+    },
-+    "node_modules/pathval": {
-+      "version": "2.0.1",
-+      "resolved": "https://registry.npmjs.org/pathval/-/pathval-2.0.1.tgz",
-+      "integrity": "sha512-//nshmD55c46FuFw26xV/xFAaB5HF9Xdap7HJBBnrKdAd6/GxDBaNA1870O79+9ueg61cZLSVc+OaFlfmObYVQ==",
-+      "dev": true,
-+      "license": "MIT",
-+      "engines": {
-+        "node": ">= 14.16"
-+      }
-+    },
-     "node_modules/performance-now": {
-       "version": "2.1.0",
-       "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
-@@ -7410,6 +8584,48 @@
-         "node": "*"
-       }
-     },
-+    "node_modules/rollup": {
-+      "version": "4.52.4",
-+      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.52.4.tgz",
-+      "integrity": "sha512-CLEVl+MnPAiKh5pl4dEWSyMTpuflgNQiLGhMv8ezD5W/qP8AKvmYpCOKRRNOh7oRKnauBZ4SyeYkMS+1VSyKwQ==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "@types/estree": "1.0.8"
-+      },
-+      "bin": {
-+        "rollup": "dist/bin/rollup"
-+      },
-+      "engines": {
-+        "node": ">=18.0.0",
-+        "npm": ">=8.0.0"
-+      },
-+      "optionalDependencies": {
-+        "@rollup/rollup-android-arm-eabi": "4.52.4",
-+        "@rollup/rollup-android-arm64": "4.52.4",
-+        "@rollup/rollup-darwin-arm64": "4.52.4",
-+        "@rollup/rollup-darwin-x64": "4.52.4",
-+        "@rollup/rollup-freebsd-arm64": "4.52.4",
-+        "@rollup/rollup-freebsd-x64": "4.52.4",
-+        "@rollup/rollup-linux-arm-gnueabihf": "4.52.4",
-+        "@rollup/rollup-linux-arm-musleabihf": "4.52.4",
-+        "@rollup/rollup-linux-arm64-gnu": "4.52.4",
-+        "@rollup/rollup-linux-arm64-musl": "4.52.4",
-+        "@rollup/rollup-linux-loong64-gnu": "4.52.4",
-+        "@rollup/rollup-linux-ppc64-gnu": "4.52.4",
-+        "@rollup/rollup-linux-riscv64-gnu": "4.52.4",
-+        "@rollup/rollup-linux-riscv64-musl": "4.52.4",
-+        "@rollup/rollup-linux-s390x-gnu": "4.52.4",
-+        "@rollup/rollup-linux-x64-gnu": "4.52.4",
-+        "@rollup/rollup-linux-x64-musl": "4.52.4",
-+        "@rollup/rollup-openharmony-arm64": "4.52.4",
-+        "@rollup/rollup-win32-arm64-msvc": "4.52.4",
-+        "@rollup/rollup-win32-ia32-msvc": "4.52.4",
-+        "@rollup/rollup-win32-x64-gnu": "4.52.4",
-+        "@rollup/rollup-win32-x64-msvc": "4.52.4",
-+        "fsevents": "~2.3.2"
-+      }
-+    },
-     "node_modules/run-parallel": {
-       "version": "1.2.0",
-       "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
-@@ -7658,6 +8874,13 @@
-         "url": "https://github.com/sponsors/ljharb"
-       }
-     },
-+    "node_modules/siginfo": {
-+      "version": "2.0.0",
-+      "resolved": "https://registry.npmjs.org/siginfo/-/siginfo-2.0.0.tgz",
-+      "integrity": "sha512-ybx0WO1/8bSBLEWXZvEd7gMW3Sn3JFlW3TvX1nREbDLRNQNaeNN8WK0meBwPdAaOI7TtRRRJn/Es1zhrrCHu7g==",
-+      "dev": true,
-+      "license": "ISC"
-+    },
-     "node_modules/signal-exit": {
-       "version": "4.1.0",
-       "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
-@@ -7717,6 +8940,13 @@
-       "dev": true,
-       "license": "MIT"
-     },
-+    "node_modules/stackback": {
-+      "version": "0.0.2",
-+      "resolved": "https://registry.npmjs.org/stackback/-/stackback-0.0.2.tgz",
-+      "integrity": "sha512-1XMJE5fQo1jGH6Y/7ebnwPOBEkIEnT4QF32d5R1+VXdXveM0IBMJt8zfaxX1P3QhVwrYe+576+jkANtSS2mBbw==",
-+      "dev": true,
-+      "license": "MIT"
-+    },
-     "node_modules/stackblur-canvas": {
-       "version": "2.7.0",
-       "resolved": "https://registry.npmjs.org/stackblur-canvas/-/stackblur-canvas-2.7.0.tgz",
-@@ -7733,6 +8963,13 @@
-       "integrity": "sha512-qoRRSyROncaz1z0mvYqIE4lCd9p2R90i6GxW3uZv5ucSu8tU7B5HXUP1gG8pVZsYNVaXjk8ClXHPttLyxAL48A==",
-       "license": "MIT"
-     },
-+    "node_modules/std-env": {
-+      "version": "3.9.0",
-+      "resolved": "https://registry.npmjs.org/std-env/-/std-env-3.9.0.tgz",
-+      "integrity": "sha512-UGvjygr6F6tpH7o2qyqR6QYpwraIjKSdtzyBdyytFOHmPZY917kwdwLG0RbOjWOnKmnm3PeHjaoLLMie7kPLQw==",
-+      "dev": true,
-+      "license": "MIT"
-+    },
-     "node_modules/stop-iteration-iterator": {
-       "version": "1.1.0",
-       "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
-@@ -8127,6 +9364,21 @@
-         "node": ">=14.0.0"
-       }
-     },
-+    "node_modules/test-exclude": {
-+      "version": "7.0.1",
-+      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-7.0.1.tgz",
-+      "integrity": "sha512-pFYqmTw68LXVjeWJMST4+borgQP2AyMNbg1BpZh9LbyhUeNkeaPF9gzfPGUAnSMV3qPYdWUwDIjjCLiSDOl7vg==",
-+      "dev": true,
-+      "license": "ISC",
-+      "dependencies": {
-+        "@istanbuljs/schema": "^0.1.2",
-+        "glob": "^10.4.1",
-+        "minimatch": "^9.0.4"
-+      },
-+      "engines": {
-+        "node": ">=18"
-+      }
-+    },
-     "node_modules/text-segmentation": {
-       "version": "1.0.3",
-       "resolved": "https://registry.npmjs.org/text-segmentation/-/text-segmentation-1.0.3.tgz",
-@@ -8167,6 +9419,20 @@
-         "node": ">=0.8"
-       }
-     },
-+    "node_modules/tinybench": {
-+      "version": "2.9.0",
-+      "resolved": "https://registry.npmjs.org/tinybench/-/tinybench-2.9.0.tgz",
-+      "integrity": "sha512-0+DUvqWMValLmha6lr4kD8iAMK1HzV0/aKnCtWb9v9641TnP/MFb7Pc2bxoxQjTXAErryXVgUOfv2YqNllqGeg==",
-+      "dev": true,
-+      "license": "MIT"
-+    },
-+    "node_modules/tinyexec": {
-+      "version": "0.3.2",
-+      "resolved": "https://registry.npmjs.org/tinyexec/-/tinyexec-0.3.2.tgz",
-+      "integrity": "sha512-KQQR9yN7R5+OSwaK0XQoj22pwHoTlgYqmUscPYoknOoWCWfj/5/ABTMRi69FrKU5ffPVh5QcFikpWJI/P1ocHA==",
-+      "dev": true,
-+      "license": "MIT"
-+    },
-     "node_modules/tinyglobby": {
-       "version": "0.2.15",
-       "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.15.tgz",
-@@ -8215,6 +9481,36 @@
-         "url": "https://github.com/sponsors/jonschlinkert"
-       }
-     },
-+    "node_modules/tinypool": {
-+      "version": "1.1.1",
-+      "resolved": "https://registry.npmjs.org/tinypool/-/tinypool-1.1.1.tgz",
-+      "integrity": "sha512-Zba82s87IFq9A9XmjiX5uZA/ARWDrB03OHlq+Vw1fSdt0I+4/Kutwy8BP4Y/y/aORMo61FQ0vIb5j44vSo5Pkg==",
-+      "dev": true,
-+      "license": "MIT",
-+      "engines": {
-+        "node": "^18.0.0 || >=20.0.0"
-+      }
-+    },
-+    "node_modules/tinyrainbow": {
-+      "version": "1.2.0",
-+      "resolved": "https://registry.npmjs.org/tinyrainbow/-/tinyrainbow-1.2.0.tgz",
-+      "integrity": "sha512-weEDEq7Z5eTHPDh4xjX789+fHfF+P8boiFB+0vbWzpbnbsEr/GRaohi/uMKxg8RZMXnl1ItAi/IUHWMsjDV7kQ==",
-+      "dev": true,
-+      "license": "MIT",
-+      "engines": {
-+        "node": ">=14.0.0"
-+      }
-+    },
-+    "node_modules/tinyspy": {
-+      "version": "3.0.2",
-+      "resolved": "https://registry.npmjs.org/tinyspy/-/tinyspy-3.0.2.tgz",
-+      "integrity": "sha512-n1cw8k1k0x4pgA2+9XrOkFydTerNcJ1zWCO5Nn9scWHTD+5tp8dghT2x1uduQePZTZgd3Tupf+x9BxJjeJi77Q==",
-+      "dev": true,
-+      "license": "MIT",
-+      "engines": {
-+        "node": ">=14.0.0"
-+      }
-+    },
-     "node_modules/to-regex-range": {
-       "version": "5.0.1",
-       "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
-@@ -8580,6 +9876,184 @@
-       "dev": true,
-       "license": "MIT"
-     },
-+    "node_modules/vite": {
-+      "version": "5.4.20",
-+      "resolved": "https://registry.npmjs.org/vite/-/vite-5.4.20.tgz",
-+      "integrity": "sha512-j3lYzGC3P+B5Yfy/pfKNgVEg4+UtcIJcVRt2cDjIOmhLourAqPqf8P7acgxeiSgUB7E3p2P8/3gNIgDLpwzs4g==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "esbuild": "^0.21.3",
-+        "postcss": "^8.4.43",
-+        "rollup": "^4.20.0"
-+      },
-+      "bin": {
-+        "vite": "bin/vite.js"
-+      },
-+      "engines": {
-+        "node": "^18.0.0 || >=20.0.0"
-+      },
-+      "funding": {
-+        "url": "https://github.com/vitejs/vite?sponsor=1"
-+      },
-+      "optionalDependencies": {
-+        "fsevents": "~2.3.3"
-+      },
-+      "peerDependencies": {
-+        "@types/node": "^18.0.0 || >=20.0.0",
-+        "less": "*",
-+        "lightningcss": "^1.21.0",
-+        "sass": "*",
-+        "sass-embedded": "*",
-+        "stylus": "*",
-+        "sugarss": "*",
-+        "terser": "^5.4.0"
-+      },
-+      "peerDependenciesMeta": {
-+        "@types/node": {
-+          "optional": true
-+        },
-+        "less": {
-+          "optional": true
-+        },
-+        "lightningcss": {
-+          "optional": true
-+        },
-+        "sass": {
-+          "optional": true
-+        },
-+        "sass-embedded": {
-+          "optional": true
-+        },
-+        "stylus": {
-+          "optional": true
-+        },
-+        "sugarss": {
-+          "optional": true
-+        },
-+        "terser": {
-+          "optional": true
-+        }
-+      }
-+    },
-+    "node_modules/vite-node": {
-+      "version": "2.1.9",
-+      "resolved": "https://registry.npmjs.org/vite-node/-/vite-node-2.1.9.tgz",
-+      "integrity": "sha512-AM9aQ/IPrW/6ENLQg3AGY4K1N2TGZdR5e4gu/MmmR2xR3Ll1+dib+nook92g4TV3PXVyeyxdWwtaCAiUL0hMxA==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "cac": "^6.7.14",
-+        "debug": "^4.3.7",
-+        "es-module-lexer": "^1.5.4",
-+        "pathe": "^1.1.2",
-+        "vite": "^5.0.0"
-+      },
-+      "bin": {
-+        "vite-node": "vite-node.mjs"
-+      },
-+      "engines": {
-+        "node": "^18.0.0 || >=20.0.0"
-+      },
-+      "funding": {
-+        "url": "https://opencollective.com/vitest"
-+      }
-+    },
-+    "node_modules/vite/node_modules/postcss": {
-+      "version": "8.5.6",
-+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
-+      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
-+      "dev": true,
-+      "funding": [
-+        {
-+          "type": "opencollective",
-+          "url": "https://opencollective.com/postcss/"
-+        },
-+        {
-+          "type": "tidelift",
-+          "url": "https://tidelift.com/funding/github/npm/postcss"
-+        },
-+        {
-+          "type": "github",
-+          "url": "https://github.com/sponsors/ai"
-+        }
-+      ],
-+      "license": "MIT",
-+      "dependencies": {
-+        "nanoid": "^3.3.11",
-+        "picocolors": "^1.1.1",
-+        "source-map-js": "^1.2.1"
-+      },
-+      "engines": {
-+        "node": "^10 || ^12 || >=14"
-+      }
-+    },
-+    "node_modules/vitest": {
-+      "version": "2.1.9",
-+      "resolved": "https://registry.npmjs.org/vitest/-/vitest-2.1.9.tgz",
-+      "integrity": "sha512-MSmPM9REYqDGBI8439mA4mWhV5sKmDlBKWIYbA3lRb2PTHACE0mgKwA8yQ2xq9vxDTuk4iPrECBAEW2aoFXY0Q==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "@vitest/expect": "2.1.9",
-+        "@vitest/mocker": "2.1.9",
-+        "@vitest/pretty-format": "^2.1.9",
-+        "@vitest/runner": "2.1.9",
-+        "@vitest/snapshot": "2.1.9",
-+        "@vitest/spy": "2.1.9",
-+        "@vitest/utils": "2.1.9",
-+        "chai": "^5.1.2",
-+        "debug": "^4.3.7",
-+        "expect-type": "^1.1.0",
-+        "magic-string": "^0.30.12",
-+        "pathe": "^1.1.2",
-+        "std-env": "^3.8.0",
-+        "tinybench": "^2.9.0",
-+        "tinyexec": "^0.3.1",
-+        "tinypool": "^1.0.1",
-+        "tinyrainbow": "^1.2.0",
-+        "vite": "^5.0.0",
-+        "vite-node": "2.1.9",
-+        "why-is-node-running": "^2.3.0"
-+      },
-+      "bin": {
-+        "vitest": "vitest.mjs"
-+      },
-+      "engines": {
-+        "node": "^18.0.0 || >=20.0.0"
-+      },
-+      "funding": {
-+        "url": "https://opencollective.com/vitest"
-+      },
-+      "peerDependencies": {
-+        "@edge-runtime/vm": "*",
-+        "@types/node": "^18.0.0 || >=20.0.0",
-+        "@vitest/browser": "2.1.9",
-+        "@vitest/ui": "2.1.9",
-+        "happy-dom": "*",
-+        "jsdom": "*"
-+      },
-+      "peerDependenciesMeta": {
-+        "@edge-runtime/vm": {
-+          "optional": true
-+        },
-+        "@types/node": {
-+          "optional": true
-+        },
-+        "@vitest/browser": {
-+          "optional": true
-+        },
-+        "@vitest/ui": {
-+          "optional": true
-+        },
-+        "happy-dom": {
-+          "optional": true
-+        },
-+        "jsdom": {
-+          "optional": true
-+        }
-+      }
-+    },
-     "node_modules/webpack-bundle-analyzer": {
-       "version": "4.10.2",
-       "resolved": "https://registry.npmjs.org/webpack-bundle-analyzer/-/webpack-bundle-analyzer-4.10.2.tgz",
-@@ -8722,6 +10196,23 @@
-         "url": "https://github.com/sponsors/ljharb"
-       }
-     },
-+    "node_modules/why-is-node-running": {
-+      "version": "2.3.0",
-+      "resolved": "https://registry.npmjs.org/why-is-node-running/-/why-is-node-running-2.3.0.tgz",
-+      "integrity": "sha512-hUrmaWBdVDcxvYqnyh09zunKzROWjbZTiNy8dBEjkS7ehEDQibXJ7XvlmtbwuTclUiIyN+CyXQD4Vmko8fNm8w==",
-+      "dev": true,
-+      "license": "MIT",
-+      "dependencies": {
-+        "siginfo": "^2.0.0",
-+        "stackback": "0.0.2"
-+      },
-+      "bin": {
-+        "why-is-node-running": "cli.js"
-+      },
-+      "engines": {
-+        "node": ">=8"
-+      }
-+    },
-     "node_modules/word-wrap": {
-       "version": "1.2.5",
-       "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
-diff --git a/package.json b/package.json
-index 42ff110..a276069 100644
---- a/package.json
-+++ b/package.json
-@@ -8,7 +8,8 @@
-     "start": "next start",
-     "lint": "next lint",
-     "typecheck": "tsc --noEmit",
--    "test": "npm run lint && npm run typecheck",
-+    "test": "vitest run --coverage",
-+    "verify": "npm run lint && npm run typecheck && npm run test",
-     "analyze": "ANALYZE=true next build",
-     "db:seed": "ts-node --compiler-options '{\"module\":\"CommonJS\"}' prisma/seed.ts",
-     "zip": "bash scripts/make-zip.sh"
-@@ -39,6 +40,7 @@
-     "@prisma/client": "^5.18.0",
-     "@types/pg": "^8.15.5",
-     "@types/react": "19.1.13",
-+    "@vitest/coverage-v8": "^2.1.4",
-     "autoprefixer": "10.4.19",
-     "eslint": "^8.57.0",
-     "eslint-config-next": "^15.5.4",
-@@ -47,6 +49,7 @@
-     "prisma": "^5.18.0",
-     "tailwindcss": "3.4.10",
-     "ts-node": "^10.9.2",
--    "typescript": "5.5.4"
-+    "typescript": "5.5.4",
-+    "vitest": "^2.1.4"
-   }
- }
-diff --git a/patch.diff b/patch.diff
-index 4f51b99..8f770d3 100644
---- a/patch.diff
-+++ b/patch.diff
-@@ -1,245 +0,0 @@
--diff --git a/.gitignore b/.gitignore
--index ea2cf9e..4f92320 100644
----- a/.gitignore
--+++ b/.gitignore
--@@ -43,6 +43,9 @@ jspm_packages/
-- # Optional eslint cache
-- .eslintcache
-- 
--+# TypeScript incremental build info
--+*.tsbuildinfo
--+
-- # Microbundle cache
-- .rpt2_cache/
-- .rts2_cache_cjs/
--diff --git a/Makefile b/Makefile
--index 8f51a6d..928caf7 100644
----- a/Makefile
--+++ b/Makefile
--@@ -16,8 +16,8 @@ lint:
-- typecheck:
-- 	npm run typecheck
-- 
---test: lint typecheck
---	@echo "Static analysis checks completed"
--+test:
--+	npm run test
-- 
-- build:
-- 	npm run build
--@@ -31,7 +31,9 @@ sbom:
-- 
-- scan:
-- 	mkdir -p $(dir $(TRIVY_REPORT))
---	docker run --rm -v "$(PWD)":/workspace -v /tmp/trivy-cache:/root/.cache/ aquasec/trivy:latest fs --scanners vuln,secret --exit-code 0 --format table --output $(TRIVY_REPORT) /workspace
--+	docker run --rm -v "$(PWD)":/workspace -v /tmp/trivy-cache:/root/.cache/ \
--+	  aquasec/trivy:latest fs --scanners vuln,secret --ignore-unfixed \
--+	  --severity HIGH,CRITICAL --exit-code 1 --format table --output $(TRIVY_REPORT) /workspace
-- 
-- release: build sbom
-- 	@echo "Release artifacts generated."
--diff --git a/ci/ci.yml b/ci/ci.yml
--index 020417e..e7e7f9f 100644
----- a/ci/ci.yml
--+++ b/ci/ci.yml
--@@ -8,12 +8,18 @@ on:
--   schedule:
--     - cron: '0 3 * * *'
-- 
---env:
---  NODE_VERSION: '20.15.0'
---
-- jobs:
--   build:
--     runs-on: ubuntu-latest
--+    strategy:
--+      fail-fast: true
--+      matrix:
--+        include:
--+          - node-version: '20.15.0'
--+            experimental: false
--+          - node-version: '22.x'
--+            experimental: true
--+    continue-on-error: ${{ matrix.experimental }}
--     permissions:
--       contents: read
--       security-events: write
--@@ -25,8 +31,9 @@ jobs:
--       - name: Setup Node.js
--         uses: actions/setup-node@v4
--         with:
---          node-version: ${{ env.NODE_VERSION }}
--+          node-version: ${{ matrix.node-version }}
--           cache: 'npm'
--+          cache-dependency-path: package-lock.json
-- 
--       - name: Install dependencies
--         run: make setup
--@@ -70,8 +77,9 @@ jobs:
--       - name: Setup Node.js
--         uses: actions/setup-node@v4
--         with:
---          node-version: ${{ env.NODE_VERSION }}
--+          node-version: '20.15.0'
--           cache: 'npm'
--+          cache-dependency-path: package-lock.json
-- 
--       - name: Install dependencies
--         run: npm ci
--diff --git a/ci/release.yml b/ci/release.yml
--index bd43ed9..d2902de 100644
----- a/ci/release.yml
--+++ b/ci/release.yml
--@@ -26,6 +26,7 @@ jobs:
--         with:
--           node-version: ${{ env.NODE_VERSION }}
--           cache: 'npm'
--+          cache-dependency-path: package-lock.json
-- 
--       - name: Install dependencies
--         run: make setup
--diff --git a/report/audit.md b/report/audit.md
--index 6b2c0e7..bb4a9d7 100644
----- a/report/audit.md
--+++ b/report/audit.md
--@@ -4,39 +4,41 @@ ## Snapshot
-- - **Languages**: TypeScript/JavaScript (Next.js), SQL (Prisma), Shell.
-- - **Frameworks**: Next.js 14, React 18, TailwindCSS, Prisma.
-- - **Build Tooling**: npm, Next.js, Prisma CLI.
---- **CI/CD**: Previously missing formal workflows.
---- **Containers**: No Dockerfile present before this audit.
---- **Security Tooling**: No automated scans configured.
--+- **CI/CD**: GitHub Actions in `/ci` (build/security pipeline plus release).
--+- **Containers**: Hardened multi-stage Dockerfile (non-root runtime, BuildKit ready).
--+- **Security Tooling**: Syft SBOM, Trivy filesystem scan, CodeQL analysis, Cosign signing.
--+- **External Artifacts**: No additional ZIP archives detected in repo clone as of this audit cycle.
-- 
-- ## Findings
-- 
-- | Area | Issue | Severity | Recommendation | Type |
-- | --- | --- | --- | --- | --- |
---| Governance | Missing CODEOWNERS, contribution guide, PR template | Medium | Add governance artefacts to clarify ownership and review expectations | Structural |
---| Build | No Makefile/automation for common tasks | Medium | Introduce Makefile with setup/test/build targets | Quick Win |
---| CI | No GitHub Actions pipelines | High | Implement CI pipeline with lint/typecheck/build + security scans | Structural |
---| Security | No SBOM or vulnerability scanning | High | Integrate Syft (SBOM), Trivy (vuln), and CodeQL | Structural |
---| Release | Lack of signed artifacts and release automation | Medium | Add release workflow with Cosign signing | Structural |
---| Documentation | README updated but ancillary docs missing | Medium | Provide ARCHITECTURE/CONTRIBUTING/SECURITY docs | Quick Win |
---| Data | `app/api/hs-codes` returned empty array when DB and TARIC unavailable | High | Fallback to seeded dataset to honour offline capability | Bugfix |
---| Scripts | `scripts/make-zip.sh` referenced but absent | Low | Provide implementation or remove reference | Quick Win |
---| Dependency Hygiene | npm scripts lacked lint/typecheck/test commands | Medium | Add scripts and enforce via pre-commit | Quick Win |
---| Secrets | `.env.example` present but no guidance on security posture | Low | Document in SECURITY.md | Quick Win |
--+| Governance | Repository lacked CODEOWNERS, PR template, CONTRIBUTING guidance | Medium | Add governance artefacts to clarify ownership and review expectations | Structural |
--+| Build | Common task automation inconsistent across docs/scripts | Medium | Provide canonical Makefile targets for setup/test/build and document usage | Quick Win |
--+| CI | Previous pipeline missed matrix validation and hardened scans | High | Add Node version matrix, strict Trivy exit codes, and cache configuration | Structural |
--+| Security | Missing SBOM and image signing pipeline integration | High | Automate Syft SBOM, Trivy, CodeQL, and Cosign within CI/CD | Structural |
--+| Release | Lack of reproducible Docker image workflow | Medium | Deliver multi-stage Dockerfile and release automation with cached BuildKit | Structural |
--+| Documentation | Architecture/process docs absent outside README | Medium | Provide ARCHITECTURE/CONTRIBUTING/SECURITY references while leaving README unchanged this cycle | Quick Win |
--+| Data | `app/api/hs-codes` offline path returned empty array without seeds | High | Ship deterministic seed data and TARIC fallback | Bugfix |
--+| Assets | Requested ZIP bundles (e.g. `PSRA-LTSD_v5.6.1_FULL.zip`) not present in repository | Low | Note absence in audit; await upstream upload before integration | Observation |
--+| Dependency Hygiene | Pre-commit hooks not enforcing standardized checks | Medium | Configure lint/typecheck/test hooks and pin tool revisions | Quick Win |
--+| Secrets | `.env.example` minimal and lacked TARIC guidance | Low | Expand template with documented variables and reference SECURITY.md | Quick Win |
-- 
-- ## Quick Wins Implemented
---- Restored HS code offline fallback logic.
---- Added Makefile, pre-commit hooks, and npm scripts for lint/typecheck/test.
---- Created CODEOWNERS, PR template, and documentation set.
---- Added Syft SBOM generation and Trivy scanning commands.
--+- Restored HS code offline fallback logic with TARIC client chain.
--+- Added Makefile, npm scripts, and pre-commit hooks covering lint/typecheck/test/build.
--+- Created CODEOWNERS, PR template, CONTRIBUTING, SECURITY, and ARCHITECTURE references.
--+- Added Syft SBOM generation, strict Trivy scanning, and security artefact uploads.
-- 
-- ## Structural Initiatives Launched
---- CI workflow with caching, lint/typecheck/build, SBOM, Trivy, and CodeQL.
---- Release workflow with Docker build, SBOM attachment, and Cosign signing.
---- Multi-stage Dockerfile for reproducible builds.
---- Security documentation aligned with OWASP ASVS L2.
--+- CI workflow with Node 20/22 matrix, dependency caching, lint/typecheck/build, SBOM, Trivy (failing on HIGH/CRITICAL), and CodeQL.
--+- Release workflow with Docker build caching, SBOM attachment, Cosign signing, and GitHub Release publication.
--+- Multi-stage Dockerfile for reproducible builds and non-root runtime aligned with 12-Factor principles.
--+- Security documentation aligned with OWASP ASVS L2 plus TARIC environment hardening guidance.
-- 
-- ## Outstanding Risks
-- - Database migrations/seeding should be validated in CI once a test database is available.
---- Observability stack (audit-service, tracing) remains a placeholder.
---- TARIC integration requires network connectivity; consider adding integration tests with mocked responses.
---- Need automated tests beyond static analysis to cover origin engine logic.
--+- Observability stack (audit-service, tracing) remains a placeholder pending infra delivery.
--+- TARIC integration requires network connectivity; add contract tests with mocked responses when API keys become available.
--+- Need automated tests beyond static analysis to cover origin engine logic and persona scenarios.
--+- Await arrival of upstream ZIP bundles before planning further migrations; re-run audit after assets land.
--diff --git a/report/implementation-plan.md b/report/implementation-plan.md
--index 3f16a62..8628fd9 100644
----- a/report/implementation-plan.md
--+++ b/report/implementation-plan.md
--@@ -1,27 +1,30 @@
-- # Implementation Plan
-- 
---1. **Stabilise Offline Fallbacks** (ETA: 0.5 day, Impact: High)
--+1. **Reconfirm Asset Inventory** (ETA: 0.25 day, Impact: Medium)
--+   - Verify absence of requested ZIP archives in workspace; document status in `report/audit.md`.
--+   - Establish intake checklist for future uploads so integrations can start immediately once assets land.
--+
--+2. **Stabilise Offline Fallbacks** (ETA: 0.5 day, Impact: High)
--    - Ensure HS code search returns seeded data when DB/TARIC unavailable.
---   - Validate Origin Calculator personas against mock repository.
--+   - Validate Origin Calculator personas against mock repository and TARIC fallback client.
-- 
---2. **Establish Engineering Governance** (ETA: 1 day, Impact: High)
---   - Add Makefile, pre-commit hooks, CODEOWNERS, CONTRIBUTING, SECURITY policy.
---   - Create ARCHITECTURE and CHANGELOG documents.
--+3. **Governance & Developer Experience** (ETA: 1 day, Impact: High)
--+   - Maintain Makefile, pre-commit hooks, CODEOWNERS, CONTRIBUTING, SECURITY policy, and CHANGELOG.
--+   - Keep README untouched per stakeholder request while referencing supporting docs.
-- 
---3. **Automate Quality Gates** (ETA: 1 day, Impact: High)
---   - Configure GitHub Actions (`ci/ci.yml`) with caching, lint, typecheck, build.
---   - Integrate Syft SBOM generation, Trivy filesystem scan, and CodeQL analysis.
--+4. **Automate Quality & Security Gates** (ETA: 1 day, Impact: High)
--+   - Run GitHub Actions matrix builds for Node 20 LTS and Node 22 (experimental) with dependency caching.
--+   - Enforce Syft SBOM generation, Trivy scans with HIGH/CRITICAL exit codes, and CodeQL analysis uploading SARIF.
-- 
---4. **Harden Supply Chain** (ETA: 1 day, Impact: Medium)
---   - Add multi-stage Dockerfile and `make docker-build` target.
---   - Generate CycloneDX SBOM and store under `sbom/`.
---   - Implement release workflow (`ci/release.yml`) with Cosign signing and SBOM upload.
--+5. **Harden Supply Chain & Releases** (ETA: 1 day, Impact: Medium)
--+   - Use multi-stage Dockerfile with non-root runner and BuildKit cache.
--+   - Release workflow pushes signed images, publishes SBOM/scan artefacts, and tags SemVer releases.
-- 
---5. **Document Security Controls** (ETA: 0.5 day, Impact: Medium)
---   - Publish ASVS Level 2 checklist under `docs/security`.
---   - Reference OWASP/ASVS requirements in SECURITY.md and PR template.
--+6. **Security Documentation & Checklists** (ETA: 0.5 day, Impact: Medium)
--+   - Maintain ASVS Level 2 checklist under `docs/security` and link from SECURITY/PR templates.
--+   - Track OWASP Top 10 considerations and escalate gaps during code reviews.
-- 
---6. **Future Enhancements** (ETA: TBD, Impact: High)
---   - Add automated integration tests for origin engine and TARIC client.
---   - Instrument observability stack (structured logging, tracing) via `lib/audit-service.ts`.
--+7. **Future Enhancements** (ETA: TBD, Impact: High)
--+   - Add automated integration tests for origin engine, TARIC client, and persona flows once datasets stabilise.
--+   - Instrument observability stack (structured logging, tracing) via `lib/audit-service.ts` and surface metrics in CI.
--    - Provide Terraform/Kubernetes manifests in `/infra` once runtime targets are finalised.
--diff --git a/report/structure-decisions.md b/report/structure-decisions.md
--index b307214..1823ecc 100644
----- a/report/structure-decisions.md
--+++ b/report/structure-decisions.md
--@@ -9,7 +9,7 @@ ## Repository Layout
-- 
-- ## Tooling
-- - Established `.editorconfig` and `.gitattributes` for consistent formatting across editors and platforms.
---- Added `.pre-commit-config.yaml` to run lint/typecheck/test before commits.
--+- Added `.pre-commit-config.yaml` to run lint/typecheck/test/build before commits.
-- - Introduced `Makefile` to standardise setup, lint, test, build, SBOM, scan, and release commands.
-- - Created multi-stage `Dockerfile` aligned with 12-Factor and container security best practices (non-root runtime, BuildKit ready).
-- 
--@@ -19,7 +19,7 @@ ## Governance
-- - Added SECURITY policy referencing OWASP ASVS L2 and supply-chain requirements.
-- 
-- ## CI/CD
---- `ci/ci.yml` orchestrates linting, type checking, Next.js build, SBOM generation, Trivy scan, and CodeQL analysis with dependency caching.
--+- `ci/ci.yml` orchestrates linting, type checking, Next.js build, SBOM generation, Trivy scan (failing on HIGH/CRITICAL issues), and CodeQL analysis with dependency caching and Node 20/22 matrix coverage.
-- - `ci/release.yml` builds and signs Docker images, attaches SBOMs, and publishes GitHub Releases following SemVer tags.
-- 
-- These decisions prioritise reproducibility, security, and reviewer clarity while keeping the existing Next.js stack intact.
-diff --git a/report/audit.md b/report/audit.md
-index bb4a9d7..5579ca9 100644
---- a/report/audit.md
-+++ b/report/audit.md
-@@ -29,6 +29,8 @@ ## Quick Wins Implemented
- - Added Makefile, npm scripts, and pre-commit hooks covering lint/typecheck/test/build.
- - Created CODEOWNERS, PR template, CONTRIBUTING, SECURITY, and ARCHITECTURE references.
- - Added Syft SBOM generation, strict Trivy scanning, and security artefact uploads.
-+- Introduced Vitest coverage for the origin engine and PDF generation flows to prevent regressions during persona UAT.
-+- Delivered certificate retrieval and PDF endpoints that function with both Postgres and mock data for offline parity.
- 
- ## Structural Initiatives Launched
- - CI workflow with Node 20/22 matrix, dependency caching, lint/typecheck/build, SBOM, Trivy (failing on HIGH/CRITICAL), and CodeQL.
-diff --git a/report/implementation-plan.md b/report/implementation-plan.md
-index 8628fd9..e857f47 100644
---- a/report/implementation-plan.md
-+++ b/report/implementation-plan.md
-@@ -24,7 +24,12 @@ # Implementation Plan
-    - Maintain ASVS Level 2 checklist under `docs/security` and link from SECURITY/PR templates.
-    - Track OWASP Top 10 considerations and escalate gaps during code reviews.
- 
--7. **Future Enhancements** (ETA: TBD, Impact: High)
-+7. **Behavioural Coverage & Artefact Hardening** (ETA: 0.75 day, Impact: High)
-+   - Add deterministic Vitest suites for the origin engine and PDF generator, exporting coverage reports for CI attestation.
-+   - Backfill certificate retrieval endpoints and PDF streaming API to unblock persona UAT download checks.
-+   - Update audit/report documentation with new coverage gates and offline parity expectations.
-+
-+8. **Future Enhancements** (ETA: TBD, Impact: High)
-    - Add automated integration tests for origin engine, TARIC client, and persona flows once datasets stabilise.
-    - Instrument observability stack (structured logging, tracing) via `lib/audit-service.ts` and surface metrics in CI.
-    - Provide Terraform/Kubernetes manifests in `/infra` once runtime targets are finalised.
-diff --git a/report/structure-decisions.md b/report/structure-decisions.md
-index 1823ecc..745cbeb 100644
---- a/report/structure-decisions.md
-+++ b/report/structure-decisions.md
-@@ -11,6 +11,7 @@ ## Tooling
- - Established `.editorconfig` and `.gitattributes` for consistent formatting across editors and platforms.
- - Added `.pre-commit-config.yaml` to run lint/typecheck/test/build before commits.
- - Introduced `Makefile` to standardise setup, lint, test, build, SBOM, scan, and release commands.
-+- Added `/tests` with Vitest configuration to provide deterministic behavioural coverage alongside static analysis.
- - Created multi-stage `Dockerfile` aligned with 12-Factor and container security best practices (non-root runtime, BuildKit ready).
- 
- ## Governance
-@@ -19,7 +20,7 @@ ## Governance
- - Added SECURITY policy referencing OWASP ASVS L2 and supply-chain requirements.
- 
- ## CI/CD
--- `ci/ci.yml` orchestrates linting, type checking, Next.js build, SBOM generation, Trivy scan (failing on HIGH/CRITICAL issues), and CodeQL analysis with dependency caching and Node 20/22 matrix coverage.
-+- `ci/ci.yml` orchestrates linting, type checking, unit tests via Vitest, Next.js build, SBOM generation, Trivy scan (failing on HIGH/CRITICAL issues), and CodeQL analysis with dependency caching and Node 20/22 matrix coverage.
- - `ci/release.yml` builds and signs Docker images, attaches SBOMs, and publishes GitHub Releases following SemVer tags.
- 
- These decisions prioritise reproducibility, security, and reviewer clarity while keeping the existing Next.js stack intact.
diff --git a/report/audit.md b/report/audit.md
index 5579ca9..df6d037 100644
--- a/report/audit.md
+++ b/report/audit.md
@@ -31,6 +31,7 @@ ## Quick Wins Implemented
 - Added Syft SBOM generation, strict Trivy scanning, and security artefact uploads.
 - Introduced Vitest coverage for the origin engine and PDF generation flows to prevent regressions during persona UAT.
 - Delivered certificate retrieval and PDF endpoints that function with both Postgres and mock data for offline parity.
+- Hardened optional services (Redis cache, BullMQ queue, SMTP notifications, audit logging) with environment-driven toggles and in-memory fallbacks so builds succeed without infrastructure dependencies.
 
 ## Structural Initiatives Launched
 - CI workflow with Node 20/22 matrix, dependency caching, lint/typecheck/build, SBOM, Trivy (failing on HIGH/CRITICAL), and CodeQL.
@@ -40,7 +41,7 @@ ## Structural Initiatives Launched
 
 ## Outstanding Risks
 - Database migrations/seeding should be validated in CI once a test database is available.
-- Observability stack (audit-service, tracing) remains a placeholder pending infra delivery.
+- Observability stack (audit-service, tracing) stores events locally when PostgreSQL is disabled but still requires downstream log shipping once infra is available.
 - TARIC integration requires network connectivity; add contract tests with mocked responses when API keys become available.
 - Need automated tests beyond static analysis to cover origin engine logic and persona scenarios.
 - Await arrival of upstream ZIP bundles before planning further migrations; re-run audit after assets land.
diff --git a/report/implementation-plan.md b/report/implementation-plan.md
index e857f47..8b55af4 100644
--- a/report/implementation-plan.md
+++ b/report/implementation-plan.md
@@ -7,6 +7,7 @@ # Implementation Plan
 2. **Stabilise Offline Fallbacks** (ETA: 0.5 day, Impact: High)
    - Ensure HS code search returns seeded data when DB/TARIC unavailable.
    - Validate Origin Calculator personas against mock repository and TARIC fallback client.
+   - Capture health indicators for database/Redis/task queue/SMTP so dashboards reflect degraded modes.
 
 3. **Governance & Developer Experience** (ETA: 1 day, Impact: High)
    - Maintain Makefile, pre-commit hooks, CODEOWNERS, CONTRIBUTING, SECURITY policy, and CHANGELOG.
@@ -27,7 +28,7 @@ # Implementation Plan
 7. **Behavioural Coverage & Artefact Hardening** (ETA: 0.75 day, Impact: High)
    - Add deterministic Vitest suites for the origin engine and PDF generator, exporting coverage reports for CI attestation.
    - Backfill certificate retrieval endpoints and PDF streaming API to unblock persona UAT download checks.
-   - Update audit/report documentation with new coverage gates and offline parity expectations.
+   - Update audit/report documentation with new coverage gates, feature toggles, and offline parity expectations.
 
 8. **Future Enhancements** (ETA: TBD, Impact: High)
    - Add automated integration tests for origin engine, TARIC client, and persona flows once datasets stabilise.
diff --git a/report/structure-decisions.md b/report/structure-decisions.md
index 745cbeb..4c62289 100644
--- a/report/structure-decisions.md
+++ b/report/structure-decisions.md
@@ -13,6 +13,7 @@ ## Tooling
 - Introduced `Makefile` to standardise setup, lint, test, build, SBOM, scan, and release commands.
 - Added `/tests` with Vitest configuration to provide deterministic behavioural coverage alongside static analysis.
 - Created multi-stage `Dockerfile` aligned with 12-Factor and container security best practices (non-root runtime, BuildKit ready).
+- Added `lib/config.ts` to centralise environment parsing, ensuring Redis/queue/audit/SMTP integrations can be toggled without code changes.
 
 ## Governance
 - Added `.github/CODEOWNERS` and PR template to enforce clear review ownership and expectations.
