name: Security Scanning

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  trivy-container-scan:
    name: Trivy Container Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t psra-ltsd-enterprise:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: psra-ltsd-enterprise:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true
          vuln-type: 'os,library'
          timeout: '10m'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy in table format for PR comment
        uses: aquasecurity/trivy-action@master
        if: github.event_name == 'pull_request'
        with:
          image-ref: psra-ltsd-enterprise:${{ github.sha }}
          format: 'table'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

  trivy-filesystem-scan:
    name: Trivy Filesystem Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true

      - name: Upload Trivy filesystem results
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'

  trivy-config-scan:
    name: Trivy IaC Configuration Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy config scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-config-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'

      - name: Upload Trivy config results
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: 'trivy-config-results.sarif'

  python-security-scan:
    name: Python Security Scan (Bandit & Safety)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==1.7.1

      - name: Install dependencies
        run: |
          poetry install --with dev --no-interaction

      - name: Run Bandit security linter
        run: |
          poetry add --group dev bandit[toml] --no-interaction || true
          poetry run bandit -r backend/ app/ -f json -o bandit-report.json || true
          poetry run bandit -r backend/ app/ -f screen

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 30

      - name: Check for known vulnerabilities with Safety
        run: |
          poetry add --group dev safety --no-interaction || true
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          poetry run safety check --file requirements.txt --json > safety-report.json || true
          poetry run safety check --file requirements.txt

      - name: Upload Safety report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-vulnerability-report
          path: safety-report.json
          retention-days: 30

  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Run npm audit
        run: |
          npm audit --json > npm-audit-report.json || true
          npm audit

      - name: Upload npm audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: npm-audit-report
          path: npm-audit-report.json
          retention-days: 30

  secret-scanning:
    name: Secret Detection with TruffleHog
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [trivy-container-scan, trivy-filesystem-scan, trivy-config-scan, python-security-scan, npm-audit, secret-scanning]
    if: always()

    steps:
      - name: Summary
        run: |
          echo "## Security Scan Results Summary"
          echo "- Container vulnerability scan: ${{ needs.trivy-container-scan.result }}"
          echo "- Filesystem vulnerability scan: ${{ needs.trivy-filesystem-scan.result }}"
          echo "- IaC configuration scan: ${{ needs.trivy-config-scan.result }}"
          echo "- Python security scan: ${{ needs.python-security-scan.result }}"
          echo "- NPM audit: ${{ needs.npm-audit.result }}"
          echo "- Secret scanning: ${{ needs.secret-scanning.result }}"
