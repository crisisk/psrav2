name: SBOM Generation & Supply Chain Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]
  schedule:
    # Generate SBOM weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:

permissions:
  contents: write
  packages: read
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  generate-sbom-docker:
    name: Generate SBOM for Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ${{ env.IMAGE_NAME }}:sbom-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.15.11

      - name: Generate SBOM with Syft (SPDX JSON)
        run: |
          syft ${{ env.IMAGE_NAME }}:sbom-${{ github.sha }} \
            -o spdx-json=sbom-docker-spdx.json \
            --source-name ${{ github.repository }} \
            --source-version ${{ github.sha }}

      - name: Generate SBOM with Syft (CycloneDX JSON)
        run: |
          syft ${{ env.IMAGE_NAME }}:sbom-${{ github.sha }} \
            -o cyclonedx-json=sbom-docker-cyclonedx.json \
            --source-name ${{ github.repository }} \
            --source-version ${{ github.sha }}

      - name: Generate SBOM with Syft (SPDX YAML)
        run: |
          syft ${{ env.IMAGE_NAME }}:sbom-${{ github.sha }} \
            -o spdx-yaml=sbom-docker-spdx.yaml \
            --source-name ${{ github.repository }} \
            --source-version ${{ github.sha }}

      - name: Generate SBOM with Syft (Table format for summary)
        run: |
          syft ${{ env.IMAGE_NAME }}:sbom-${{ github.sha }} \
            -o table=sbom-docker-table.txt

      - name: Upload Docker SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-docker-image
          path: |
            sbom-docker-*.json
            sbom-docker-*.yaml
            sbom-docker-*.txt
          retention-days: 90

      - name: Attach SBOM to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            sbom-docker-spdx.json
            sbom-docker-cyclonedx.json
            sbom-docker-spdx.yaml

  generate-sbom-python:
    name: Generate SBOM for Python Backend
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==1.7.1

      - name: Export dependencies
        run: |
          poetry export -f requirements.txt --output requirements.txt --without-hashes --with dev

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.15.11

      - name: Generate Python SBOM (SPDX JSON)
        run: |
          syft dir:. \
            -o spdx-json=sbom-python-spdx.json \
            --source-name ${{ github.repository }}-python \
            --source-version ${{ github.sha }}

      - name: Generate Python SBOM (CycloneDX JSON)
        run: |
          syft dir:. \
            -o cyclonedx-json=sbom-python-cyclonedx.json \
            --source-name ${{ github.repository }}-python \
            --source-version ${{ github.sha }}

      - name: Generate Python SBOM with pip-audit format
        run: |
          pip install pip-audit
          pip-audit --requirement requirements.txt --format json --output pip-audit-report.json || true

      - name: Upload Python SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-python-backend
          path: |
            sbom-python-*.json
            pip-audit-report.json
          retention-days: 90

      - name: Attach Python SBOM to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            sbom-python-spdx.json
            sbom-python-cyclonedx.json

  generate-sbom-npm:
    name: Generate SBOM for NPM Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.15.11

      - name: Generate NPM SBOM (SPDX JSON)
        run: |
          syft dir:. \
            -o spdx-json=sbom-npm-spdx.json \
            --source-name ${{ github.repository }}-npm \
            --source-version ${{ github.sha }}

      - name: Generate NPM SBOM (CycloneDX JSON)
        run: |
          syft dir:. \
            -o cyclonedx-json=sbom-npm-cyclonedx.json \
            --source-name ${{ github.repository }}-npm \
            --source-version ${{ github.sha }}

      - name: Generate NPM SBOM with built-in tools
        run: |
          npm sbom --sbom-format=cyclonedx --sbom-type=json > npm-native-sbom.json || true

      - name: Upload NPM SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-npm-frontend
          path: |
            sbom-npm-*.json
            npm-native-sbom.json
          retention-days: 90

      - name: Attach NPM SBOM to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            sbom-npm-spdx.json
            sbom-npm-cyclonedx.json

  vulnerability-scan-sbom:
    name: Scan SBOM for Vulnerabilities
    runs-on: ubuntu-latest
    needs: [generate-sbom-docker, generate-sbom-python, generate-sbom-npm]
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all SBOM artifacts
        uses: actions/download-artifact@v4

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan Docker SBOM with Grype
        run: |
          grype sbom:sbom-docker-image/sbom-docker-spdx.json \
            -o json \
            --file grype-docker-results.json || true
          grype sbom:sbom-docker-image/sbom-docker-spdx.json \
            -o table

      - name: Scan Python SBOM with Grype
        run: |
          grype sbom:sbom-python-backend/sbom-python-spdx.json \
            -o json \
            --file grype-python-results.json || true
          grype sbom:sbom-python-backend/sbom-python-spdx.json \
            -o table

      - name: Scan NPM SBOM with Grype
        run: |
          grype sbom:sbom-npm-frontend/sbom-npm-spdx.json \
            -o json \
            --file grype-npm-results.json || true
          grype sbom:sbom-npm-frontend/sbom-npm-spdx.json \
            -o table

      - name: Upload Grype scan results
        uses: actions/upload-artifact@v4
        with:
          name: grype-vulnerability-results
          path: grype-*-results.json
          retention-days: 90

  sbom-attestation:
    name: Generate and Sign SBOM Attestation
    runs-on: ubuntu-latest
    needs: [generate-sbom-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      id-token: write
      packages: write
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Docker SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom-docker-image

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Attest SBOM with Cosign
        run: |
          cosign attest --yes \
            --type cyclonedx \
            --predicate sbom-docker-cyclonedx.json \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

      - name: Verify attestation
        run: |
          cosign verify-attestation \
            --type cyclonedx \
            --certificate-identity-regexp=".*" \
            --certificate-oidc-issuer-regexp=".*" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}

  sbom-summary:
    name: SBOM Generation Summary
    runs-on: ubuntu-latest
    needs: [generate-sbom-docker, generate-sbom-python, generate-sbom-npm, vulnerability-scan-sbom]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate summary report
        run: |
          echo "# SBOM Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Artifact Status" >> $GITHUB_STEP_SUMMARY
          echo "- Docker SBOM: ${{ needs.generate-sbom-docker.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Python SBOM: ${{ needs.generate-sbom-python.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- NPM SBOM: ${{ needs.generate-sbom-npm.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Vulnerability Scan: ${{ needs.vulnerability-scan-sbom.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Generated Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- SPDX JSON format (Docker, Python, NPM)" >> $GITHUB_STEP_SUMMARY
          echo "- CycloneDX JSON format (Docker, Python, NPM)" >> $GITHUB_STEP_SUMMARY
          echo "- Vulnerability scan results (Grype)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All SBOMs are available in the workflow artifacts." >> $GITHUB_STEP_SUMMARY

      - name: Summary output
        run: |
          echo "=== SBOM Generation Complete ==="
          echo "Docker SBOM: ${{ needs.generate-sbom-docker.result }}"
          echo "Python SBOM: ${{ needs.generate-sbom-python.result }}"
          echo "NPM SBOM: ${{ needs.generate-sbom-npm.result }}"
          echo "Vulnerability Scan: ${{ needs.vulnerability-scan-sbom.result }}"
