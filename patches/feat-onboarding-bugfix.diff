feat: harden onboarding calculator and persistence
diff --git a/components/dashboard/OriginCalculator.tsx b/components/dashboard/OriginCalculator.tsx
index 23cae19..fb55027 100644
--- a/components/dashboard/OriginCalculator.tsx
+++ b/components/dashboard/OriginCalculator.tsx
@@ -152,6 +152,26 @@ export function OriginCalculator({
     }));
   }, [materials, productValue]);
 
+  const resetMessages = useCallback(() => {
+    setError(null);
+    setStatusMessage(null);
+  }, []);
+
+  const sanitizeMaterials = useCallback(
+    (items: MaterialInput[]) =>
+      items
+        .map(material => ({
+          hsCode: normaliseHs(material.hsCode),
+          origin: material.origin.trim().toUpperCase(),
+          value: Number(material.value) || 0,
+          percentage:
+            productValue > 0 ? (Number(material.value) / productValue) * 100 : material.percentage,
+          description: material.description?.trim() || undefined
+        }))
+        .filter(material => material.hsCode.length === 6 && material.origin.length > 0),
+    [productValue]
+  );
+
   const applyPersona = useCallback((persona: PersonaScenario) => {
     setHsCode(persona.hsCode);
     setProductSku(persona.productSku);
@@ -179,6 +199,7 @@ export function OriginCalculator({
   const handlePersonaChange = (personaId: string) => {
     setSelectedPersonaId(personaId);
     if (personaId === 'custom') {
+      resetMessages();
       setStatusMessage('Aangepaste scenario actief. Vul handmatig de gegevens in.');
     }
   };
@@ -198,6 +219,8 @@ export function OriginCalculator({
   };
 
   const handleCalculate = async () => {
+    resetMessages();
+
     const sanitizedHs = normaliseHs(hsCode);
     const sanitizedSku = productSku.trim();
 
@@ -226,15 +249,7 @@ export function OriginCalculator({
       return;
     }
 
-    const preparedMaterials = materials
-      .map(material => ({
-        hsCode: normaliseHs(material.hsCode),
-        origin: material.origin.trim().toUpperCase(),
-        value: Number(material.value) || 0,
-        percentage: productValue > 0 ? (Number(material.value) / productValue) * 100 : material.percentage,
-        description: material.description?.trim() || undefined
-      }))
-      .filter(material => material.hsCode.length === 6 && material.origin.length > 0);
+    const preparedMaterials = sanitizeMaterials(materials);
 
     if (preparedMaterials.length === 0) {
       setError('Alle materiaalregels moeten een geldige HS-code en oorsprong bevatten.');
@@ -287,7 +302,8 @@ export function OriginCalculator({
     productSku,
     productValue,
     resetMessages,
-    validateMaterials,
+    sanitizeMaterials,
+    totalMaterialValue,
   ]);
 
   const personaInsights = selectedPersona?.insights;
diff --git a/lib/repository.ts b/lib/repository.ts
index f9d397c..c310653 100644
--- a/lib/repository.ts
+++ b/lib/repository.ts
@@ -5,6 +5,8 @@ import {
   findMockCertificate,
   getMockCertificates,
 } from '@/lib/mock-data';
+import type { MockCertificateResult } from '@/lib/mock-data';
+import { isDatabaseEnabled } from '@/lib/config';
 import type { MockCertificate } from '@/lib/mock-data';
 
 export const CERTIFICATE_STATUSES = ['pending', 'processing', 'done', 'failed'] as const;
@@ -219,6 +221,17 @@ export async function createCertificate(
     throw new Error(`Invalid certificate status: ${params.status}`);
   }
 
+  if (!isDatabaseEnabled) {
+    const fallback = addMockCertificate({
+      productSku: params.productSku,
+      hs6: params.hs6,
+      agreement: params.agreement,
+      status: params.status,
+      result: (params.result ?? undefined) as MockCertificateResult | undefined,
+    });
+    return mapMockCertificate(fallback);
+  }
+
   const sql = `
     INSERT INTO certificates ("productSku", hs6, agreement, status, result, "createdAt", "updatedAt")
     VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
@@ -245,7 +258,14 @@ export async function createCertificate(
     return mapCertificate(result.rows?.[0]);
   } catch (error) {
     console.error('Error creating certificate:', error);
-    throw error;
+    const fallback = addMockCertificate({
+      productSku: params.productSku,
+      hs6: params.hs6,
+      agreement: params.agreement,
+      status: params.status,
+      result: (params.result ?? undefined) as MockCertificateResult | undefined,
+    });
+    return mapMockCertificate(fallback);
   }
 }
 
