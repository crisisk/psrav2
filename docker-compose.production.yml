version: '3.8'

services:
  frontend:
    image: your-frontend-image:production
    restart: unless-stopped
    networks:
      - frontend
      - backend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.psra.sevensa.nl
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend-psra.rule=Host(`psra.sevensa.nl`)
      - traefik.http.routers.frontend-psra.entrypoints=websecure
      - traefik.http.routers.frontend-psra.tls.certresolver=letsencrypt
      - traefik.http.routers.frontend-demo.rule=Host(`demo.sevensa.nl`)
      - traefik.http.routers.frontend-demo.entrypoints=websecure
      - traefik.http.routers.frontend-demo.tls.certresolver=letsencrypt
      - traefik.http.services.frontend.loadbalancer.server.port=3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    image: your-backend-image:production
    restart: unless-stopped
    networks:
      - backend
      - database
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/app_db
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
    volumes:
      - backend-data:/app/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`api.psra.sevensa.nl`)
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.tls.certresolver=letsencrypt
      - traefik.http.services.backend.loadbalancer.server.port=8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    networks:
      - database
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=app_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - database
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  traefik:
    image: traefik:v2.10
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    networks:
      - frontend
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.email=your-email@example.com
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web

networks:
  frontend:
  backend:
  database:

volumes:
  postgres-data:
  redis-data:
  backend-data:
  traefik-certificates: