import { useState } from 'react';
import {
  Button,
  Checkbox,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  IconButton,
  Stack,
  Typography
} from '@mui/material';
import {
  Archive as ArchiveIcon,
  Delete as DeleteIcon,
  Download as DownloadIcon,
  Close as CloseIcon
} from '@mui/icons-material';
import { tokens } from '@sevensa/design-tokens';

interface BulkActionsProps {
  selectedIds: string[];
  totalCount: number;
  onSelectAll: (checked: boolean) => void;
  onClearSelection: () => void;
  onExport: (ids: string[]) => void;
  onDelete: (ids: string[]) => void;
  onArchive: (ids: string[]) => void;
}

export const BulkActions = ({
  selectedIds,
  totalCount,
  onSelectAll,
  onClearSelection,
  onExport,
  onDelete,
  onArchive
}: BulkActionsProps) => {
  const [confirmAction, setConfirmAction] = useState<'delete' | 'archive' | null>(null);

  const handleConfirm = () => {
    if (confirmAction === 'delete') {
      onDelete(selectedIds);
    } else if (confirmAction === 'archive') {
      onArchive(selectedIds);
    }
    setConfirmAction(null);
  };

  if (selectedIds.length === 0) {
    return null;
  }

  return (
    <>
      <Stack
        direction="row"
        alignItems="center"
        spacing={2}
        sx={{
          px: 2,
          py: 1,
          backgroundColor: tokens.colors.background.surface,
          borderBottom: `1px solid ${tokens.colors.border.default}`,
        }}
      >
        <Checkbox
          checked={selectedIds.length === totalCount}
          indeterminate={selectedIds.length > 0 && selectedIds.length < totalCount}
          onChange={(e) => onSelectAll(e.target.checked)}
        />

        <Typography variant="body2" sx={{ color: tokens.colors.text.secondary }}>
          {selectedIds.length} selected
        </Typography>

        <Stack direction="row" spacing={1}>
          <Button
            size="small"
            startIcon={<DownloadIcon />}
            onClick={() => onExport(selectedIds)}
          >
            Export
          </Button>

          <Button
            size="small"
            color="warning" 
            startIcon={<ArchiveIcon />}
            onClick={() => setConfirmAction('archive')}
          >
            Archive
          </Button>

          <Button
            size="small"
            color="error"
            startIcon={<DeleteIcon />}
            onClick={() => setConfirmAction('delete')}
          >
            Delete
          </Button>
        </Stack>

        <IconButton size="small" onClick={onClearSelection}>
          <CloseIcon />
        </IconButton>
      </Stack>

      <Dialog open={!!confirmAction} onClose={() => setConfirmAction(null)}>
        <DialogTitle>
          Confirm {confirmAction === 'delete' ? 'Deletion' : 'Archive'}
        </DialogTitle>
        <DialogContent>
          <Typography>
            Are you sure you want to {confirmAction === 'delete' ? 'delete' : 'archive'} {selectedIds.length} selected items?
            This action cannot be undone.
          </Typography>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setConfirmAction(null)}>Cancel</Button>
          <Button
            color={confirmAction === 'delete' ? 'error' : 'warning'}
            onClick={handleConfirm}
            autoFocus
          >
            Confirm
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};
