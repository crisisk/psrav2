{
  "info": {
    "name": "PSRA LTSD - UAT Test Suite",
    "description": "Comprehensive UAT test suite for PSRA LTSD Enterprise application",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "https://uat.sevensa.nl",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Health & Status Checks",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is less than 500ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);",
                  "});",
                  "",
                  "pm.test('Response has status field', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});",
                  "",
                  "pm.test('Status is healthy', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.be.oneOf(['ok', 'healthy', 'up']);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": ["{{base_url}}"],
              "path": ["health"]
            },
            "description": "Verify application health endpoint"
          }
        },
        {
          "name": "Metrics Endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Metrics endpoint is accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains Prometheus metrics', function () {",
                  "    pm.expect(pm.response.text()).to.include('# HELP');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/metrics",
              "host": ["{{base_url}}"],
              "path": ["metrics"]
            },
            "description": "Verify Prometheus metrics endpoint"
          }
        },
        {
          "name": "Readiness Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Application is ready', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(300);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/ready",
              "host": ["{{base_url}}"],
              "path": ["ready"]
            },
            "description": "Verify readiness probe endpoint"
          }
        }
      ]
    },
    {
      "name": "API Endpoints",
      "item": [
        {
          "name": "API Root",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('API root is accessible', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api",
              "host": ["{{base_url}}"],
              "path": ["api"]
            }
          }
        },
        {
          "name": "API Version",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Version endpoint returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains version', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('version');",
                  "});",
                  "",
                  "pm.test('Version is semantic', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+\\.\\d+/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/version",
              "host": ["{{base_url}}"],
              "path": ["api", "version"]
            }
          }
        }
      ]
    },
    {
      "name": "Database Connectivity",
      "item": [
        {
          "name": "Database Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Database connection is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Database response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('database');",
                  "    pm.expect(jsonData.database).to.have.property('status');",
                  "    pm.expect(jsonData.database.status).to.equal('connected');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/health/db",
              "host": ["{{base_url}}"],
              "path": ["api", "health", "db"]
            }
          }
        }
      ]
    },
    {
      "name": "Redis Cache",
      "item": [
        {
          "name": "Redis Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Redis connection is healthy', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Redis response is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('redis');",
                  "    pm.expect(jsonData.redis).to.have.property('status');",
                  "    pm.expect(jsonData.redis.status).to.equal('connected');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/health/redis",
              "host": ["{{base_url}}"],
              "path": ["api", "health", "redis"]
            }
          }
        }
      ]
    },
    {
      "name": "Performance Tests",
      "item": [
        {
          "name": "Response Time Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test('Response time is less than 500ms (optimal)', function () {",
                  "    if (pm.response.responseTime > 500) {",
                  "        console.warn('Response time exceeds 500ms: ' + pm.response.responseTime + 'ms');",
                  "    }",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/health",
              "host": ["{{base_url}}"],
              "path": ["api", "health"]
            }
          }
        }
      ]
    },
    {
      "name": "Security Headers",
      "item": [
        {
          "name": "Security Headers Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Has X-Frame-Options header', function () {",
                  "    pm.response.to.have.header('X-Frame-Options');",
                  "});",
                  "",
                  "pm.test('Has X-Content-Type-Options header', function () {",
                  "    pm.response.to.have.header('X-Content-Type-Options');",
                  "});",
                  "",
                  "pm.test('Has Strict-Transport-Security header', function () {",
                  "    pm.response.to.have.header('Strict-Transport-Security');",
                  "});",
                  "",
                  "pm.test('Has Content-Security-Policy header', function () {",
                  "    // Optional - uncomment if CSP is implemented",
                  "    // pm.response.to.have.header('Content-Security-Policy');",
                  "    console.log('CSP check: ' + pm.response.headers.has('Content-Security-Policy'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/",
              "host": ["{{base_url}}"],
              "path": [""]
            }
          }
        }
      ]
    },
    {
      "name": "Error Handling",
      "item": [
        {
          "name": "404 Not Found",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns 404 for non-existent endpoint', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "pm.test('Error response has message', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/non-existent-endpoint",
              "host": ["{{base_url}}"],
              "path": ["api", "non-existent-endpoint"]
            }
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "console.log('Running UAT tests against: ' + pm.variables.get('base_url'));",
          "pm.variables.set('timestamp', new Date().toISOString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test('Response has no server errors (5xx)', function () {",
          "    pm.expect(pm.response.code).to.be.below(500);",
          "});"
        ]
      }
    }
  ]
}
